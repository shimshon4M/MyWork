<?xml version="1.0" ?>
<root>
  <title>^*法に従うアジェンダ制御による構文解析</title>
  <author>吉見毅彦Jelinek西田収田村直之村上温夫</author>
  <jabstract>本稿では，構文解析を探索問題と捉えた上で，^*法の探索戦略に従ってチャート法のアジェンダを制御し，最も適切な構文構造から順に必要なだけ生成する構文解析手法を提案する．文脈自由文法形式の費用付き構文規則が与えられたとき，規則に従って生成されうる各部分構造について，その構造に相当する現在状態からその構造を構成要素として持つ全体構造に相当する目標状態までの費用を，構文解析に先立って，^*法の最適性条件を満たすように推定しておく．従って，構文解析では，競合する構造のうちその生成費用と推定費用の和が最も小さいものから優先的に処理していくと，生成費用の最も小さい全体構造が必ず得られる．また，優先すべき構造は，個々の規則に付与された費用に基づいて定まるので，優先すべき構造をきめ細かく指定でき，優先したい構造の変更も規則の費用を変更するだけで容易に行なえる．費用付き構文規則は，記述力の点で，確率文脈自由文法規則の拡張とみなすことができる．</jabstract>
  <jkeywords>構文解析，チャート法，^*法，優先性</jkeywords>
  <section title="^*法の探索戦略に従うアジェンダ制御">^*法とチャート法について簡単に説明した後，これらを組み合わせて，可能な構文構造を適切な順に必要なだけ生成する手法について述べる．^*法は，初期状態から現在状態までの費用gと，現在状態から目標状態までの推定費用hとの和fを発見的知識として探索を行なう．適用可能な状態遷移オペレータが残っている状態と残っていない状態を，それぞれ，OPENリストとCLOSEリストに保持する．探索では，1)全推定費用fの最も小さい状態をOPENリストから取り出し，CLOSEリストに入れる，2)取り出した状態に状態遷移オペレータを適用して，すべての継続状態を生成する，3)各継続状態についてfを計算し，継続状態のうちOPENリストとCLOSEリストのいずれにも入っていない状態をOPENリストに入れる，という三つの過程を繰り返し，OPENリストから取り出した状態が目標状態であれば，探索を終える．^*法の探索戦略に従う探索では，推定費用hが現在状態から目標状態までの実際の費用hより大きくないという最適性条件が成り立つならば，目標状態が存在する限り，費用の最も小さい目標状態に到達できることが証明されている．チャート法は，チャートと呼ばれる表に，弧と呼ばれる部分的構文構造を登録しながら処理を進める．構文規則_1_mから生成される弧は，[_1_i[?]__i+1[?]__m]_の形式で表される．_1_iは既に完成した構造の列であり，[?]__i+1[?]__mは空所と呼ばれる未完成の構造の列である．弧は，空所があるとき(1i&lt;mのとき)活性弧と呼ばれ，ないとき(i=mのとき)不活性弧と呼ばれる．また，その弧の生成に用いられた構文規則の左辺の構文範疇でラベル付けされている．以後，紛れなければ，弧をその構文範疇名で呼ぶ．上昇型チャート法の枠組みは，1)不活性弧のラベルを右辺の第一項として持つ構文規則を適用することで弧を成長させる予測手続き，2)活性弧の空所を不活性弧で埋めることで弧を成長させる結合手続き，の二つの手続きから成る．解析のある時点において，予測手続きまたは結合手続きの処理対象となる弧が複数存在するとき，そのうちどの弧を選択するかは，アジェンダと呼ばれるリストを用いて制御される．アジェンダ制御にどのような戦略を用いるかに応じて，チャート法は様々な振舞いを示す．チャート法による構文解析を探索問題と捉えると，自然な対応付けとして，チャート法における弧，予測手続きと結合手続き，アジェンダ，チャートは，それぞれ，探索問題における状態，状態遷移オペレータ，OPENリスト，CLOSEリストとみなせる．以後，ラベルが終端構文範疇であり，初期状態に相当する不活性弧を初期弧と呼ぶ．また，nを入力文の終了位置とするとき位置が[0,n]であり，ラベルが目標構文範疇であり，目標状態に相当する不活性弧を目標弧と呼ぶ．弧には，費用付き構文規則を適用して初期弧からその弧を生成するために要した費用を付与する．これは，初期状態から現在状態までの費用gに相当し，後に節で示す式()で計算される．さらに，弧には，それを構成要素として持つ目標弧を生成するための推定費用を付与する．これは，現在状態から目標状態までの推定費用hに相当し，後に節で示す式()で計算される．*-0.5mm式()*-0.3mmで計算される推定費用hは，*-0.5mm^*法の最適性条件hhを満たすので，*-0.5mmg*-0.1mmと*-0.1mmhの和fが小さい順に弧をアジェンダから取り出せば，^*法の探索戦略に従う上昇型チャート法が実現できる．そのアルゴリズムを図に示す．このアルゴリズムは，費用の最も小さい目標弧を生成した後も，そのまま処理を続ければ，目標弧を費用の昇順に必要なだけ生成することができる．図のアルゴリズムは最も基本的なものである．この基本アルゴリズムに次のような改良を加えれば，生成される弧の数は減少する．可能な構文構造を効率良く表現するために，1)二つの構造が持つすべての情報が同じであるとき，それらの構造を共有し(sub-treesharing)，2)二つの構造が持つ情報のうち内部構造以外のすべての情報が同じであるとき，それらの構造を統合する(localambiguitypacking)方法が用いられることがある．元のチャート法に基づく基本アルゴリズムでは，前者は実現されているが後者は実現されていない．実現するためには，ステップを次のように変更すればよい．生成された弧が不活性弧であり，そのラベル，位置，全推定費用と同じものを持つ不活性弧がアジェンダに存在すれば，それら二つの弧を統合してアジェンダに入れ，チャートに存在すれば，二つの弧を統合してチャートに入れる．さもなければ，生成された弧をアジェンダに入れる．LIST</section>
  <section title="はじめに">入力文の構文構造を明らかにする構文解析手法には，大きく分けて，1)可能な構造をすべて生成する手法と，2)可能な構造に優劣を付け，そのうち最も適切なものだけを，または適切なものから順に生成する手法，の二つがある．前者の手法として，これまでに，一般化LR法やSAX，LangLABなどの効率の良い手法が数多く提案されている．しかしながら，これらの手法を，機械翻訳システムなどの実用を目指した自然言語処理システムに組み込むことは，必ずしも適切ではない．なぜならば，通常，可能な構文構造の数は膨大なものになるため，それらをすべて意味解析などの構文解析以降の処理過程に送ると，システム全体としての効率が問題になるからである．意味的親和性や照応関係に関する選好なども考慮に入れて全体で最も適切となる解釈は，最も適切な構文構造から得られるとは限らないので，システム全体で最も適切な解釈を得るためには，最悪の場合，可能な構造をすべて生成しなければならない．しかし，より適切な構文構造がシステム全体で最も適切な解釈の構成要素となる可能性が高いと期待されるので，適切でない構造は生成しなくてもよい可能性が高い．従って，可能な構造のうち最も適切なものだけをまず生成し，構文解析以降の処理からの要請があって初めて，次に適切な構造を生成するための処理を開始する後者の手法のほうが，システム全体の効率の観点からは望ましい．後者の手法を実現するためのアプローチでは，費用が付与された部分構造を状態とする状態空間において，目標状態のうち費用の最も小さいものを発見するという探索問題として構文解析を捉えるのが自然である．このように捉えると，確立された種々の探索戦略を構文解析に応用することができる．本稿では，可能な構造のうち生成費用の最も小さいものだけをまず生成し，必要ならば可能な構造が尽きるまですべての構造を生成費用の昇順に生成する構文解析法を提案する．基本的な考え方は，チャート法のアジェンダを^*法の探索戦略に従って制御することである．チャート法は，良く知られているように，重複処理を行わない効率の良い構文解析の枠組みである．解析過程において生成されうる部分構造に，構文規則に付与された費用に基づいて計算される生成費用を付与するとともに，その構造を構成要素として持つ全体構造を生成するまでの費用を，^*法の最適性条件を満たし実際の費用になるべく近くなるように推定して付与し，競合する部分構造のうちその生成費用と推定費用の和が最も小さいものに対する処理を優先的に進めれば，効率の良い構文解析が実現できる．本稿の手法と同じように，適切な構造を優先的に生成する手法として，これまでに，Shieberの手法やKGW+p，島津らの手法などが提案されている．これら関連する研究との比較は節で行なう．</section>
  <section title="弧の生成費用の計算">弧を生成するための費用は，構文規則に付与された費用に基づいて計算される．費用付き構文規則は，文脈自由文法の形式に従い，一般に次のように表せる．は非終端構文範疇，_iは終端構文範疇または非終端構文範疇である．C_は，この規則の適用費用を表す．w__iは，弧_iと_j(ji)の相対的関係を表す重みである．C_は非負の実数，w__iは正の実数とする．活性弧[_1_i[?]__i+1[?]__m]_(i=mならば不活性弧)を生成するための費用は，不活性弧_j(1ji)を生成するための費用g__jに重みw__jをかけたものの和に，規則()の適用費用C_を加えた値であると定め，次式で計算する．初期弧の生成費用は0とする．</section>
  <section title="目標弧までの費用の推定">弧から目標弧までの費用の推定は，入力文とは独立に，構文規則だけに基づいてあらかじめ行なっておく．*0.1mm従って，*0.1mm一*0.1mm度*0.1mm求めた推*0.1mm定*0.1mm費*0.1mm用は，*0.1mm費*0.1mm用*0.1mm付き構*0.1mm文*0.1mm規*0.1mm則に変*0.1mm更がない限り変*0.1mm更されない．*0.1mm推*0.1mm定は，上*0.1mm昇*0.1mm型*0.1mm解*0.1mm析とは逆*0.1mm方*0.1mm向に目*0.1mm標*0.1mm弧から初*0.1mm期*0.1mm弧に向けて行ない，*0.1mm求めた推*0.1mm定*0.1mm費*0.1mm用を各弧に付与する．推定を下降型で行なうので，本節では，弧から目標弧までの推定費用を，目標弧から弧までの推定費用と呼ぶ．推定費用は，構文解析で活性弧の空所が左から順に埋っていくことを前提として計算する．目標構文範疇から始めて，構文規則を左辺から右辺への書き換えに繰り返し用い，目標弧から活性弧[?]_までの推定費用h_が計算済みであり，規則()が存在するとき，目標弧から活性弧[?]__iまでの推定費用h__iは，次式で計算できる．C_は規則()の適用費用であり，_j&gt;i^mw__jg__jは活性弧[_1_i[?]__i+1[?]__m]_のすべての空所を埋めるための最小費用である．下降型推定で求めた目標弧から活性弧[?]_までの費用h_は，*-0.4mm上昇型構文解析を行なうときには不活性弧から目標弧までの推定費用となる．*-0.4mm式()で計算される推定費用は，目標弧から活性弧[?]_までの可能な推定費用のうち最小値を右辺第一項とし，*-0.4mm可能な不活性弧_jの生成費用のうち最小値を第二項としているので，*-0.4mm^*法の最適性条件を満たす．式()を用いて推定費用を求めるために，まず，不活性弧_jの最小生成費用g__jを計算する．そのアルゴリズムを図に示す．例えば，図のような費用付き構文規則が与えられたとき，この規則に従って生成される各不活性弧の最小生成費用は，図のアルゴリズムを用いて次のように計算される．まず，ステップで，g_=0，g_=0，g_=0，g_=0となる．*0.1mmス*0.1mmテ*0.1mmッ*0.1mmプで，リストに，規*0.1mm則(a)が先*0.1mm頭，規*0.1mm則(k)が最*0.1mm後*0.1mm尾という順で入っているとすると，一回目のループのステップで，規則(a)~/1/1,1が取り出されるが，g_もg_もまだ求まっていないので，この規則はステップでリストの最後尾に入れられる．二〜五回目のループでも同様に，規則(b)〜(e)が取り出されるが，いずれもステップでリストの最後尾に入れられる．六回目のループのステップでは規則(f)が取り出される．g_は既に求まっているので，ステップで，g_=w_g_+C_=1と計算される．この値は不活性弧Aについて初めて計算された値であるので，ステップでは何も行なわれない．七回目のループのステップで規則(g)が取り出されると，ステップでg_=1となる．この値は不活性弧Aについて既に求まっている値より小さくないので，ステップでは何も行なわれない．以下，同様にして，g_=1，g_=1，g_=1，g_=1，g_=3，g_=3，g_=7が順に求まる．次に，*0.3mm以*0.1mm上*0.1mmの*0.1mmよ*0.1mmう*0.1mmに*0.1mmし*0.1mmて計*0.1mm算*0.1mmされた*0.1mm不*0.2mm活*0.2mm性*0.2mm弧の最*0.1mm小*0.1mm生*0.2mm成*0.2mm費*0.2mm用*0.1mmを式()に代入して，*0.3mm目*0.1mm標*0.1mm弧から各弧までの最小推定費用を再帰的に求める．そのアルゴリズムを図に示す．図の費用付き構文規則が与えられているとき，推定費用は次のように計算される．ステップで構文範疇Sが取り出されるので，規則(a)がステップでの処理対象となり，目標弧から不活性弧NPまでの推定費用は，h_=h_+w_g_+C_=4と計算され，不活性弧VPまでの推定費用はh_=h_=0となる．活性弧[[?]_]_までの推定費用は，h_[[?]_]_=3と*0.2mmな*0.2mmる．*0.2mmこ*0.2mmれ*0.2mmら*0.2mmの*0.2mm推*0.2mm定*0.2mm値*0.2mmは*0.2mm初*0.2mmめ*0.2mmて*0.2mm計*0.2mm算*0.2mmさ*0.2mmれ*0.2mmた*0.2mm値*0.2mmで*0.2mmあ*0.2mmる*0.2mmの*0.2mmで，*0.2mm*0.2mmス*0.2mmテ*0.2mmッ*0.2mmプ*0.2mmで*0.2mmの*0.2mm大*0.2mm小*0.2mm比*0.2mm較*0.2mmは*0.2mm行なわれない．ステップでNPとVPがリストの最後尾に入れられる．二回目のループのステップでは構文範疇NPが取り出され，規則(b)と(c)がステップでの処理対象となる．規則(b)について，不活性弧Aまでの推定費用は，h_=h_+w_g_+C_=6となり，*-0.3mm不活性弧Nまでの推定費用はh_=h_=4となる．*-0.3mm活性弧[[?]_]_までの推定費用は，h_[[?]_]_=5となる．規則(c)については，不活性弧PRPまでの推定費用は，h_=h_+w_g_+C_=10と計算され，活性弧[[?]_]_までの推定費用は，h_[[?]_]_=5となる．ステップでA，PRP，Nがリストの最後尾に入れられる．三回目のループのステップでは，規則(d)と(e)が処理対象となる．規則(d)について，不活性弧Vまでの推定費用は，h_=h_+w_g_+C_=6，不活性弧Aまでの推定費用はh_=h_=0となる．活性弧[[?]_]_までの推定費用は，h_[[?]_]_=1となる．規則(e)については，不活性弧Vまでの推定費用は，h_=h_+w_g_+C_=2，不活性弧AVまでの推定費用はh_=h_=0となる．不活性弧Vについて，規則(d)から得られた値6と規則(e)から得られた値2のうち小さいほうの後者がその推定費用となる．ステップでは，不活性弧Aについて，今，規則(d)から得られた値0は，二回目のループで規則(b)から得られた値6より小さいので，推定費用は0となる．以下，同様に処理が進むと，表に示す推定費用が最終的に得られる．</section>
  <section title="解析例">図の構文規則と表の推定費用を用いて`failingstudentlookedhard'を解析する過程を追う．解析アルゴリズムは，節で述べた改良を加えていない図の基本的なものを用いることにする．表は，この例文に対して全解探索を行なった場合に得られるチャートである．図のアルゴリズムによる解析で，費用の最も小さい目標弧が得られるまでのアジェンダの変化の様子を表に示す．表の各行は，解析のある時点でのアジェンダの内容を表す．アジェンダの要素は，弧と全推定費用(f=g+h)の対であり，fの昇順に左から右へ並んでいる．表の最左要素がアジェンダの先頭要素である．アジェンダは，図の解析アルゴリズムにおける第k回目のループでの処理で，第k行目から第k+1行目へ変化する．以後，第k行目のアジェンダをアジェンダkと呼ぶ．弧は，表の#欄の番号で表される．例えば，アジェンダ1の第一要素1:#4は，表の四行目の全推定費用が1である弧hardを指す．まず，アジェンダ1から先頭要素1:#4を取り出し，不活性弧#4に予測手続きを適用して得られた弧#9と#10をアジェンダに加え，fの昇順に並べると，アジェンダ2へ変化する．アジェンダ2の先頭要素の不活性弧#10は，それに対して適用できる構文規則が存在しないので，アジェンダ3へ変化する．アジェンダ3，4，5，6，7の先頭要素は不活性弧であるので，これらに予測手続きを適用して得られた弧を加え，fの昇順に並べると，それぞれ，アジェンダ4，5，6，7，8となる．アジェンダ8の先頭要素である弧#15は活性弧であるので，#15と不活性弧#10に結合手続きを適用して得られた弧#19をアジェンダに加え，fの昇順に並べると，アジェンダ9へ変化する．以下，同様に処理を進め，アジェンダ15から先頭要素7:#23を取り出すと，弧#23は目標弧であるので，費用の最も小さい目標弧を発見したことになり，解析を中断する．もし費用が二番目に小さい目標弧が必要ならば，アジェンダ16から処理を再開すればよい．以上の解析過程の追跡からわかるように，弧#13，#17，#18，#21，#22，#24，#25を生成せずに，また，弧#6，#11，#14に対して手続きを適用せずに，生成費用の最も小さい目標弧が得られる．</section>
  <section title="関連研究との比較">KGW+pは，拘束規則に基づいてすべての可能な部分構造を生成する機構と，優先規則に基づいて構造の良さを比較し，それらの間に有意な差が生じたときに，一部の構造を選択する機構から構成されている．KGW+pでは，解析のある時点で優先されなかった部分構造が選択されるのは，優先された部分構造を構成要素とする構造が生成できなかった場合に限られており，局所的な選択の積み重ねで解析を進める一種のビーム探索が行なわれている．このため，生成された全体構造が可能な構造のうち最も適切なものであることが保証されない．これに対し，本手法では保証される．シフト／レデュース法において，1)シフト操作とレデュース操作の適用に競合が生じた場合には，シフト操作を優先させ，2)レデュース操作同士の競合が生じた場合には，右辺がより長い構文規則の適用を優先させる，という二つのメタレベルの優先方略に従い，右連合(rightassociation)や最小付加(minimalattachment)などの英語における選好を反映した構造を生成する手法が提案されている．また，日本語文の構文的特徴が左枝分かれ構造であることに着目し，これを反映する構造を最初に生成するために，上記の優先方略を変更した手法も示されている．これらの手法では，優先方略が探索機構の中に組み込まれているため，右連合や最小付加，左枝分かれ構造以外の構造を優先する必要が生じた場合，探索機構自体を変更しなければならない．これに対し，本手法では，探索機構と規則記述の枠組みが分離されているので，探索機構には手を加えずに，構文規則の適用費用を修正するだけで，優先すべき構造を柔軟に変更できる．例えば，名詞句の左枝分かれ構造を優先したい場合，本手法では，構文規則/1/2,1を用いればよい．この規則に従って生成される不活性弧を図に示す．括弧内の数値が生成費用である．逆に，右枝分かれ構造を優先したい場合は，右辺の第一項と第二項の重みを入れ換えればよい．また，本手法では，優先すべき構造をメタレベルの優先方略に従って選択する手法と異なり，個々の規則に付与された費用に基づいて選択するので，優先すべき構造をきめ細かく指定できる．PAMPSは，構文規則に付与された費用に基づいて，優先すべき構造を選択する枠組みとなっている点では，本手法と同じである．しかし，本手法と異なり，部分構造から全体構造を得るまでの費用の推定が行なわれていないので，解析過程で生成される部分構造の数は，本手法で生成される数よりも多くなる可能性が高い．確率付き構文規則は，文脈自由文法形式の規則に0&lt;p_1なる実数を規則の適用確率として付与したものである．ただし，左辺の構文範疇が同じである各規則の適用確率の和は1でなければならない．確率付き規則を用いた構文解析では，構文構造にはその構造の生成に関与した規則の適用確率の積が付与される．確率付き規則_1_m,p_は，適用確率p_をその逆数の対数1p_に置き換えれば，費用付き規則とみなせ，本稿の構文解析手法を適用することができる．しかし，その逆の費用付き規則から確率付き規則への変換を行なうことはできない．確率付き規則では，左辺の構文範疇が異なる規則の間での競合が記述できないからである．例えば，図の構文規則において，規則(f)を(h)より優先させたい場合，費用付き規則では，(f')~/1,1と(h')~/1,2とすればよいが，確率付き規則では，規則の適用確率p_は0&lt;p_1なる実数であり，左辺の構文範疇が同じである各規則の適用確率の和は1でなければならないので，規則(h)の適用確率よりも大きな値を規則(f)に付与することはできない．従って，費用付き構文規則のほうが記述力の点で優れている．これまでに，不適格文を処理するための種々の手法が提案されている．ここでは，本手法が，語句の欠落や語順の誤りなどを含む構文的不適格文を効率良く処理できることを示す．これまでに提案されている手法の多くは，適格文用の構文規則を用いて解析を行なう機構と，この機構による通常の解析が失敗した時点で起動される不適格文を処理するための別の機構を備えている．これに対し，本手法を用いれば，Fassらの手法と同じく，適格文と不適格文を区別せずに，両者の処理を統一的な枠組みで行なうことができる．すなわち，不適格文用の構文規則を，適格文用の規則と同じように記述し，前者の適用費用を後者のものよりも高く設定しておく．一般に，適格文と不適格文を区別しないように構文規則を拡張すると，適格文を解析する際に生成される部分構造の数が多くなり，効率が悪くなるという問題が生じる．しかし，本手法では，適用費用が高い不適格文用の規則は，適格文用の規則の適用が失敗した場合にのみ適用される可能性が高いので，効率が悪化する恐れは少ないと考えられる．</section>
  <section title="おわりに">本稿では，可能な構文構造に優劣を付け，適切な構造から順に必要なだけ生成する構文解析手法を示した．本手法は次のような特徴を持っている．部分構造の共有と統合を行ない，重複処理を避ける．^*法の最適性条件を満たすよう推定費用を計算し，可能な構造のうち費用の最も小さい全体構造を効率良く生成する．優先すべき構造をきめ細かく指定でき，その変更も容易に行なえる規則記述の枠組みを提供する．自然言語処理システムは，最終的には，可能な解釈の中からシステム全体で最も適切な解釈を一つ選び出さなければならない．そのような解釈は，より適切な構造から得られると考えられるので，構文解析以降の処理からの要請があるまで，適切でない構造の生成を保留する本手法は，システム全体としての効率の向上に寄与する．本手法では，現在のところ，入力文とは独立に構文規則だけに基づいて費用の推定を行なっている．この方法では，推定を，文が入力される度に行なう必要はなく，費用付き構文規則に変更がない限り一度だけ行なっておけばよい．しかし，費用推定の精度をさらに高めるためには，入力文を参照しながら推定を行なわなければならない．これは今後の課題である．もう一つの課題は，人間が見て最も適切な構文構造を最初に生成できるように，構文規則に費用を付与することである．節で述べたように，費用付き構文規則は確率文脈自由文法規則の拡張とみなせるので，確率文脈自由文法規則のパラメータ学習法として知られているInside-Outsideアルゴリズムなどを利用することで，この課題には対処できる．しかし，最終的には，学習したパラメータを人手で調整しなければならず，そのための実験が必要になろう．本手法は，最適な費用付き構文規則を記述するための実験環境を文法記述者に提供する．document</section>
</root>
