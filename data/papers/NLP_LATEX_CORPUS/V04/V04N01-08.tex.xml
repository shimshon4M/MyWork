<?xml version="1.0" ?>
<root>
  <title>括弧付きコーパスからの日本語確率文脈自由文法の自動抽出</title>
  <author>白井清昭徳永健伸田中穂積</author>
  <jabstract>本論文では，括弧付きコーパスから確率文脈自由文法を効率良く自動的に抽出する方法を提案する．文法規則の抽出は，日本語の主辞が句の一番最後の要素であるという特徴を利用して，括弧付けによる構文構造の内部ノードに適切な非終端記号を与えることによって行う．また，文法規則の確率は規則のコーパスにおける出現頻度から推定する．さらに，文法サイズの縮小と解析木数の抑制という2つの観点から，抽出した文法を改良するいくつかの方法を提案する．文法サイズの縮小は，文法に含まれる冗長な規則を自動的に削除することによって行う．解析木数の抑制は，(1)同一品詞列に対して右下がりの二分木のみを生成し，(2)``記号''と``助詞''の2つの品詞を細分化し，(3)法や様態を表わす助動詞に対する構造を統一することにより行う．最後に，本手法の評価実験を行った．約180,000の日本語文から確率文脈自由文法の抽出およびその改良を行ったところ，2,219の文法規則を抽出することができた．抽出された文法を用いて20,000文のテスト例文を統語解析したところ，受理率が約92%となり，適用範囲の広い文法が得られたことを確認した．また，生成確率の上位30位の解析木の評価を行ったところ，括弧付けの再現率が約62%，括弧付けの適合率が約74%，文の正解率が約29%という結果が得られた．</jabstract>
  <jkeywords>コーパス，日本語，確率文脈自由文法</jkeywords>
  <section title="序論">近年，機械可読な言語データの整備が進んだことや，計算機能力の向上により大規模な言語データの取り扱いが可能になったことから，自然言語処理に用いる様々な知識を言語データから自動的に獲得する研究が盛んに行われている．大量の言語データから自動的に獲得した知識は，人手によって得られる知識と比べて，獲得した知識が人間の主観に影響されにくい，知識作成のためのコストが低い，知識の適用範囲が広い，知識に何らかの統計情報を容易に組み込むことができる，といった優れた特徴を持っている．言語データから自動獲得される自然言語処理用知識には様々なものがあるが，その中の1つとして文法がある．文法には様々なクラスがあるが，統語解析の際に最もよく用いられるのは文脈自由文法(ContextFreeGrammar，以下CFGと呼ぶ)であり，一般化LR法，チャート法などのCFGを用いた効率の良い解析手法がいくつも提案されている．ところが，人手によってCFGを作成する場合，作成の際に考慮されなかった言語現象については，それに対応する規則がCFGに含まれていないために解析することができない．これに対して，コーパスから自動的にCFGを抽出することができれば，コーパス内に現れる多様な言語現象を網羅できるだけでなく，人的負担も極めて軽くなる．また，CFGの拡張の1つとして，文法規則に確率を付与した確率文脈自由文法(ProbabilisticContextFreeGrammar，以下PCFGと呼ぶ)がある．PCFGは，生成する複数の解析結果の候補(解析木)に対して，生成確率による順序付けを行うことができるという点でCFGよりも優れている．そこで本論文では，CFGをコーパスから自動抽出し，その後各規則の確率をコーパスから学習することにより最終的にPCFGを獲得する手法を提案する．CFGまたはPCFGをコーパスから自動獲得する研究は過去にもいくつか行われている．文法獲得に利用されるコーパスとしては，例文に対して何の情報も付加されていない平文コーパス，各形態素に品詞が割り当てられたタグ付きコーパス，内部ノードにラベルのない構文木が与えられた括弧付きコーパス，内部ノードのラベルまで与えられた構文木付きコーパスなど，様々なものがある．以下ではまず，文法獲得に関する過去の研究が，どのような種類のコーパスからどのような手法を用いて行われているのかについて簡単に概観する．平文コーパスからの文法規則獲得に関する研究としては清野と辻井によるものがある~．彼らの方法は，まずコーパスの文を初期のCFGを用いて統語解析し，解析に失敗した際に生成された部分木から，解析に失敗した文の統語解析を成功させるために必要な規則(彼らは仮説と呼んでいる)を見つけ出す．次に，その仮説がコーパスの文の解析を成功させるのにどの程度必要なのかを表わす尤度(Plausibility)を計算し，高い尤度を持つ仮説を新たな規則として文法に加える．彼らは全ての文法規則を獲得することを目的としているわけではなく，最初からある程度正しいCFGを用意し，それを新たな領域に適用する際にその領域に固有の言語現象を取り扱うために必要な規則を自動的に獲得することを目的としている．タグ付きコーパスからCFGを獲得する研究としては森と長尾によるものがある~．彼らは，前後に現われる品詞に無関係に出現する品詞列を独立度の高い品詞列と定義し，コーパスに現われる品詞列の独立度をn-gram統計により評価する．次に，ある一定の閾値以上の独立度を持つ品詞列を規則の右辺として取り出す．また，取り出された品詞列の集合に対して，その前後に現われる品詞の分布傾向を利用してクラスタリングを行い，同一クラスタと判断された品詞列を右辺とする規則の左辺に同一の非終端記号を与える．そして，得られた規則のクラスタの中からコーパス中に最もよく現れるものを選び，それらをCFG規則として採用すると同時に，コーパス中に現われる規則の右辺の品詞列を左辺の非終端記号に置き換える．このような操作を繰り返すことにより，最終的なCFGを獲得すると同時に，コーパスの各例文に構文木を付加することができる．括弧付きコーパスからCFGを獲得する研究としては，まずInside-Outsideアルゴリズムを利用したものが挙げられる．LariとYoungは，与えられた終端記号と非終端記号の集合からそれらを組み合わせてできる全てのチョムスキー標準形のCFG規則を作り，それらの確率をInside-Outsideアルゴリズムによって学習し，確率の低い規則を削除することにより新たなPCFGを獲得する方法を提案した~．この方法では収束性の悪さや計算量の多さが問題となっていたが，この問題を解決するために，PereiraらやSchabesらはInside-Outsideアルゴリズムを部分的に括弧付けされたコーパスに対して適用する方法を提案している~．しかしながら，局所解は得られるが最適解が得られる保証はない，得られる文法がチョムスキー標準形に限られるなどの問題点も残されている．一方，括弧付きコーパスから日本語のCFGを獲得する研究としては横田らのものがある．彼らは，Shift-Reduceパーザによる訓練コーパスの例文の統語解析が最も効率良くなるように，コーパスの内部ノードに人工的な非終端記号を割り当てることによりCFGを獲得する方法を提案している．これは組み合わせ最適化問題となり，SimulatedAnnealing法を用いることにより解決を求めている．1000〜7500例文からCFGを獲得し，それを用いた統語解析では15〜47%の正解率が得られたと報告している．この方法では，CFG獲得の際に統計情報のみを利用し，言語的な知識は用いていない．しかしながら，利用できる言語学的な知識はむしろ積極的に利用した方が，文法を効率良く獲得できると考えられる．構文木付きコーパスから文法を獲得する研究としてはSekineとGrishmanによるものがある~．彼らは，PennTreeBank~の中からSまたはNPを根ノードとする部分木を自動的に抽出する．解析の際には，得られた部分木をSまたはNPを左辺とし部分木の葉の列を右辺としたCFG規則に変換し，通常のチャート法により統語解析してから，解析の際に使用した規則を元の部分木に復元する．得られた解析木にはPCFGと同様の生成確率が与えられるが，この際部分木を構成要素としているため若干の文脈依存性を取り扱うことができる．しかしながら，SまたはNPがある記号列に展開されるときの構造としては1種類の部分木しか記述できず，ここでの曖昧性を取り扱うことができないといった問題点がある．また，構文木付きコーパスにおいては，例文に付加された構文木の内部ノードにラベル(非終端記号)が割り当てられているため，通常のCFGならば構文木の枝分れをCFG規則とみなすことにより容易に獲得することができる．大量のコーパスからPCFGを獲得するには，それに要する計算量が少ないことが望ましい．ところが，統語構造情報が明示されていない平文コーパスやタグ付きコーパスを用いる研究においては，それらの推測に要する計算コストが大きいといった問題がある．近年では，日本においてもEDRコーパス~といった大規模な括弧付きコーパスの整備が進んでおり，効率良くCFGを獲得するためにはそのような括弧付きコーパスの統語構造情報を利用することが考えられる．一方，括弧付きコーパスを用いる研究においては，平文コーパスやタグ付きコーパスと比べて統語構造の情報が利用できるとはいえ，反復アルゴリズムを用いているために文法獲得に要する計算量は多い．本論文では，括弧付きコーパスとしてEDRコーパスを利用し，日本語の言語的特徴を考慮した効率の良いPCFG抽出方法を提案する~．本論文の構成は以下の通りである．2節では，括弧付きコーパスからPCFGを抽出する具体的な手法について説明する．3節では，抽出した文法を改良する方法について説明する．文法の改良とは，具体的には文法サイズを縮小することと，文法が生成する解析木の数を抑制することを指す．4節では，実際に括弧付きコーパスからPCFGを抽出し，それを用いて統語解析を行う実験について述べる．最後に5節では，この論文のまとめと今後の課題について述べる．</section>
  <section title="括弧付きコーパスからの文法抽出"/>
  <subsection title="EDRコーパスの概要">本論文では，言語データとしてEDR日本語コーパスを使用する．EDRコーパスに収録されている例文数は207,802である．それぞれの文には補助情報として形態素情報，構文情報，意味情報が付加されている．本論文では形態素情報(特に品詞情報)と括弧付けによる構文構造を利用する．EDRコーパスの例文，及びそれに付加された形態素情報・括弧付けによる構文構造の例を図に示す．EDRコーパスで使われている品詞は以下に挙げる15種類であり，比較的粗い品詞体系になっている．ここで注意しなければならないのは，``動詞''という品詞は動詞語幹に対して割り当てられ，語尾には``語尾''という品詞が割り当てられている点である．同様に，``形容詞''，``形容動詞''，``助動詞''という品詞は，それぞれ形容詞語幹，形容動詞語幹，助動詞語幹に割り当てられている．</subsection>
  <subsection title="ノードへの非終端記号の付与">図は図のような書き換え規則の集合とみなすことができる．図のような構文構造の各ノードに対して適切なラベル(非終端記号)を割り当てることができれば，図の規則はCFG規則となる．このように，括弧付けによる構文構造の内部ノードに適切なラベルを与えることは括弧付きコーパスからCFGを抽出することと等価である．そこで，節では構文構造の内部ノードに与えるラベルを決定する方法について考える．</subsection>
  <subsection title="ラベルの決定方法">日本語の特徴として，前の要素が後ろの要素を修飾する，すなわち句の主辞はその句における一番最後の要素であるということが知られている．例えば，図の中のという規則について考えよう．[接頭語名詞]という句の主辞は句の一番最後にある``名詞''であると考えられる．そこで，この主辞``名詞''に``句''をつけたラベル``名詞句''を左辺のノード12に与えることにする．同様に，という規則が存在すると仮定し，ラベルの決定されていないノードXに非終端記号を与える場合を考える．この時，[形容詞句名詞句]という句全体の主辞もまた句の最後にある``名詞句''であると考えられる．先ほどと異なるのは主辞となる記号が非終端記号であるという点である．このような場合には，右再帰を用いて左辺ノードXにも主辞と同じ``名詞句''というラベルを与える．しかしながら，このようなラベルの与え方が常に適切であるわけではない．主辞にならない品詞例えば，という規則について考える．[接続詞記号]という句の1番最後にある品詞は``記号''であるが，この句の主辞は``記号''ではなく``接続詞''である．したがって，左辺のノードXに与えるラベルも``記号句''ではなく``接続詞句''とすべきである．このように，``記号''は主辞にはならない品詞であるとみなし，句の一番最後にある要素が``記号''である場合には，その左隣にある要素を主辞とみなす．``語尾''と``助動詞''の取り扱い図の中のという規則について考える．今までのやり方では，[動詞語尾]という句の1番最後にある品詞は``語尾''であるので，左辺のノード13に与えるラベルは``語尾句''となる．ところが，節で述べたように，EDRコーパスにおいては，``語尾''という品詞は動詞の語尾にだけではなく形容詞・形容動詞・助動詞の語尾にも割り当てられている．したがって，このようなラベルの付け方では，といった規則の左辺にも``語尾句''というラベルを与えることになる．この場合，``語尾句''というラベルを割り当てられたノードが``動詞''，``形容詞''，``形容動詞''，``助動詞''のどれを含んでいるのかを識別することができない．同様に，規則の右辺の一番最後にある要素が``助動詞''のときも，左辺に``助動詞句''というラベルを与えるのは好ましいことではない．このような理由から，句の一番最後にある要素が品詞``語尾''または``助動詞''である場合には，その左隣にある要素から左辺に与える非終端記号を導出する．主辞が``助詞''の場合左辺に``助詞句''というラベルを与えることも考えられるが，わかりやすさのため``後置詞句''というラベルを与える．主辞が``接尾語''の場合EDRコーパスにおいては，品詞が``接尾語''となる形態素は「月」，「日」，「メートル」など単位を表しているものが多く，他にも「区」，「氏」など全体として名詞句を形成するものがほとんどである．そこで，主辞が``接尾語''のときには左辺ノードに``名詞句''というラベルを与える．以上のようないくつかの例外処理が必要ではあるが，基本的には句の一番最後にある要素を主辞とみなして，それから左辺ノードに与えるラベルを決定することにする．本節で提案した括弧付きコーパスから文法を抽出するアルゴリズムを以下にまとめる．*2mm【文法抽出アルゴリズム】*-3mmflushleft構文構造の中で，まだラベルが割り当てられていなくて，かつその子ノードには全てラベルが割り当てられているノードを見つける．そのようなノードがなければ(3)へ．(1)で見つけたノードが構文構造のルートである場合には，そのノードのラベルを開始記号Sとする．それ以外は【ラベル決定アルゴリズム】(後述)を用いてノードに与えるラベルを決定する．(1)へ戻る．構文構造の全ての内部ノードにはラベルが与えられているはずなので，それをという形に分解しCFG規則とする．*2mm【ラベル決定アルゴリズム】*-3mmflushleft``記号'',``語尾'',``助動詞''以外の要素で子ノードの列の最も右側にあるものを選び，それをXとする．Xが``助詞''の場合，左辺ノードに``後置詞句''というラベルを与える．Xが``接尾語''の場合，左辺ノードに``名詞句''というラベルを与える．Xが``助詞''，``接尾語''以外の品詞の場合，左辺ノードに``X句''というラベルを与える．例えば主辞が``名詞''の場合，``名詞句''というラベルを与える．Xが非終端記号の場合，左辺ノードにも同じXというラベルを与える．例えば主辞が``名詞句''の場合，左辺ノードにも同じ``名詞句''というラベルを与える．上記の方法によって図の内部ノードにラベルを与えて抽出された文法規則を図に示す．この操作をコーパスの全ての構文構造に対して行うことによりCFGを抽出することができる．次に，本手法の文法抽出に要する計算量について考察する．【文法抽出アルゴリズム】は，「句の主辞はその句における一番最後の要素である」という日本語の言語学的特徴を利用して括弧付けによる構文構造の内部ノードに非終端記号を与えているため，文法抽出に必要な計算量はコーパスの構文構造の内部ノード数に比例する．また，長さnの文があったとき，それに対する最も内部ノード数の多い構文構造は完全な二分木であり，そのときの内部ノード数はn-1である．したがって，文法抽出に必要な計算量は入力文の長さnにも比例する．このことは大規模なコーパスからの文法抽出を可能にしている．これに対し，本研究と同じく括弧付きコーパスを用いてCFGを獲得するPereiraらの方法~では，Inside-Outsideアルゴリズムによる規則の推定に必要な計算量はO(n)であり，しかもこの作業を反復しなければならない．また，同じく括弧付きコーパスを利用した横田らの方法~では，内部ノードに与える非終端記号をランダムに変化させることを繰り返すSimulatedAnnealing法を用いてCFG規則を獲得しているため，内部ノードに決定的に非終端記号を与える本手法よりも多くの計算量を必要とするのは明らかである．</subsection>
  <subsection title="規則の確率の推定">前節で提案した方法により括弧付きコーパスから抽出したCFGに対して，各規則の確率を次のように推定した．*2mm【規則の確率の推定】*-3mmflushleftコーパスからCFG規則を抽出する際に，同じ規則を抽出した回数，すなわちその規則のコーパスにおける出現頻度を数える．規則r_iの出現頻度をC(r_i)とする．規則r_i;:;A_iの確率P(r_i)を次式により求める．すなわちP(r_i)は，r_iの出現頻度を，Aを左辺とする全ての規則の出現頻度の和で割った値とする．以上のように規則の確率を推定することにより，括弧付きコーパスからPCFGを抽出することができる．</subsection>
  <section title="文法の改良">サイズの小さなコーパスを用いて，前節で説明した方法によりPCFGを抽出する予備実験を行ったところ，以下のような問題点が明らかになった．文法のサイズが大きいEDRコーパスからランダムに選び出した3,000例文からPCFGを抽出したところ，文法規則の数は1,009となり，コーパスサイズに比べて非常に多くの文法規則が抽出されることがわかった．統語解析に要するコストを考えると，文法サイズが不必要に大きいことは望ましいことではない．生成される解析木の数が多い抽出したPCFGを用いてEDRコーパスからランダムに選び出した100例文を統語解析したところ，解析結果の候補として生成された解析木の数は平均1.510^6となり，非常に多くの解析木を生成することがわかった．また，メモリ不足によって解析に失敗した文は69文あった．統語解析を意味解析や文脈解析などの前処理と考えるなら，統語解析結果の候補の数はできるだけ少ないことが望まれる．本節ではこれらの問題への対応策について述べる．</section>
  <subsection title="文法サイズの縮小">ここでは，コーパスから抽出した文法のサイズを縮小する方法を提案する．文法サイズを縮小する方法としてまず考えられるのは，出現頻度の低い規則を削除することである．しかし，単純に出現頻度の低い規則を削除した場合，その規則がコーパスの構文構造作成時の誤りによって生じた不適切な規則であればよいが，稀にしか現われない言語現象に対応した規則である場合には，そのような規則を削除することにより文法の適用範囲(coverage)が狭くなる．両者を出現頻度のみで区別することは難しく，出現頻度が低いからといってその規則を削除することは必ずしも適切ではない．予備実験で抽出した文法を調べたところ，右辺長の長い規則が多く含まれていることがわかった．予備実験で抽出した文法規則の右辺長の分布を表に示す．右辺長の長い規則が多く含まれていることがわかる．そのような規則の一例を次に挙げる．これは，コーパスのある例文において，といった括弧付けがなされているためである．本来，その例文の構文構造を反映させるためにはもう少し細かい括弧付けが必要である．しかし，EDRコーパスの中には多くの要素を1つの括弧で括ってしまう例文も存在する．このような右辺の長い規則の存在が文法サイズを大きくしている原因の1つと考えられる．右辺の長い規則の場合，その規則を除去しても文法中の他の規則によって右辺の記号列を生成できる場合がある．例えば，文法中に次のような規則があったとする．これら4つの規則を用いれば，非終端記号``動詞句''から``動詞~語尾~名詞~助詞~形容動詞語尾~動詞~語尾''という記号列を生成することが可能である．このことを図式化したものを図に示す．このように，ある規則を文法から除去しても，他の規則によって右辺の記号列を生成できるような場合は文法の生成能力は変わらない．そこで，「冗長な規則」を次のように定義する．*は規則を1回以上適用することを示す．冗長な規則を削除する前の文法によって受理される文は，冗長な規則を削除した後の文法でも必ず受理される．したがって，冗長な規則を自動的に検出しそれを削除すれば，文法の適用範囲を狭めることなく文法サイズを縮小することができる．ここで問題となるのは，冗長な規則のコーパスにおける出現頻度をどのように取り扱うかということである．本論文では，式()に示した通り，規則の出現頻度を規則の確率の推定に用いている．そのため，冗長な規則を文法から削除する際に，その出現頻度をも破棄してしまうのは望ましいことではない．冗長な規則を削除するのは，その規則の右辺の記号列が他の規則によって生成できることが保証されているからである．したがって，削除された冗長な規則の出現頻度は，その規則の右辺の記号列を生成するのに必要な規則の出現頻度に加えるべきである．例えば図において，r_aの右辺の記号列はr_b,r_c1,r_c2,r_c3をそれぞれ1回ずつ適用することによって生成されるので，r_aを文法から除去する場合には，r_b,r_c1,r_c2,r_c3の出現頻度にr_aの出現頻度をそれぞれ加えるべきである．さらに，冗長な規則の右辺を生成する規則の組r_b,r_ci(図においてはr_b,r_c1,r_c2,r_c3)が複数ある場合には，冗長な規則r_aの出現頻度を，各組のr_bに該当する規則の出現頻度で比例配分してから各規則に足し合わせる．また，ある規則r_aが冗長であるかどうかを調べる際には右辺長の長い規則から順番に行い，r_b,r_ciが冗長であるかどうかについては考慮しない．そして，r_aが冗長であるとわかった際には，r_b,r_ciの規則の出現回数を更新してから次の規則が冗長であるかどうかを調べる．したがって，例えば図のr_c3が冗長な規則である場合でも，r_aの出現頻度はr_c3の出現頻度に一旦加えられた後，r_c3の右辺の記号列を生成する規則の出現頻度にも足し合わされる．本節で提案した冗長な規則を検出しそれを削除するアルゴリズムを以下にまとめる．*2mm【冗長規則削除アルゴリズム】*-3mmflushleftR,~R_new,~C(r),~C_new(r)を次のように定義する．R_newを空集合とする．Rの中から右辺長の一番長い規則r_aを1つ抜き出す．以下の条件を満たす規則の組r_b^j,r_c1^j,,r_cn^jを可能な限り見つける．この条件を図示すると図のようになる．但し，図において，A,;B_iN~，~~~_i,;_i(N+T)*である．(Nは非終端記号の集合，Tは終端記号の集合)※このような規則の組が1つも見つからなかった場合(j=0の場合)※このような規則の組が1つ以上見つかった場合(j&gt;=1の場合)Rが空なら終了．それ以外は(2)へ戻る．以上のように冗長な規則を削除することにより，文法の適用範囲を狭めることなく文法サイズを縮小することができる．この方法により文法サイズをどの程度縮小することができるのかについては第節の実験で評価する．</subsection>
  <subsection title="解析木数の抑制">ここでは，抽出した文法が生成する解析木の数を抑制するための3つの方法を提案する．</subsection>
  <subsubsection title="同一品詞列の取り扱い">統語解析を行う文の中に同じ品詞が複数並んだ句が存在する場合には，生成される解析木数が増大すると予想される．例えば，``名詞''が3つ並んで構成される句の構造としては，名詞間の修飾関係に応じて図に示す3つの構造が考えられる．ところが，これらの構造の中から正しいものを選択するためには何らかの意味的な情報が必要である．したがって，意味的な情報を用いない統語解析の段階では，これらの構造全てを解析結果の候補として生成する．一般に，生成される解析木の数は組合せ的に増大するため，同一品詞列に対して不必要な構造を無意味に生成することが解析木数を増大させる原因の1つとなっている．そこで統語解析の段階では，図のような構造を全て生成する代わりに，図のような右下がりの構造のみを出力することにし，この部分の係り受け解析については統語解析の後で行われる意味解析に任せることにした．また，他の非終端記号と区別するために，図の構造の内部ノードには``X列''(例えばXが``名詞''の場合は``名詞列'')というラベルを与えることにした．このように同一品詞列に対する構造を一意に決めれば解析結果として得られる解析木の数を減少させることができる．同一品詞列に対して図のような右下がりの構造のみを生成するために，節に述べた【文法抽出アルゴリズム】に，次の手続きを最初のステップとして追加する．【文法抽出アルゴリズム】*-3mmflushleft構文構造において一種類の品詞のみを支配するノードがあれば，そのノードの下の構造を図のような右下がりの構造に修正する．3.変更なし．また，【ラベル決定アルゴリズム】に次の手続きを追加する．【ラベル決定アルゴリズム】*-3mmflushleft子ノードが品詞``X''または非終端記号``X列''のみによって構成されている場合には，``Ｘ列''というラベルを与える．</subsubsection>
  <subsubsection title="品詞の細分化">節で述べたようにEDRコーパスで使われている品詞は15種類である．したがって，コーパスから抽出した文法に含まれる終端記号(品詞セット)の数も15であるが，これは統語解析を行うのに十分であるとは言えない。例えば，コーパスの中にという括弧付けが存在し，名詞並列を表わすCFG規則が抽出されたとする．ところが，この規則は``名詞助詞名詞''という品詞列に常に適用され，「地上/に/茅(を出す)」といった名詞並列でない入力に対しても，それが名詞並列であるといった解析結果を出力してしまう．これは全ての助詞に対して``助詞''という品詞を与えているためであり，並列助詞と他の助詞に異なる品詞を与えれば，このような誤った解析を回避することができる．そこで，EDRコーパスに用いられている品詞を細分化して生成される解析木の数を抑制することを試みた．ここでは``記号''と``助詞''の2つの品詞に着目する．品詞``記号''の細分化EDRコーパスにおいては，記号には全て``記号''という品詞が割り当てられている．しかし，読点は文の切れ目を，句点は文の終りを表す特別な記号であり，他の記号とは区別するべきである．そこで，形態素「、」と「，」には``読点''という品詞を与えることにした．また，EDRコーパス中の例文の文末に現れる形態素のほとんどは「。」,「．」,「？」,「！」のいずれかであり，しかもこれらは文末以外に現れることはほとんどなかった．そこで，形態素「。」,「．」,「？」,「！」には``文末記号''という品詞を与えることにした．また，これらの以外の形態素が文末に現れる文，及びこれらの形態素が文末以外の場所に現れる文，合計102文を例外としてコーパスから除去した．品詞``助詞''の細分化EDRコーパスにおいては，助詞には全て``助詞''という品詞が割り当てられているが，その助詞の持っている機能により``格助詞'',``係助詞''などの品詞を割り当てるべきである．しかしながら，助詞の中には2つ以上の機能を持っているものもあり，助詞の機能をその表層だけから判断することは一般に困難である．そこで，EDRコーパスにおいて``助詞''という品詞を割り当てられた形態素「Ｍ」については，その形態素毎に独自の品詞``助詞Ｍ''を割り当てることにした．例えば，形態素「は」が``助詞''という品詞を割り当てられていたならば，その品詞を``助詞は''に変更する．PCFGの抽出は，まずコーパスの品詞を上記のように細分化し，その後で節で提案した【文法抽出アルゴリズム】に従って行う．また，品詞の細分化に伴い節の【ラベル決定アルゴリズム】を以下のように変更する．下線を引いた部分が変更箇所である．*2mm【ラベル決定アルゴリズム】*-3mmflushleft``記号''，``語尾''，``助動詞''，``読点''，``文末記号''以外の要素で子ノードの列の最も右側にあるものを選び，それをXとする．Xが``助詞Ｍ''の場合，左辺ノードに``後置詞句''というラベルを与える．(以下同じ)</subsubsection>
  <subsubsection title="法・様相を表わす助動詞に対する構造の統一">文末に現われる助動詞は文全体の法や様態を表していることが多い．例えば，EDRコーパス中の2つの例文には「そう」と「だ」という2つの助動詞が含まれている．これらは文全体にそれぞれ伝聞，断定の意味合いを持たせる働きをしている．ところがEDRコーパスにおいては，このような助動詞は，文全体に付加している構造(図の(a))と，文末の最後の要素に付加している構造(図の(b))の2通りの構造で表されている．このような2種類の構文構造を含むコーパスから抽出された文法は，文末に助動詞を含む文に対して少なくとも図のような2つの構造を生成し，このことが解析木の数を増加させる一因となっている．そこで，助動詞が文全体に付加された図の(a)のような構造を，図の(b)のような構造に修正してから文法を抽出することにした．助動詞に対する構造を統一することにより，生成される解析木数の減少が期待できる．統一後の構造として図の(a)ではなく(b)を選択したのは，(a)のような構造からは解析木数を著しく増加させる文法規則が抽出されるからである．例えば，図の(a)のノード1,2,3,8,10,12には，節の【文法抽出アルゴリズム】に従って``動詞句''という非終端記号が割り当てられ，その結果次のような規則が抽出される．ところが，この規則により``助動詞''がノード8,10,12に付加される構造も生成されることになり，生成される解析木の数を増加させる要因の1つとなっている．これに対して，図の(b)のような構造からは上述のような文法規則は抽出されないため，無駄な解析木を生成することはない．</subsubsection>
  <section title="評価実験">本論文で提案した手法の評価実験を行った．まず，EDRコーパスの207,802例文のうち，約10分の1に相当する20,000例文をランダムに選んでテストデータとし，残りを訓練データとした．そして，訓練データからPCFGを抽出し，抽出したPCFGを用いてテストデータの例文を統語解析することにより，抽出したPCFGの品質を評価した．</section>
  <subsection title="文法抽出実験">文法抽出を以下の手順で行った．訓練データの例文の品詞を細分化した．(節)また，文末の助動詞に対する構造を統一した．(節)【文法抽出アルゴリズム】に従って訓練データからPCFGを抽出した．(節，節)【冗長規則削除アルゴリズム】に従って冗長な規則を削除した．(節)式()より各規則の確率を推定した．(節)コーパスから抽出したPCFGの概要を表に示す．G_1は上述の手続きによって訓練データから抽出されたPCFG，G_0は冗長規則を削除する前のPCFGである．冗長規則を削除したことにより文法サイズを約85%縮小することができた．</subsection>
  <subsection title="統語解析実験">得られたPCFGを用いてテストデータの例文の統語解析を行った．統語解析は一般化LR法~により行った．LRパーザをSunSparcStation10/51(主記憶64Mbyte)上に実装した．結果を表に示す．「受理」はパーザが解析に成功して1個以上の解析木を出力したことを，「不受理」は解析に失敗したことを，「メモリ不足」はメモリ不足のためにパーザが解析を中断したことを示す．全体の約36%に当たる7,319文がメモリ不足のために解析できなかった．そこで，これらの文については，生成確率の低い部分木を解析途中で破棄する枝刈りを行いながら再度統語解析を行った．その結果を表に示す．これにより，12,658+5,822=18,480文を受理することができた．受理した文の平均単語数は24.45単語であった．また，生成した解析木数の1文当たりの平均は3.2410^9であった．非常に多くの解析木が生成されているが，PCFGにより解析木の生成確率を計算し，その上位何位かを出力することによって解析結果の候補数を絞り込むことが可能である．まず，文法の適用範囲の広さを示す尺度として，受理率を次のように定義する．[受理率~=~受理した文の数統語解析した文の数]受理率は18480/20000~~0.924となり，適用範囲の広い文法が得られたことがわかる．また，受理しなかった1520文のうち935文(約61.5%)がメモリ不足によるものである．したがって，パーザの使用メモリを増やすことができれば受理率はさらに向上することが予想される．次に，パーザが出力した解析木の評価を行った．出力された解析木がどれだけ正しいかを評価するための尺度として，括弧付けの再現率，括弧付けの適合率，文の正解率をそれぞれ以下のように定義した．[括弧付けの再現率~=~正しい括弧付けの数コーパスの構文構造に含まれる括弧付けの数][括弧付けの適合率~=~矛盾しない括弧付けの数解析木に含まれる全ての括弧付けの数][文の正解率~=~出力した解析木の中に正しい解析木が含まれる文の数受理した文の数]ここで「正しい括弧付け」とは，コーパスに付加された構文構造の括弧付けと完全に一致している解析木中の括弧付けを表し，「矛盾しない括弧付け」とは，コーパスに付加された構文構造の全ての括弧付けと交差していない括弧付けを表す~．また「正しい解析木」とは，解析木中の全ての括弧付けが矛盾していない解析木を表す．解析木の評価方法としては，コーパスの各例文に付加された構文構造を正解とみなし，これと同じ構造を持つ解析木を正しい解析結果とする方法も考えられる．しかしながら，節で述べたように，EDRコーパスの括弧付けの中には多くの要素を1つの括弧で括ってしまうものも含まれている．これに対し，冗長な規則すなわち右辺長の比較的長い規則を削除したPCFGは，EDRコーパスに付加された括弧付けよりも細かく括弧付けする傾向を持っている．したがって，コーパスの構文構造と単純に比較して正しい解析結果か否かを判断するのは適切であるとは言えない．「括弧付けの適合率」及び「文の正解率」を計算する際に，コーパスに付加された構文構造と完全に一致していなくても，「矛盾しない括弧付け」及び「矛盾する括弧付けを含まない解析木」を正解としたのはこのためである．まず，生成確率が1位の解析木について，括弧付けの再現率，括弧付けの適合率，文の正解率の値を計算した．結果を表に示す．Schabesらは，英語の括弧付きコーパス(WallStreetJournalCorpus)からInside-Outsideアルゴリズムにより獲得した文法を用いた統語解析実験を行い，20〜30単語のテスト文に対して括弧付けの適合率が71.5%，文の正解率が6.8%であったと報告している．我々の実験の結果は，括弧付けの適合率ではSchabesらの結果に劣るが文の正解率では優っている．しかしながら，本研究とは使用しているコーパスや対象言語が異なるため，単純な比較はできない．表では，生成確率が1位の解析木についてのみ評価を行ったが，生成確率は統語的にみた解析木の尤もらしさを示しており，係り受け関係などの意味的な関係を考えた場合，生成確率の最も高い解析木が必ずしも正しい解析結果を表わしているわけではない．正しい解析結果を選択するのには何らかの意味解析が必要であるが，統語解析の結果出力される全ての解析結果の候補に対して意味解析を行うのは現実的ではない．統語解析を，意味解析を行う解析結果の候補の数を絞り込み，意味解析にかかる負担を軽減するための前処理と考えるなら，正解となる解析木の生成確率が1位とならなくても，生成確率の上位何位かに含まれていれば十分であろう．そこで，生成確率の上位k位の解析木を出力し，その中から矛盾する括弧付けの最も少ない解析木を選んで評価した．結果を表に示す．上位30位までの解析木を出力した場合，その中に正解となる解析木が含まれている文の割合は8.47%から29.06%に向上することがわかった．最後に，統語解析を行う文法のサイズを変化させ，受理率と正解率および生成される解析木数との相関を調べる実験を行った．まず，G_1の中からある一定の閾値P以下の確率を持つ文法を除去し，サイズの小さい文法G_2〜G_5を抽出した．次に，テストデータの中から枝刈りなしで受理した12,658文(表参照)をG_2〜G_5を用いて統語解析し，結果を比較した．テスト文をこのように限定したのは，パーザがメモリ不足によって統語解析を中断した場合には文法が生成する解析木の数を測定することができないからである．解析した文の平均単語数は19.01単語であった．実験結果を表に示す．メモリ不足によって解析に失敗した文はなかった．括弧付けの再現率，括弧付けの適合率，文の正解率は，生成確率の1位の解析木のみについて評価した．表により，文法サイズが小さくなるにつれて受理率が低下していることがわかる．また，受理率の低下に伴い平均解析木数も減少する傾向が見られる．これに対し，受理率が変化しても括弧付けの再現率，適合率，文の正解率はほとんど変化していない．このことから，受理率を向上させるために文法サイズを大きくして，その結果得られる解析木の数が増大しても，生成確率の上位の解析木のみを出力すれば正解率はほとんど変わらないということがいえる．</subsection>
  <section title="結論">本論文では，括弧付きコーパスから確率文脈自由文法(PCFG)を自動的に抽出する方法を提案した．PCFGの抽出は，日本語の主辞が句の一番最後の要素であるという特徴に着目し，括弧付けによる構文構造の内部ノードに適切な非終端記号を与えることによって行った．また，抽出した規則の確率はその規則のコーパスにおける出現回数から推定した．さらに，抽出したPCFGに対して2つの面から改良を加えた．1つは文法サイズの縮小，もう1つは生成される解析木数の抑制である．前者は冗長な規則を削除することにより行った．後者は同一品詞列に対する構造を右下がりの二分木のみに限定したこと，品詞を細分化したこと，文末の助動詞に対する構造を統一したことにより行った．最後に，提案した方法により抽出・改良されたPCFGを用いた統語解析実験を行ったところ受理率が約92%となった．また，生成確率の上位30個の解析木を出力した場合，文の正解率が約29%，括弧付けの再現率が約62%，括弧付けの適合率が約74%という結果が得られた．最後に本論文の今後の課題について述べる．コーパスから抽出したPCFGの問題点の1つは，節で生成される解析木の数を抑制したにも関わらず，依然として多くの解析木を生成することである．実験では，PCFGが出力する解析木数の1文当たりの平均は3.2410^9であった．生成確率の高い解析木のみを出力することにより解析結果の候補数を絞り込むことができるものの，文法が多くの解析木を生成するのは効率の面から見ても望ましいことではない．また，本論文では対象言語を日本語とし，句の主辞を特定する際に日本語の特性を考慮に入れているが，他の言語についても句の主辞を特定することができれば本手法をそのまま適用することができる．今後は，日本語以外の言語の文法を獲得することについても検討していきたい．document</section>
</root>
