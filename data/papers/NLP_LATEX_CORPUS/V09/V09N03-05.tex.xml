<?xml version="1.0" ?>
<root>
  <title>自動文節対応付けを用いた要約中の文再構成操作の調査</title>
  <author>竹内和広松本裕治</author>
  <jabstract>本研究では，要約文とその要約文を作成するために使用された表現を含む原文とを自動的に対応付ける手法を用いて，人間が要約文を作成する上で，要約元となった原文をどのように再構成するかを調査した．対応付けに用いた手法は，かかり受け構造の解析結果を利用し，要約文とその対応文との間の対応付けを文節単位で行う．また，要約文1文に対して，要約元文章中の複数文を対応付けすることを許して対応付けが可能である．調査した対象は，複数の作業者が新聞の社説を要約したデータである．このデータに対して，対応付け手法を実際に適用した．対応付けの結果，要約元文章で用いられていなかったり，元文章でかかり受け関係がなかった表現が要約文に用いられていた場合に，それらの表現を構成する文節は未対応となる．そこで，そのような要約文中で未対応になった文節がどのように生成されたかを，計算機でも処理可能な操作を主眼に分類・整理して考察した．その結果，要約原文のかかり受け構造は，要約文においても保存されることが多く，要約文に新しく出現する表現の多くは，複数の原文から１つの要約文を作成する文結合操作と，単文節を中心とした言い換え操作により生成されることがわかった．</jabstract>
  <jkeywords>自動要約，テキスト分析，言い換え，自動対応付け</jkeywords>
  <section title="はじめに">計算機による要約の試みでは，文章中の重要と思われる部分を抽出することを中心に研究されてきた．しかし，要約は人間の高度に知的な作業であるため，計算機により重要と認定された部分を列挙するだけではなく，要約文章の結束性，構成などの点で課題があることが認識されてきている．人間が作成するような要約は，結束性，構成などが適切で，要点を適正に網羅しているといった高度な要件を満たしていると考えられるが，このような要件を計算機で満たすためにはどのような要素技術が必要であるかが明らかになっているとはいえない．我々は，このような現状に対し，どのような要約文章なら読みやすく適切であるかを，人間が実際にどのような要約を作成するかを調査した上で，計算機でも実現が可能なレベルの要約操作に細分化し，整理することが必要であると考える．しかし，人間が行う要約の操作はそれほど単純ではなく，表層的な表現の言い換え，構文的言い換えといった様々なレベルの操作が考えられる．このような多様なレベルの言い換えを考慮した上で，要約文が生成される元になった文を，要約元文章から選びだす作業は，人手により対応づけするしかないようにもみえるが，人手による対応付けは，客観的な対応基準や作業コストの両面からみて問題がある．このような流れの中で，例えば，Marcuは論文とそのアブストラクトのように，要約とその元文章が組になっている文章集合から，要約の各文が要約元文章のどの文から生成されたかを，コサイン類似度を用いて自動的に対応付ける手法を提案している．また，日本語の自動要約の研究では加藤らがDPマッチングの手法を用いて，局所的な要約知識を自動的に抽出する研究を行っている．彼らの研究では，放送原稿とその要約を使用しているため，要約文書は元文原文の残存率が高く，語や文節レベルの言い換えといった局所的な要約知識の獲得に限定して効果をあげているが，人間が行う，より一般的な要約作成に必要な知識獲得を行うためには，その手法の拡張が必要となってくる．本研究では，このような背景から，要約元文章中における文の統語的な依存関係を手がかりに要約文との文・文節対応付けを行い，その結果に基づいて要約操作に関連する言い換え事例を収集し，要約で行われている文再構成操作がどのようなものであるかを調査した．</section>
  <section title="要約における文再構成操作"/>
  <subsection title="調査対象データの収集">人間が作成した要約を調査する対象データとして，毎日新聞社説90記事に対して要約したものを用いる．要約を行ったのは３人の作業者で，それぞれ90記事をすべて要約する．したがって，調査対象の要約は全部で270要約となる．要約の長さは文字数で元記事の約40％なるよう指定した．要約を行う際に作業者に与えた指示として，以下の2つの制約を課した．全体のあらすじと著者の主な主張がわかるように要約する固有名詞はできるだけ原文の表現を用いる要約率を40%と高率にした理由は，あまりにも文章を短く要約した場合に，元文章から残存する表層的な表現が少なくなってしまい，人間でさえ，元記事から要約文がどのように作成されたか，その操作が分析しにくくなってしまうと考えたからである．3人の要約作成者がそれぞれ90記事合計2869文から作成した要約の諸元を表に示す．なお，要約元記事の1記事平均の文数は31.9文である．</subsection>
  <subsection title="要約操作と対応付け">従来から，手作業により，要約文が元文章のどの部分を用いて作成されたかを対応付けを行い，要約がどのような作業であるかを調査した研究がある．例えば，佐久間らの研究では，そのような対応付けをもとに，人間が文章を要約する上で，元文章のテキスト構造がどのような影響を要約生成に与えたかを分析している．このような分析は，計算機に人間が作成するような要約を作成させるためにも重要であり，対応付けの自動化を行うことは，分析の効率化をする上でも意義がある．また，人間が作成した要約文と元文章を比べてみると，容易にその要約文が元文章のどの文から作られたかがわかる要約文とそうでないものがある．すなわち要約元文章で出現した表層的な表現が残存するか否かには，多様性が存在することを示している．邑本は，認知心理学的研究として，要約元文章中のほぼ短文に相当する単位（アイディアユニットと呼ぶ）がどのように要約中で表出されるかを観点に12種類に分類している．この分類は，人間が文章を理解し要約する過程において，その理解の仕方が要約操作における言い換えの多様性にも関係するというもので，非常に興味深いが，計算機処理を前提に要約文作成操作を考えた場合，すくなくとも以下の区別は重要である．要約元の文章で使われていた表現がそのまま要約で用いられる要約元の文章が使われていた表現が言い換えられ，要約で用いられるもちろん，人間が行っている要約操作はこのような二元論で片付く単純な問題ではなく，様々な人間の意味理解に基づいた深遠な問題ではあるが，元文章で使われていた表現が，どのような単位で要約に保存されるかだけを考えても，単語，文節，節，文といった多様なレベルがある．さらに，元文章で使われていた表現単位を言い換えて要約で用いるためには，それぞれの単位における特徴があるはずであり，計算機で多様な言い換えを実現する困難さを，段階的に解決してゆくためにも，それぞれの単位を言い換える・書き換える操作が行われた事例を収集し，それぞれの操作の特質を分析することが重要であると，我々は考える．</subsection>
  <subsection title="要約文を作成する操作">人間が要約文を作成する操作のうちもっとも単純な操作と考えられるのは，元文書の文をそのまま要約として用いるものであろう．しかし，調査したデータでは，このような元文書中の文と一字一句違わない形で要約で用いている例は,のべ2467文中692文しか存在せず，その残りである1775文の要約文は人間が何らかの文の再構成・生成操作を行って作成している．さらに品質のよい要約を作成するためには，このような要約文がどのように作成されているかを分析する必要がある．ここで，元文章の表層的情報がどのように残され，書き換えられているかの目安を調査にするために，客観的な指標のもとで要約元文と要約文の対応付けを行ってみた．客観的な指標として用いたのは，「元文の表層情報をより多く残している」という観点から，文中の名詞，動詞，形容詞といった内容語を用いて文を特徴づけるベクトルを作成し，そのベクトル間のコサイン類似度を用いた．類似度を求める文の組に現れるすべての内容語がj個存在するとして，それぞれの文の特徴ベクトルをs=s_1,s_2,,s_j,o=o_1,o_2,,o_jで表現したとき，コサイン類似度sim(s,o)は以下の式により定義される．なお，特徴ベクトルの各要素s_i,o_iは，当該の内容語がそれぞれの文にいくつ存在するかを示している．sim(s,o)=so|s||o|displaymathこの類似度を用いて，2文間の内容語が全て一致し，類似度が1.0となる文の組の数を調べると，742組であった．さきほどの，要約文とその対応文が全く同じ文である692組と比較すると，50組増えている．この50組を人手で分析してみたところ，以下の例のような形で，要約元文の文節が言い換えられ，要約文に用いられていた．もちろん，これらの文節数に変化がない要約の例は，ほとんど元文を書き換えていないため文節の書き換えの程度も少なかったといえるかもしれないが，文節内の書き換えの方向を知る上で重要な例である．要約で行われる操作は上のような単文節の言い換えに留まらない．対応付けの問題を難しくする他の要素としては，要約中の1文が要約元文章中の１文の表現だけを用いて要約文を作成するとは限らないことが挙げられる．例えば，Jingらの研究では，英語における要約の重要文抽出とその再構成操作を，計算機による実装を見通した諸操作として整理した．彼女らの研究では基本的な操作として，以下の２つの操作を挙げている．文短縮(SentenceReduction):元記事の１文を短くして要約中の1文で表す．文結合(SentenceCombination):元記事の複数文をまとめあげて要約中の１文で表すもちろん，この他にも，要約作成者が元文章を完全に理解した上で，元文章中には現れない新しい表現を作成することも当然考えられる．しかし，計算機による要約生成を考える上で，表層情報からわかるレベルの言い換えや文結合を組み合わせて作られた要約事例と，計算機では実現が難しいと思われる操作によって作成された事例とを分け，それぞれの事例がどの程度存在するかを知り，その操作の特質を調査することが必要となる．</subsection>
  <section title="かかり受け構造を用いた自動的対応付け">本研究では2節で述べたような現状を踏まえて，要約元文章中の文の構造と要約の文の構造を踏まえた対応付けを自動化することを考えた．その際の観点は以下の2つである．元文章に現れた表現がどの程度保持され，要約が作成されるか1つの要約文を作成するために1つだけの対応付け文を考慮すれば十分であるのか，元文章中で関連をもった複数の文を考慮することが必要であるか本稿では，このような観点から，文内の統語的構造を表現するかかり受け構造を考慮して文対応付けをとり，複数文との対応付けを考慮して，文対応付けを繰り返す対応付け戦略を考えた．対応付けのおおまかな処理の流れとしては，限定された文節の言い換えを考慮した文節一致の比較を行いつつ，要約とその元文章の間での文対応付けを行い，次に，文対応がとれた文対の中で文節の対応付けを行う．文節対応付けの結果，要約側で，対応が付かなかった文節は，まず，文節の言い換えであるかをかかり受け解析の位置情報を用いて自動的に確認し，それでも対応が付かない文節については，文対応された文内に対応付け候補のない文節と考え，元文章中の他の文にその文節を含む表現がないかを探すことを繰り返す．以降，対応付けの具体的な手順を順を追って説明する．</section>
  <subsection title="文対応付け">本稿が仮定する文対応付けは，文の構造を踏まえた対応付けである．文の構造の表現形態としては，かかり受け構造を採用した．かかり受け構造は，文中の各文節の修飾関係を木構造で表現したもので，関係付けの交差を許さない．ここで，かかり受け構造を解析した例は図に示し，図中の矢印が文節間の修飾関係となる．かかり構造は，文末の文節以外の各文節が1つのかかり先を持つため，木構造となる．ここで，文末の文節をこの木構造の「根」とみたて，どの文節の係り先になっていない文節を「葉」と呼ぶ．また，各文節を木構造中の「節点」と呼び，文節間のかかり受け関係を「枝」と呼ぶ．また，本稿では，この構造を利用して自動的に対応付けを行うため，かかり受け解析モジュールCaboChaを利用した．近年のかかり受け解析に関連する研究の進展により，かかり受け解析モジュールも実用に適用可能な精度を達成するようになっており，例えばCaboChaでは約90%の精度で解析が可能であると報告されている．かかり受け構造を利用した対応付けは，文章中で使用された表現の特定を，かかり受け構造上の文脈で制約することにより対応付けを精密化すると同時に次のような特性を持つ．例えば，「花を」と「彼女に」の出現順が異なっていても，以下の２文の組を考えてみたとき，(「花を」→「あげる」,「彼女に」→「あげる」)というかかり関係は保存されている．彼女に花をあげる．花を彼女にあげる．また，上の例に「なんとしてでも」といった文節が余分に挿入されてた次のような文の組についても，それぞれの文において，「花を」「彼女に」「あげる」の３文節の間のかかり受け関係は変わらない．彼女に，なんとしてでも，花をあげる．花を彼女にあげる．このように，２文の間で共通のかかり関係があることを対応付けの手がかりとして用いて，文対応を行う手法を考える．本手法での対応づけは，文のかかり受け構造における葉から根までのすべての経路をもとにする．例えば，図のようなかかり受け構造木から，抽出される経路の集合は[昨日の,会議は,すれ違った],[双方の,意見に,かみあわず,すれ違った],[利益が,かみあわず,すれ違った],[議論が,すれ違った]となる．このような経路の集合を要約文と，対応づけ候補文となる要約元文の各文それぞれに対してすべて抽出する．要約文sのかかり受け構造のもつ経路の集合をP_s，要約元文章中の各文のかかり受け構造の経路をすべて集めた集合をP_candとして，sに対応付けられる対応文aは，以下のように決定する．集合P_sの各経路と集合P_candの経路のすべての組合せに対して，DPマッチングを用いて，最長共通部分列(LongestCommonSubsequences，以下LCS)を求める．上で求めたLCSの集合の中で，最も長いLCSをもつ経路がある文を対応文aとする．経路間のLCSを求めるために利用したDPマッチングを説明する．今，経路[s_1,s_2,,s_m],[o_1,o_2,,o_n]のLCSを求める時，まず表のようなコスト表を作成する．経路中の各要素s_i,s_jはそれぞれ，かかり受け構造中のノード，すなわち文節に相当する．コスト表はc_1,1,c_1,2,,c_1,n,c_2,1,という順に算出し，表が完成した時点で，表を用いて表の(s_1,o_1)の点から(s_m,o_n)の点までの最短の経路を求める．表の各要素の値であるc_i,jは以下の式で求める．[c_i,j=min(c_i-1,j+1,c_i,j-1+1,c_i-1,j-1+x(i,j))][x(i,j)=		.]ここで，関数x(i,j)におけるs_iとo_jの比較は文節同士の比較である．この文節の一致については次3.2節で詳しく述べる．</subsection>
  <subsection title="DPマッチング中の文節の比較について">2.3節の予備的な考察に示したように，要約では文節レベルでの言い換えが頻繁に起こることが予想できる．かかり受け構造を利用して自動対応付けをする上で，文節の言い換えをある程度は考慮してやらなくてはならない．しかし，単文節のみの言い換えを考えただけでも，言い換えは多様であり，例えば，字面でよく似ていておおよその検討がつくものと，シソーラスなどの何らかの辞書を使わないと判断がつかないものなどは区別して扱うことが要約で行われている表現の多様性を見極める上で重要となる．本稿では以下のような，単純な，単文節書き換え規則のみを用意するにとどめ，その結果から，より高度な言い換え事例を収集し，要約で行われている操作の多様性について見通しをたてるという方針をとる．以下，対応付けを行う上で基礎となる，言い換えを考慮した文節の一致規則を説明する．この一致規則は，2.3節の分析に基づいていており，文節内の意味的主辞の品詞の下位分類まで含めた一致と原型の一致を文節の一致の基本とする．文節の接辞が格助詞の場合は，以下の例のように，格要素が主題表現になる場合と，その逆になる場合を書き換えとして認めた．用言を主辞とする文節については，助詞，助動詞，活用語尾などの文節末要素についてはゆるい制限で言い換えが可能であるとし，主辞の原型が同じであれば，同じ文節とした．意味的主辞の品詞の一致の例外としては，名詞に格助詞助詞がついていたものが，名詞だけになった場合，また，その逆の場合，下位分類までの一致とはせず，当該語の原型の完全一致をもって文節の一致とした．また，助詞を接辞とする文節で，複数の名詞から構成される複合名詞が短縮された文節などを考慮し，格助詞が一致しているときに限り，文節内の半数以上の名詞が同じ，もしくは文字ベースで半数以上の文字が一致をもって文節の一致とした．</subsection>
  <subsection title="文節間の対応づけ">要約文と対応文との間の各文節の対応付けを，3.1節で述べた方法により対応づけた情報を用いて行う．具体的には，文対応付けを行った際に利用した，要約文sと対応文aの，それぞれのかかり受け構造木の経路すべての組み合わせについて求めたLCSの集合を情報として用いる．ただし，文節対応に用いるのは，元文でなんらかの統語的関係にあったことを仮定しているので，LCSの長さが1のものは，このLCSの集合の中から除外した．具体例を示す．例えば，図の場合は，対応文のかかり受け構造における経路の集合は前節にも述べたように，[昨日の,会議は,すれ違った],[双方の,意見に,かみあわず,すれ違った],[利益が,かみあわず,すれ違った],[議論が,すれ違った]とである．これに対し，要約文のかかり受け構造における経路の集合は[会議は,すれ違った],[双方が,かみあわず,すれ違った],[いつまでも,すれ違った],[議論が,すれ違った]となる．この２つの経路集合の全て組み合わせのLCSのうちLCSの長さが2以上のものの集合は以下のようになる．[会議は,すれ違った],[かみあわず,すれ違った],[議論が,すれ違った]このLCSの集合に基づいて，要約文と対応文のそれぞれについて，この集合の各要素のLCSに含まれる文節，すなわち文節対応がついた文節を1，未対応の文節を0でマークしたものが，図での各文節の下につけられた0,1の数字である．以降本稿では，この対応・未対応を示した0,1の列を対応文および要約文の編集記号列と称す．</subsection>
  <subsection title="かかり受け構造を手がかりとする文節言い換えの自動同定">3.2節での文節の比較で述べたように，本稿の手法では，少数の単文節言い換え規則を用いて，確実に同じ文節だと思われる文節のみを文対応，文節対応の際に対応付ける．もちろん，要約で行われる言い換え操作は，3.2節の言い換え規則だけで記述できるものではないことが予想できるため，さらに複雑な要約操作を知る足がかりとして，かかり受け情報を利用して確実に単文節の言い換えだと推定できる事例を，文節対応付けがとれているものと仮定し，このような言い換え事例を自動的に収集しておく．確実な単文節の言い換えと仮定するのは，3.3節の文節対応付けが終わった時点で，要約文，対応文中の未対応の文節が，それぞれのかかり受け構造の中で図の２つのパターンにある場合である．図中の四角は単文節を示し，斜線で塗りつぶされた四角は既に文節対応付けがなされている文節である．以下それぞれのパターンの未対応文節と対応文節との位置関係についての説明である．未対応の1文節が，2つ以上の対応済み文節のかかり先になっている．（図中パターンAに相当）未対応の1文節のかかり先と，その未対応の文節を元文中で直接係り先にしている1つ以上の文節すべてが対応済みである．（図中パターンBに相当）このようなかかり受け構造の位置に未対応の単文節がある場合に，その未対応の単文節を，単文節の言い換えとみなして，3.5節の処理に移る．自動的に同定するこのような言い換えと仮定する文節は，要約で行われるより複雑な言い換えを調査する手がかりとして利用する．その結果については，4.3節にて述べる．</subsection>
  <subsection title="文結合操作の同定">2.3節で述べたように，要約文は常に，要約元文章中の文と1対1で対応付けられるとは限らない．そこで，本対応付け手法は，要約文に1文に対し，複数の要約元文が対応付けられる文結合操作を考慮するため，3.1節から3.4節までの一連の対応付け処理により未対応の文節列が，要約文中に残っている場合，図のように，その未対応の文節列に対応する文を3.1節から3.4節までの一連の処理を繰り返すことにより対応する．この際，対応付け繰り返し条件は，2文節以上の未対応文節列とした．例えば，第一回目の対応付け試行により，以下のような要約文と対応文の組が得られた場合を考える．この例の場合，第1回目の対応付け後の要約文の編集記号列は'111000'である．ここで，図の手順にあるように，2つ以上の連続する未対応文節が文末にあるため，次の繰り返し処理で，文節列[入れるなど,積極的対応を,求めたい．]に対して，3.1節から3.4節までの一連の処理を適用する．元文章中に，例えば，といった文ががあれば，この未対応文節に対して，この文が対応付けられ，結果的には元の要約文に対して以下の2つの文が対応付けられ，要約文に対しての編集記号列は'111011'となり，対応付けの繰り返しは終了する．このように，要約文の編集記号列における長さ2以上の未対応文節列'0'の列がなくなるか，そのような未対応文節列に対して，元文章中のかかり関係をもった文節を対応付けられなくなるまで対応付け作業を繰り返す．</subsection>
  <section title="対応付け手法の適用と要約操作"/>
  <subsection title="元文のかかり受け構造を保存してつくられた要約文数">要約の全2467文に対して，3節で述べた自動対応付けを繰り返し適用し，対応付けが出来なくなるなるまで繰り返した結果を表に示す．表中の各回の試行で対応付けられた文数は，当該回の試行以降で対応付けが出来なくなった文数を示す．また，当該の試行で対応付けができなかった文節の数を，未対応文節がない場合，未対応文節が文中の文節の半分より少ない場合，文中の文節の半分以上が未対応の場合の３つに場合分けし，それぞれの内訳数を示した．なお，第1回ですべての文節が対応付け可能だった990文は，元文章中の文をそのまま要約でも用いていた672文を含んでいる．この表の結果から，対応付けの繰り返しは5回で終了し，大部分の要約文は3回までで対応付けが終わることが分かる．また，要約文中に文節対応づけが出来ない文節が残る要約文のうち，文中の半分以上の文節が未対応になる文は235文である．表から，文中の半分より少ない文節が未対応になっている文は978文であるので，本手法の対応付けで文節対応付けで未対応文節が残る文であってもその81%は未対応文節は文中の文節の半分以下である．すなわち，すべての文節が対応づけられる数を含めると，今回収集した要約のほとんどの文が，要約の元になった文の係り関係を保存して生成されていることがわかる．なお，2467要約文中，本手法で対応付けできなかった95例は49例が元文章中の単語レベルのみ，もしくは1文節のみが使われて作成されていた要約文であり，46例が，元文章中の2以上の文節を用いてはいるものの，元文で使われていたかかり関係がない例である．このような例は，要約者が，要約文全体の要旨を一言でまとめたり，その要旨に対しての主観的な読み手の位置づけや，背景情報を与えるものであった．つまり，計算機で要約生成を考える上では，現段階では実現が非常に難しいものであり，元文章中の文の再構成に基づいて要約生成を考える立場では，現状において扱いを留保する．以下，本稿の残りでは，対応付けにおいて未対応となった文節が，要約作業者によって全く新しく作成されたのかどうかを，文結合，言い換えの２つの側面から議論する．</subsection>
  <subsection title="文結合について">本研究での対応付け手法は，文結合操作を考慮するため，要約１文に対し要約文書中の複数の文を対応付けることを許して対応付けを行った．そこで，この文結合の諸相を調査するため，まず，表の，未対応文節が全くなく2文以上が対応付けられた対応付け試行回2,3,4回(対応付けられた要約文の数はそれぞれ表から141,25,3文）の169文の要約文における文結合の形を比較のための基準例として分類した．この169文の要約文中の文結合部分は232箇所であった．結合部分は，１つで2つの文を結合しているため，この169文はおおよそ464文，すなわち1文あたり平均2.7文の元文を何らかの形で結合している．ここでの分類は表のようなタイプ分類を用いた．この分類タイプを用いて，169文，232箇所の文結合を分類した結果を基準例として表の上段に示す．次に，言い換えを伴って文結合がなされる例を同定し，それを文結合のタイプ分類で分類したものを表の下段に示す．このような言い換えをともなう文結合箇所は，以下のような方法で同定した．本手法で，要約文と対応文を対応付けた際に，得られた要約文に対しての編集記号列において，文頭や文末に未対応の文節列がある場合は，図に示したような以下の二つの場合がある．2つの対応文の接合部分に未対応文節がある場合（図中の要約文A)1つの対応文のかかり受け構造の中に未対応文節が挿入された形（図中の要約文B)この図の要約文Aのように，対応文の結合箇所に未対応の文節がある場合，この未対応の文節を文結合にともなう言い換えとみなした．なお，要約文Bのような，1つの対応文のかかり受け構造の中に挿入されている形の未対応文節については，次節で述べる．このような未対応文節列をともなう文結合の例は465箇所あり，その例を表に示す．文結合にともなう言い換えは，表の例1のように，結合のために文節の品詞や形態を変化させる例と，例2や例3のように，結合のための変化だけではなく，結合後の要約文をより良くするために，接続表現や，付加情報を付け加える場合があった．表をみると，言い換えがなされるかどうかにかかわらず，文結合として最も多いのは，連用接続の形である．これは，要約を作成する際に，元文章のある文の述べている命題についての関連情報を要約でも付加しようとしていることを示している．また，その関連情報の付加のされ方は，連鎖対や背景，理由，結果の提示といったものが多く，要約に必要な命題に関しての関連情報を知るためには，元文章のそのような情報を知ることが有益であることを示している．他方，連体接続で付加される情報としては，接続対象の事象や主体の背景提示や，「のような」を用いた例示表現などが多かった．表中の文の構文変化としたのは，原文中の「XXXではYYYである」といった構文が，「YYYなのは，XXXということ．」といったように，構文全体の構造が変化した例の数である．また，不適切な対応付けの例としたのは，対応付けが不適切であると人手で判断した例の数で，かかり関係をもつ2文節が文章中の複数の文に現れる慣用表現や，元文の言い換えと見たほうが適当であると判断した例である．</subsection>
  <subsection title="言い換えの特徴">文結合が行われる以外に，要約文を作成するためには，様々な言い換えが行われるであろう．今回用いた対応付けでは，3.4節で述べたような特定のかかり受け構造を手がかりとして，単文節言い換えの自動同定を行った．この方法で，言い換えを自動的に推定することが出来た例は121例であった．この方法で自動的に対応づけた文節言い換えの例をもともとは未対応であった文節を［］で囲み，周辺文脈とともに表に示す．表での言い換えは，最も単純なものとして，例1から例3に示した通り，漢字表記の違い，誤字，単文節の言い換えといったものがあり，このような単文節の言い換えの自動同定について，同じ文節とみなして間違いだと思われるものはなかった．反面，間違いではないものの，単純な単文節の言い換えではなく，複数文節の言い換えと考えた方がよいものとして，表の例4から例6があげられる．このように，表の例は，ほぼ確実に言い換えを自動同定できているが，抽出できた例は121例と少ない．すなわち，このような自動同定できた言い換え事例の少なさは，用意した要約文と対応文の両方の周辺かかり受け構造の条件が厳しかったことが原因であると考えられる．そこで，本節では，未対応となっている文節もしくは文節列の位置や，周辺の対応文節との相関から，それらの文節がどのような形で元文から言い換えられたかを議論する．その整理の大きな枠組みとして，要約中の文頭，文末，文中にあるときに分けて検討したい．この様に場合分けした理由は，表で要約文中の半数以上の文節未対応で残る場合は，文頭もしくは文末に長さ4以上の未対応文節列があることが多く，文中に長さ4以上の長い未対応文節ができることは少なかったからである．また，文中における未対応文節の文結合に伴う言い換えについては既に前節で議論したため，本節では，図の要約文Bのような例について説明する．要約文の文頭の特徴要約文の文頭で未対応の文節列があるものを，未対応文節の長さによって整理したものを表に示す．文頭の未対応文節と対応文それに対応する部分の例を，それぞれの未対応文節を［］で囲んで表の要約文1〜3に示す．表から分かるように，未対応の文節が文頭にある場合は1文節の未対応文節が多い．この原因を調べてみると，まず挙げられるのは，文頭に単文節の「XXは」といった主題表現や，「しかも」や「しかし」といった副詞や接続表現が文頭にある場合，対応付けられるべき同じ表層表現をもつ文節が対応対の両者にあるにもかかわらず，未対応となった例があった．これは，これらの未対応になる文節が，長い距離で依存関係を持つことが多いため，かかり受け解析の誤りや，かかり先の削除や言い換えにより対応付けられなかった例が多い．また，これらの表現は，新たに挿入されることも多い．このことは，計算機による要約文の生成を実現する上で，対応文のかかり受け構造だけではなく，主題，副詞，接続表現といった，文脈上の機能的役割を考慮する必要があることを示している．要約文の文末の特徴文頭の未対応文節と同様に，各試行回で対応付けが終わった要約文において文末の未対応文節がある場合に，その長さがどの程度かの分布を表に示した．文頭の未対応文節とは違い，未対応文節列の長さが1のものが飛びぬけて多いということはない．例を，表の要約文4〜6に示す．文末未登録文節の事例を調査すると，対応文の文末表現を簡略化するために，文節の未対応になってしまった表の要約文4や5のような例と，要約者の主観や独自の説明が入れられた要約文6の例が混在しており，ゆれが大きい．すなわち，要約文の文末表現は要約者によっての恣意的な度合いが高いと言える．そのほかの重要な例として，主題を文末に移動させた構文的変化を原因とする以下のような例がある．このような形の文全体の構文変化は，4.2節で述べた文結合に伴う構文的変化の際にも見られた例であり，要約の文脈を整える上で重要な働きを担っていると考えられる．要約文への文節の削除と追加要約文中への言い換えのパターンを説明する上で，図に示したような未対応文節列の長さn,mを導入すると，うまく整理できる．対応文側の未対応文節列の長さがnであり，要約側がmである．基本的なものとして，m=0でn&gt;1の場合と，その逆のn=0でm&gt;1の場合がある．前者は，対応文の文節を削除して要約文をつくる場合であり，後者は，要約文で対応文には存在しないなんらかの文節が追加される場合である．文節の削除は，要約が基本的には元文章を短くする処理であることから，要約操作において頻繁に行われる操作である．おおまかにいって，周りの文節が削除されず，1つの文節のみが削除される文節には，主題文節，副詞文節，接続表現といった文節が多く，複数の文節が削除される場合は節単位で削除されることが多い．どちらの場合も新しく生成された要約文の文脈に相関して削除される．このような，文節を削除する操作は，文を簡略化する際だけではなく，文結合を行う際にも重要であるるが，本稿では，元文章中の表現を使ってどのように要約文を生成するかを主眼に話を進めるため，この操作の特質の究明については詳しく触れない．対応文に現れない文節が要約文に追加される例を表中の例7〜9に示す．m=1の場合がもっとも多く，主題や副詞，接続表現が追加される．mが2以上の場合も，m=1の組み合わせや，複数文節からなる相当表現の追加であった．このように，対応文に現れない文節の追加は，単文節単位なされることが多く，その種類は，単文節単位で削除さやすい文節と同種の，主題文節，副詞文節，接続表現といった文節である.要約文の文中で起こる言い換え要約文と対応文との間で文節の単純な削除や追加が行われる以外の操作を，言い換えの観点から検討する．ここでは，言い換えの例を，要約文と対応文に同じ数だけの文節列が削除されるn=mの場合と，nとmの文節数が異なる場合に分けて検討する．表の要約文10〜12はn=mの場合の例である．このような例は，表中の要約文10,11のようなn=m=1が最も多く，そのような場合は，表に示したかかり受け構造を条件として自動的に同定した，単文節の言い換えに準じる言い換えであった．n=m&gt;1の場合であっても，今回収集した要約の中では文節数が3を越えるものはなく，表中の要約文12の例のように，単文節の言い換えの連鎖とみなせることが多い．上の場合以外のnとmが異なる場合は，n&lt;mで対応文よりも文節数が多くなる場合と，n&gt;mで対応文の当該部分を短く言い換えている場合である．n&lt;mで対応文に何らかの文節を追加している場合の例を表の要約文13〜15に示す．このような文節が増える形での言い換えの典型的な例としては，nとmの差が1のものが多かった．追加のされ方は，要約文13の単なる表現の変化や，要約文14の具体的な人名の挿入，そして，要約文15のように単文節の追加に準じるものと多様である．しかし，基本的には，挿入される新しい文節の数が1つだけというものが多く，その要約文への単文節挿入に伴って，要約文のかかり受け構造が対応文のそれと異なってしまい，双方に未対応の文節ができてしまっていた例が多い．なお，今回調査した要約では，元文章中にない複数の新しい文節を要約文中に挿入する例は少なく，nとmの差が4以上のものはなかった．n&gt;mとなる，言い換えをともなって対応文の当該部分を短くする例を，表の要約文16〜20に示す．このような言い換えの特徴として，241例あった言い換え箇所のうち，187例が，表中の要約文16〜19の例のように，要約文側の未対応文節が1文節のものであった．また，241例中，nとmの差が1のものが一番多く101例，２番目に多いものが差が2のもので49例である．nとmの差が1や2のもので特徴的であったものは，といった「の」表現に関わる言い換え事例であった．他方，このようなnとmの差が1であっても，要約文側の未対応文節が3以上の長い未対応文節である場合，表中の要約文20のような文節の削除や追加，複数文節にわたる言い換えが複合的に行われている場合もあり，このような場合を，未対応文節列対を言い換えと単純にみなすことには課題が残る．また，nとmの差が4より大きいものが存在し，このような事例も，対応文の節レベルの部分を削除したものなのか，それともそれを一言で言い換えたものなのかを客観的に判断することに課題が残る．以上を総括して，それぞれの言い換えの箇所数を表にまとめておく．この表から，要約中で言い換えが起こる箇所は，単なる表現の言い換えだけではなく，文結合にともなう言い換えが多いことがわかる．また，表現の言い換えも，ここまで議論してきたように，単文節の言い換えを基本にするものが多い．</subsection>
  <subsection title="要約における文再構成操作のまとめ">我々が収集した人手作成要約において，元文章中の文をどの様に書き換えて要約文を生成するかをかかり受け構造を基準に調査した結果を，要約操作の観点から以下のように整理する．すべての操作に関連することであるが，要約を行う文の前後における主題・主語の推移，前後の文との連鎖，論理関係を知ることが，これらの操作を計算機によって実現を目指す上で重要である．文節の削除要約元文章中からの文節削除は非常に多く行われる．その際，要約元文から数多くの文節を削除する場合は，節レベルを単位として削除されることが多い．単文節を単位として削除される場合は，副詞表現，接続表現，主題といった要素が多い．文節の追加文節の追加による表現の変化は特に文末において自由度が高い．要約文のすべての部分にわたる特徴として，主題・主語表現，副詞表現，接続表現などが，要約全体の首尾一貫性や結束性にもとづいて，読みやすいように追加がなされる．文結合要約を生成する上で，ある文の命題を要約に記述しようとする場合に，それに関連する命題を取り出し，文結合という形で1文にしている操作が数多くなされる．文結合操作が行われる時，用言の活用形を変化させて結合するだけでなく，元文を言い換えて結合することや，結合部分に新しい文節を挿入することがある．言い換え構文的な言い換えと文節を単位とする言い換えがある．文節を単位とする言い換えは，1文節を同義語や代用表現にする言い換えだけではなく，複数文節にわたる言い換えが存在するが，その場合でも複数の文節を1文節で言い換えるような例が多い．</subsection>
  <section title="まとめと今後の課題">本稿では，要約文が元文章の文の統語構造をどの程度保存するかを議論するために，かかり受け構造を利用して，要約1文対複数の要約元文の対応付けに対応できる文・文節対応対応付け手法を提案した．実際に人間が作成した要約に対して，この対応付け手法を適用した結果，すべての文節が完全に対応付けできる要約文を除いても，残りの要約文の81%について，元文中でかかり受け関係にある文節を要約文の半分以上の割合で保存していることを確認した．要約文側で未対応のまま残っている文節についても，それらを，文結合，文節の削除・追加，言い換えといった要約生成のための言語操作の帰結として整理すると見通しよく説明ができることを示した．さらに，言い換えについては，本手法で文節対応付けした結果を利用して，文節の対応パターンに基づいた基本的な文節言い換え事例の自動抽出を試み，その結果を参考に，さらに複雑な要約における文節レベルの言い換えの特質を論じた．今後の課題としては，今回の調査で収集できた言い換え事例と，要約操作についての知見を精緻化し，計算機による各要約操作の実装を目指したい．具体的には，自動対応付け手法を用いて，要約事例をさらに収集したものを機械学習の学習事例として用い，要約操作に関する知識を自動獲得することを検討したい．document</section>
</root>
