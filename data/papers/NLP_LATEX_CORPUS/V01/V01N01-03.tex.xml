<?xml version="1.0" ?>
<root>
  <title>並列構造の検出に基づく長い日本語文の構文解析</title>
  <author>黒橋禎夫長尾眞</author>
  <jabstract>従来の構文解析法は十分な精度の解析結果を得ることができず，とくに長い文の解析が困難であった．このことは従来の方式が局所的な解析を基本としていたことに原因があり，これを解決するためには文内のできるだけ広い範囲を同時的に調べることが必要である．我々は，すでに，このような考え方に基づき，長い文の中に多く存在する並列構造が文節列同士の類似性を発見するという手法でうまく検出できることを示した．本論文では，そのようにして検出した並列構造の情報を利用して構文解析を行なう手法を示す．長い日本語文の場合は1文内に複数の並列構造が存在することも多い．そこでまず，文内の並列構造相互間の位置関係を調べ，それらの入れ子構造などを整理する．多くの場合，並列構造の情報を整理した形で利用できれば，文を簡単化した形でとらえることができる．そこで，簡単化した各部分に対して単純な係り受け解析を行ない，その結果を組み合わせることによって文全体の依存構造を求めることが可能となる．各部分の係り受け解析としては，基本的に，係り受け関係の非交差条件を満たした上で各文節が係り得る最も近い文節に係るという優先規則によって決定論的に動作する処理を考えた．150文に対して実験を行なったところ，96%の文節について正しい係り先を求めることができた．</jabstract>
  <jkeywords>構文解析，係り受け解析，並列構造，文の簡単化</jkeywords>
  <subsubsection title="">*係り受け解析全体について150文の解析結果について人手で評価を行なった．まず文節を並列のキー，用言に係る文節，体言に係る文節の3タイプに分類し，並列のキーについては正しい終点文節が検出されているか，用言に係る文節，体言に係る文節については正しい係り先が求まっているかを調べた(表)．また，各文をその長さと並列構造の有無によって分類し，文中の全ての並列構造が正しく求まっているか(文の簡単化が正しく行なわれたかどうか)，さらに文全体の依存構造が正しく求まっているかどうかを調べた(表上部)．次に，本手法の有効性，特に並列構造の検出による文の簡単化の有効性を調べるために比較実験を行なった．この比較実験では，並列のキーに対してダイナミックプログラミングによる並列構造の範囲推定を行なわずに，単にそれを最も類似する文節に対応付けるという規則を用いた(2.1節の文節間類似度の計算を用いた)．この規則と本論文で示した係り受けの優先規則によって，文末の文節から順にその係り先あるいは対応先を決定するという形で文解析を行なった．この方法による解析結果を表下部に示す．この実験で対象としたのはかなり長い文であり，1文当たりの文節数も多い(平均14.3)．各文節に対して係り先の候補が多数あるため解析の誤りが起こる可能性が高く，また1文の解析結果(依存構造木)の中に誤りが含まれる可能性も高くなる．このように文が長くなった場合，文の簡単化を行なわなければ表に示したように解析成功率は極端に低下する．このような条件を考えれば，本手法の文単位の解析成功率65%(97/150)は決して低くないと考えられる．また表に示す通り文節単位の解析成功率は十分に高いので，解析誤りを一部に含む場合でも文のおおまかな構造は多くの場合正しく求まっており，そこからなんらかの情報を取り出すことは十分可能である．</subsubsection>
  <section title="はじめに">従来の構文解析法は基本的に句構造文法あるいは格文法をその拠り所としてきた．前者の考え方は局所的統合の繰り返しによって文の構造を認識しようというものである．しかし，実際にそのような方法で文を解析しようとすると，規則の数が非常に多くなり，なおかつ十分な精度の解析結果を得ることが困難であった．また，格文法の場合は格要素を決定するための意味素が必ずしもうまく設定できず，またこの場合も基本的には局所的な解析であるため，十分な精度の解析結果が得られていない．これらの問題を解決するためには，これらの文法的枠組に加えて，局所的記述ではとらえきれない情報を文中の広い範囲を同時的に調べることによって取り出す必要がある．日本語文解析の困難さの原因の一つである並列構造の範囲に関する曖昧性の問題も，このような「広い範囲を同時的に調べる」ことを必要とする問題の一つである．日本語文は，特に長い文になればなるほど多くの並列構造を含んでいる．「〜し，〜し，〜する」のように，いわゆる連用中止法によって複数の文を1文にまとめることができることは日本語文の特徴でもある．それ以外にも，名詞並列，形容詞並列や，連体修飾節の並列などが頻繁に現れる．このような並列構造に対する従来の解析方法は，基本的には次のようなものであった．例えば「原言語を解析する処理と相手言語を生成する処理を．」という文では，並列構造前部の主要語である「処理(と)」に対して，それよりも後ろにある名詞の中から最も類似している名詞を探すという方法により後部の主要語を決定していた(この場合「処理(を)」が後部の主要語)．しかし並列構造においては，主要語間だけではなく，構造内の他の語の間(この例の場合「原言語」と「相手言語」，「解析する」と「生成する」)にも，さらに文節列の並び(「〜を〜する〜と〜を〜する〜」)にも類似性が認められる場合が多く，これらの類似性を考慮することによってより正確に並列構造を認識することができる．そこで我々は，並列構造の存在を示す表現(名詞並列を示す助詞「と」など)の前後における最も類似度の高い文節列の対を，音声認識などで広く使われているダイナミックプログラミングのマッチング法と同様の考え方を用いて発見するという方法を考案し，このことにより並列構造の高精度な検出が可能であることを示した．本論文では，このようにして検出した並列構造の情報を利用して構文解析を行なう手法を示す．多くの場合，いったん並列構造が発見されると文の構造は簡単化した形でとらえることができる．その結果，単純な係り受け規則を適用するだけで高精度な構文解析が可能となる．本手法は，たとえば，大規模なテキストを解析して，そこから新しい情報を取り出そうとするような場合に特に有用である．対象テキスト中の専門用語や専門的に使われている述語について，それらの相互間の関係はそこで始めて提示された概念であるかもしれない．その場合には，そのような概念の相互関係は辞書に記述されておらず，辞書中の意味記述に頼った解析は不成功となる．また，大規模なテキストを扱うのに十分であるような複雑な文法規則や詳細な格記述を用意することは，実際には非常に困難である．新しい概念は用語相互間のシンタックスによって示されるのであるから，シンタックスを尊重した解析が重要である．また，本手法でうまく扱えない問題を整理することによって，構文解析における本質的問題を明らかにすることも重要な問題である．これまでの，構文解析における曖昧性の議論では，人間にとっても曖昧であるような表現を取り上げたものが多かった．しかし，従来の構文解析法が十分でないという印象を人間に与えるのは，そのような点ではなく，人間であれば絶対にしないような部分に不必要な曖昧性を認識するためである．その原因がどこにあるかを調べるためには，本手法のように高精度でかつ決定論的に動作する道具立てが必要である．</section>
  <section title="並列構造の検出と文の簡単化"/>
  <subsection title="並列構造の検出の概要">1文中の並列する部分は何らかの意味において類似していると考えることが出来る．そこで，類似性という観点から並列構造を検出する方法を図を用いて説明する(詳細は文献参照)．並列構造の存在を機械的に認識することは比較的容易である．名詞並列は，名詞の直後の読点や助詞「と」・「や」などによって認識でき，述語並列は，述語自身が連用形であることや述語が助詞「が」などを伴うことによって認識できる(このように並列構造の存在を示す文節を並列のキーとよぶことにする)．問題となるのは，そういった表現がある場合にその前後のどこまでが並列構造の範囲であるかということである．そこでまず，文節間の類似度を品詞の一致，文字列の一致，シソーラスによる意味的な近さ，などによって定義し，全ての文節間についてこの値を計算した．図の三角行列では，対角要素は文節を，(i,j)要素はi番目の文節とj番目の文節の類似度を示している．次にいくつかの連続した文節，すなわち文節列相互間の類似度を考える．そのために以下の用語を定義する．パスに含まれる各要素の値は並列のキーの前後にある2つの文節間の類似度を示しているので，それらの値の総和であるパスのスコアはパスの左側の文節列と下側の文節列の間の類似度を示している．パスの方向のずれに対してペナルティを与えるのは，それによって文節数が同じぐらいの文節列間の類似度を相対的に高くするためである．このように考えると，文節列間の類似度をパスのスコアという形で計算することができるようになる．そこで，ダイナミックプログラミングの手法によって並列のキーに対する最大スコアのパスを求め，そのパスによって示される最も類似度の高い文節列を並列構造の範囲と考えることにする．図の例では，実線で囲まれた要素の並びが最大スコアのパスとして求まり，このパスによって正しい並列構造の範囲が検出される．実験として30文字〜50文字，50文字〜80文字，80文字以上の各60文，合計180文の日本語文に対してこの手法を適用したところ，82%の並列のキーに対して正しい並列構造を検出することができた．これは文献で既に発表した．この方法によって求まった並列構造の範囲は前部と後部からなり，前部の最初の文節を起点文節，後部の最後の文節を終点文節とよぶことにする(以降本論文では，前部，後部という用語は，並列構造を構成する文節列を示すものとする)．終点文節は前部と後部を分かつ並列のキー(前部の最後の文節)と対応する文節であり，パスの定義からわかるようにこれら2つの文節は類似度をもったものが選ばれる．一方，並列構造の前部と後部にはそれぞれ並列のキーと終点文節を修飾している文節列があり，起点文節は前部の修飾部分がどこまでであるかを示している．しかし，前部と後部の修飾部分には正確な対応関係があるわけではなく，起点文節は主にバランス(文節数の同じ文節列の類似度が高い)という観点から決定される．そのため，起点文節は並列構造の始まりの位置を必ずしも正確に示しているわけではない．その最終決定は係り受け解析の段階で処理する(節)．なお，検出された並列構造のうち次の二つの条件を満たす，とくに類似度の高いものを強並列とよぶことにする．前部の文節数(n1)と後部の文節数(n2)がほぼ等しい．並列構造を与えるパスのスコアが高い．たとえば，次の文の下線部分は強並列である．強並列は，以降の処理において他の並列構造と若干異なった扱いをする．</subsection>
  <subsection title="並列構造間の関係の整理による文の簡単化">前節の処理で得られた並列構造の範囲に関する情報をまとめることによって，文の大まかな構造を把握することができる．この処理は，まず二つの並列構造間の関係を明らかにし，それをもとに1文内の全ての並列構造間の関係を整理することによって行う．並列構造の範囲は，起点文節の位置，並列のキーの位置，終点文節の位置の3組値で表すことができる．1文内に2つの並列構造が存在するとき，図に示すように，前方の並列構造Xの範囲をx1，x2，x3，後方の並列構造Yの範囲をy1，y2，y3とする．並列構造間の関係が問題となるのは，その範囲が重なる場合，すなわちy1x3の場合である．このときy1とx1,x2，およびx3とy2,y3の関係によって2つの並列構造間の位置関係を図のように分類できる．この16の位置関係は次の3つの関係に分類することができ，そのそれぞれに対して次のような処理を行う．なお，並列構造の類似度が高い強並列では，その中の文節がそれぞれ強く対応しており，意味的に強い.ま.と.ま.りをなしていると考えられる．そのため，外部の並列構造(並列のキーが強並列の範囲の外にあるもの)の境界が強並列の内部にある場合は違反関係とする．すなわち，後の並列構造が強並列である場合に，A,Eの位置関係を違反関係とする．これらの処理の具体例を図(a)の例文(以後，例文3とよぶ)について示す．この例文の場合，前節の処理で次の3つの並列構造が検出される．CS1[表題，]-[著者，]CS2[著者，]-[主題などの]CS3[主題などの〜再編成し，]-[索引の〜記録しておく．]このうちCS1とCS2は兄弟関係にあるので，これらを3つの部分からなる1つの並列構造CS'([表題，]-[著者，]-[主題などの])にまとめる．さらに，CS2とCS3，すなわちCS'とCS3が親子関係にあるので，CS3の前部を「表題，著者，」の部分を含むように延長する．これらの処理の結果，図に示すように，文の大まかな構造を得ることができる．</subsection>
  <subsection title="違反関係にある並列構造の修正">文内に違反関係の並列構造がある場合には，並列構造の検出のやり直しを行なう．違反関係にある2つの並列構造のうち，スコアの高い方の並列構造の範囲を基準とし，その範囲に対して違反関係にならないような並列構造をもう一方の並列のキーについて再検出する．たとえば，前方の並列構造Xの再検出を行なう場合には，x2,y1,y2,y3の値に対して図の関係式によって正しい位置関係を与えるようなx1,x3の値の範囲を求める．並列構造の再検出では，並列構造の起点文節と終点文節の位置をこのようにして求まった範囲内に制限し，その中でもっとも類似度の高い並列構造を求める．図に並列構造の再検出の例を示す．図の中に示した表は，並列構造[プログラム，データだけでなく，]-[ファイル，データベースをも]を基準として並列のキー「ファイル，」に対する並列構造を再検出する場合，起点文節が6番目の文節「ファイル，」であり，終点文節が7番目の文節「データベースをも」である並列構造だけが制限を満たすことを示している．すなわち，この例文の場合，再検出される並列構造の範囲は起点文節と終点文節に対する制限によって一意に決まることになる．違反関係にある並列構造の組が1文内に複数ある場合には，スコアの差が最も大きい組について再検出の処理を行なう．そして一つの並列構造の再検出を行うたびに全体の並列構造間の関係を調べ直し，違反関係がなくなるまでこの処理を繰り返す．</subsection>
  <section title="係り受け解析">前章で説明したように，文内の並列構造が決定されると文の大まかな構造がとらえられたことになり，文を簡単化した形で扱うことが可能となる．この結果，簡単化された各部分に対して単純な係り受け解析をするだけで，従来の構文解析よりも頑強な，すなわち長い文に対しても有効な構文解析を行なうことができる．</section>
  <subsection title="係り受け解析の概要">係り受け解析の目的は，文節間の係り受け関係を明らかにし，その関係を依存構造木によって表現することである．依存構造木では，木の節点には受けの文節を，その子の節点には係りの文節を配置する．日本語の場合，各文節はそれよりも後ろの文節に係るので，最終的には文末の文節を根節点とする依存構造木が得られる．係り受け解析は，まず並列構造に関する部分について行なう．複数の並列構造が入れ子構造(親子関係)をなしている場合は，その中の最も深いレベルにある並列構造から順に解析していく．そして，最後に文全体の解析を行なう．並列構造の前部と後部はそれぞれ意味的なまとまりをなしており，それぞれを1つの依存構造木にまとめることができる．そこで，並列構造を表すためにその2つの依存構造木の根節点(依存構造木の表示では``&lt;P&gt;''を付加)を子の節点とする新たな節点(依存構造木の表示では``PARA''と表記，並列節点とよぶことにする)を作り，その上のレベル(親の並列構造，それがない場合には文全体)の係り受け解析では，この並列節点のみが扱われるようにする．並列節点は，係りの文節となる場合には終点文節の内容を継承し，受けの文節となる場合には並列のキーと終点文節の内容を継承する．こうすることによって，並列構造中の並列のキーと終点文節以外の文節は並列構造の外の文節の係り先にはならないことになる．3つ以上の部分からなる並列構造の場合は，並列節点の子の節点，すなわち並列構造内でまとめられる依存構造木の数が増えるだけで，その他の処理は全く同じである．たとえば図に挙げた例文3では，まず並列構造[表題，著者，主題などの]の各部分が処理対象となる．この各部分は1文節なので係り受け解析の必要はなく，単にそれらをまとめた並列節点が作られる(図(a))．次に，並列構造[表題，〜記憶しておく．]の前部と後部を係り受け解析してそれぞれを依存構造木にまとめ，さらに並列節点を作る(図(b))．そして最後に文全体を係り受け解析し，文全体の依存構造木を得る(図)．</subsection>
  <subsection title="一定範囲内の文節列の係り受け解析">並列構造を1つのものと見ることによる文の簡単化がうまくいったとして，次にその各部分をどのような規則で係り受け解析するかということが問題となる．我々はまず，次のような優先規則によって決定論的に動作する解析を考えた．解析すべき範囲について後ろから順に各文節の係り先を決定する．各文節の係り先は，係り受け関係が相互に交差しない条件(非交差条件)をみたし，かつ.係.り.得.る文節のうち最も近い文節とする．係り得る関係は次のものである．ただし，助詞「が」・「を」を伴う文節は，それぞれ同じ述語に2つ以上は係り得ない．名詞に係り得る:連体詞，助詞「の」，活用語の基本形・タ形動詞に係り得る:活用語の連用形，副詞，助詞述語のイ形容詞・ナ形容詞に係り得る:活用語の連用形，副詞，助詞(「を」・「へ」以外)連体形のイ形容詞に係り得る:副詞，助詞「が」・「の」・「に」・「より」連体形のナ形容詞に係り得る:副詞，助詞「が」・「に」・「より」連用形のイ形容詞・ナ形容詞に係り得る:副詞名詞＋判定詞に係り得る:活用語の連用形，副詞，助詞(「を」以外)．述語のイ形容詞・ナ形容詞とは，読点を伴うもの，文末のもの，「〜という」などの表現を伴うものをさす．それ以外の場合の連体形，連用形の形容詞については，その係り先の体言，用言の方が意味的に強いと考え，上記のようにそれらの形容詞に係り得る文節を制限した．図の例では，文節2,文節3,の順に係り先を決定していき，文節6の係り先を調べる段階では，非交差条件によって文節4,文節3は対象外となり，文節5,文節2,文節1の順で係り得る文節を探す．このような方法で30文の学習サンプル(岩波情報科学辞典のテキスト)に対して係り受け解析を行なったところ，幾つかの問題点が明らかになった．そのうち，語彙に依存した問題ではなく，一般性をもった問題を解決するために次の3つのタイプの文節に対する規則を新たに加えた．例えば，例文4(図)の場合，「ミハイロフらが，」は読点を伴うために，係り得る最初の文節「追究する」ではなく2番目の「与えた」に係る．また，「用語は」は助詞「は」を伴うので係り先として区切り文節を探し，その結果，文末の文節「言葉である．」に係ることになる．例文5(図)の場合は，文節「とらえられるので，」が区切り文節であるため，助詞「は」を伴う文節「内容は」はこの区切り文節に係り，この区切り文節自身は係り得る最も遠い文節である「分野である．」に係る．これらの規則でうまく扱うことができない問題については章で議論する．</subsection>
  <subsection title="並列構造の範囲の延長">前節で述べた並列構造の検出方法ではその前部がどこから始まるかについて正確な情報が得られないので，係り受け解析の段階でこれを明らかにする必要がある．そこで，``検出した並列構造の起点文節より前の文節であっても，その並列構造内の文節に係ることが.妥.当.で.あ.る文節は並列構造に含まれるとみなす''という考え方で並列構造の範囲の延長を行なう．延長を行なうのは，述語を含む並列構造，すなわち述語並列の場合と連体修飾節を含む名詞並列の場合である．そのような並列構造の場合，その前部の係り受け解析を，並列構造として検出された範囲内だけでなくさらにその前の部分に対しても延長して行なう．ただし，延長の解析は次のように行なう．解析対象の文節が読点あるいは助詞「は」を伴う場合は，延長の処理を終了する．そのような文節は，並列構造との間に意味的な区切りがあり，並列構造内部の文節に係るのではなく，並列構造全体，あるいはさらに後ろの文節に係ると考えられるからである．並列のキーを係り先の対象から外して係り受け解析を行ない，係り先がない場合には，延長の処理を終了する．並列のキーを係り先の対象から外すのは，もし並列のキーに係るのであれば，それと対応している終点文節にも係ると考えられ，そのような係り受け関係はその上のレベルの係り受け解析において並列節点との関係として扱うからである．たとえば，図で示した例文1では，起点文節の前の「その」は「可能性を」に係ると考えて並列構造に含まれるとし，助詞「は」および読点を伴う「解消するためには，」のところで延長の処理を終了する．最終的に得られる依存構造木を図に示す．なお，延長を考える並列構造が強並列の場合は，並列構造内の前部と後部の各文節が強く対応しているので，延長する部分の文節が上述のように前部の文節だけに係ると考えるのではなく，前部と後部の対応する文節の対に係ると考える．この処理は，並列構造後部において省略された修飾語を補間する処理であるとみなすこともできる．たとえば，節で示した例文2では，「その開発の」は「助け」と「妨げ」の両方に，「コンピューターのアーキテクチャが」は「(助けに)なる」と「(妨げに)なる」の両方に係るとする(図)．</subsection>
  <subsection title="係り受け解析を失敗した場合">これまで説明してきた規則によって並列構造の各部分を係り受け解析すると，ある文節に対してその係り得る文節がなくなり，解析が失敗するということがある．このような失敗は，もともと1つの依存構造木にまとめることができない不完全な部分が並列している場合(このような並列構造を部分並列とよぶことにする)と，検出された並列構造の範囲が誤りである場合に起こる．部分並列は，前部と後部の述語が等しい述語並列において前部の述語が省略された構造である(図(a)(b))．そこで，次の2つの条件をみたす場合にその並列構造を部分並列とみなす(図(c))．並列構造の前部と後部の両方で(3つ以上の部分からなる並列構造ではその各部分で)係り受け解析が失敗する．係り先がない文節の付属語がすべて等しい．たとえば，次の文の下線部分は部分並列である．部分並列の場合は，並列のキー，終点文節に加えて，係り先のない文節もいったん並列節点の子節点とする(図(d))．そして，次のレベルの解析において並列節点の係り先が明らかになった段階で，その係り先の文節を前部に対して補うことによって述語並列への変換を行う(図(e))．さらに，部分並列の並列のキー文節の助詞が省略されている場合は，終点文節の助詞によってそれを補間する．例文6の場合，助詞「を」と述語「使用し」が補われる(図)．係り受け解析が失敗し，上記の条件が成り立たない場合には，並列構造の検出が誤っていたと考え，並列構造の検出のやり直しを行なう．係り受け解析の失敗が起こらないような並列構造を検出するために，その起点文節と終点文節の位置について次のような制限を与える．並列のキーから文の先頭までを対象範囲として係り受け解析が可能かどうかを調べる．ある位置で解析が失敗する場合は，並列構造の前部がそれよりも広い範囲になると必ず解析が失敗するので，起点文節の位置はその失敗した位置よりも後ろであるとする．並列構造の後部として考えられるすべての範囲についてその中の係り受け解析が可能であるかどうかを調べ，可能でない場合はその範囲の末尾の文節が終点文節となることを禁止する．並列構造の再検出を行なった場合は，並列構造間の関係を求める処理まで戻って解析をやり直す．図に並列構造の再検出の例を示す．図の中に示した表は，再検出する並列構造が係り受け解析可能であるためには，起点文節に対する制限はないが，終点文節は5番目の文節「文書処理とともに」か10番目の文節「なす．」に限られることを示している．</subsection>
  <section title="文解析の結果とその評価">本手法による文解析の実験をテストサンプルの150文に対して行なった．テストサンプルは，文字数が30〜50文字，50〜80文字，80文字以上のものをそれぞれ50文づつランダムに収集した．</section>
  <subsection title="定量的評価"/>
  <subsection title="関連研究">構文解析システムを，実際にテキストを処理するツールとして考えた場合，並列構造と依存構造(または句構造/格構造)に対する優先規則を持つことは必要不可欠である．しかし，日本語文解析において，そのような規則を備えたシステムとその評価結果を示した研究は非常に少ない．実用的機械翻訳システムであるMuシステムの日本語解析部では，並列構造，依存構造に対する優先規則による処理を行っているが，その評価は翻訳結果に対して行われており，日本語解析部に対する評価の報告はない．しかし，Muシステムにおける並列構造解析は基本的に1章で述べた「並列する主要語間の類似度を調べる」方法であり，また，本手法のように並列構造の再検出を起動するような枠組も示されていない．稲垣らは，並列構造に対する優先規則，読点を伴う文節に対する優先規則に加えて，用例とシソーラスを用いた優先規則を備えた日本語文解析システムを提案している．このシステムは，解析対象テキスト中の一意に決定される係り受け関係を用例として利用することにより残りの部分の曖昧性を解消する，というシステムであり，特許請求範囲文10篇に対する文節単位の解析成功率は97%であると報告されている．しかし，このシステムの場合も並列構造解析の方法については上述のMuシステムと同様の問題がある．</subsection>
  <subsection title="解析の誤り">本手法における係り受け解析誤りの根本的原因を分類し，それらを具体例とともに説明する(表:下線部分は誤った係り先を求めた文節とその誤った係り先の文節，傍点はその正しい係り先の文節を示している)．並列のキーに対する終点文節の検出の誤りについては文献で論じたので，ここでは用言に係る文節と体言に係る文節の係り先の誤りに的を絞る．並列構造の前部の範囲と関連するもの並列構造の検出では，文節数が同じぐらいの文節列同士が並列することが自然であるということを1つの尺度にしている．このため，後部の文節数が非常に多い並列構造では後部の範囲が正しく求まらない可能性があり(図(a))，この場合は並列のキーに対して終点文節の検出を誤ったということになる．これに対して，前部の文節数が非常に多い並列構造では前部の範囲が正しく求まらない可能性がある(図(b))．この問題の大部分は節で示した方針によって並列構造の前部の延長を行なうことで解決できるが，なかにはその方法で扱えない場合もある．誤り例1では，並列のキー「必要で，」に対する並列構造として``『'',``』''で囲まれた部分が検出され，その前の「構築には，」は助詞「は」と読点を伴うので並列構造の延長は行なわれない．そのため，「構築には，」の正しい係り先は「必要で，」であるのに，本手法では文全体を解析する段階で並列節点，すなわち「必要で，」と「データベース化した。」の両方が係り先であると解釈されてしまう．このような原因による解析の誤りは用言に係る文節の解析の場合が圧倒的に多い．述語的働きをする「で」・「の」に関連するもの名詞に続く「で」・「の」は助詞である場合と判定詞の活用形である場合がある．判定詞である場合，「で」は「であり」に，「の」は「である」に言いかえることができる(誤り例2:「錯覚で，」，誤り例3:「つきものの」)．これらの区別は困難であるので，本手法では今のところ圧倒的に頻度の高い助詞としての解釈を優先している．そのため，それらが判定詞である場合その文節(「名詞＋判定詞」)に係るはずの文節の解析は失敗してしまう．連体修飾(「〜の」を含む)の連続する部分での誤り体言に係る文節の係り先の解析の失敗は，ほとんど連体修飾の連続する部分で起こっている(誤り例4)．150文に対する実験では誤りの絶対数が少ないので，誤りを上のように分類することはできるが，それらの解決方法の考察まで行なうことは難しい．解決方法を考えるためには，誤りの原因となっているような表現を大量に収集して調査することが必要である．</subsection>
  <section title="おわりに">従来方式の構文解析では長い文の中に多く存在する並列構造を正しく認識することが困難であり，そのことが長い文を解析する上での大きな問題であった．本論文では，まず文内の並列構造の範囲を文節列同士の類似性を発見するという考え方によって検出し，次に並列構造の情報を利用しながら簡単な係り受け解析を行なうという方法によって，長い文に対しても有効であり，かつ高精度な構文解析が実現できることを示した．次のステップでは，構文解析によって求まった依存構造木において依存関係にある文節間の格関係の推定を行ない，同時にその過程で省略語句の復元や指示詞の指示対象の同定を行なうことを考えている．このレベルの処理が実現されて，始めて文からある種の意味が取り出せることになる．document</section>
</root>
