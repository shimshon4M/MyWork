<?xml version="1.0" ?>
<root>
  <jtitle>日本語機能表現の自動検出と統計的係り受け解析への応用</jtitle>
  <jauthor>注連隆夫土屋雅稔松吉俊	宇津呂武仁佐藤理史</jauthor>
  <jabstract>日本語には，「にあたって」や「をめぐって」のように，2つ以上の語から構成され，全体として1つの機能的な意味をもつ機能表現という表現が存在する．一方，この機能表現に対して，それと同一表記をとり，内容的な意味をもつ表現が存在することがある．そして，この表現が存在することによって，機能表現の検出は困難であり，機能表現を正しく検出できる機能表現検出器が必要とされている．そこで，本論文では，日本語機能表現を機械学習を用いて検出する手法を提案する．提案手法では，SupportVectorMachine(SVM)を用いたチャンカーYamChaを利用して，形態素解析結果を入力とする機能表現検出器を構築する．具体的には，形態素解析によって得られる形態素の情報と，機能表現を構成している形態素の数の情報，機能表現中における形態素の位置情報，機能表現の前後の文脈の情報を学習・解析に使用することにより，F値で約93%という高精度の検出器を実現した．さらに，本論文では，機能表現検出器の解析結果を入力として，機能表現を考慮した係り受け解析器を提案する．提案手法では，SupportVectorMachine(SVM)に基づく統計的係り受け解析手法を利用して，機能表現を考慮した係り受け解析器を構築する．具体的には，京都テキストコーパスに対して，機能表現の情報を人手で付与し，機能表現の情報を基に文節の区切りや係り先の情報を機能表現を考慮したものに変換した．そして，SVMに基づく統計的係り受け解析の学習・解析ツールCaboChaを用いて，変換したデータを学習し，機能表現を考慮した係り受け解析を実現した．評価実験では，従来の係り受け解析手法よりもよい性能を示すことができた．</jabstract>
  <jkeywords>日本語機能表現，係り受け解析，機械学習</jkeywords>
  <section title="はじめに">機能表現とは，「にあたって」や「をめぐって」のように，2つ以上の語から構成され，全体として1つの機能的な意味をもつ表現である．一方，この機能表現に対して，それと同一表記をとり，内容的な意味をもつ表現が存在することがある．例えば，ex:niatatte-Fとex:niatatte-Cには，「にあたって」という表記の表現が共通して現れている．出発するにあたって，荷物をチェックした．ボールは，壁にあたって跳ね返った．exampleex:niatatte-Fでは，下線部はひとかたまりとなって，「機会が来たのに当面して」という機能的な意味で用いられている．それに対して，ex:niatatte-Cでは，下線部に含まれている動詞「あたる」は，動詞「あたる」本来の内容的な意味で用いられている．このような表現においては，機能的な意味で用いられている場合と，内容的な意味で用いられている場合とを識別する必要がある．以下，本論文では，文（），（）の下線部のように，表記のみに基づいて判断すると，機能的に用いられている可能性がある部分を機能表現候補と呼ぶ．機能表現検出は，日本語解析技術の中でも基盤的な技術であり，高カバレージかつ高精度な技術を確立することにより，後段の様々な解析や応用の効果が期待できる．一例として，以下の例文を題材に，機能表現検出の後段の応用として機械翻訳を想定した場合を考える．私は，彼の車について走った．私は，自分の夢について話した．exampleex:nitsuite-Cでは，下線部は内容的用法として働いており，ex:nitsuite-Fでは，下線部は機能的用法として働いており，それぞれ英語に訳すと，ex:nitsuite-C-e，ex:nitsuite-F-eとなる．Idrovehiscar.Italkedaboutmydream.example下線部に注目すれば分かる通り，英語に訳した場合，内容的用法と機能的用法で対応する英単語が異なっている．このように内容的用法と機能的用法で対応する英単語が異なるので，機能表現検出のタスクは，機械翻訳の精度向上に効果があると考えられる．また，機能表現検出の後段の解析として格解析を想定する．格解析は，用言とそれがとる格要素の関係を記述した格フレームを利用して行われる．私は，彼の仕事について話す．example「について」という機能表現を含むex:nitsuite-kにおいて，格解析を行う場合，機能表現を考慮しなければ，「仕事」と「話す」の関係を検出することができず，「私は」と「話す」の関係がガ格であることしか，検出できない．それに対して，「について」という機能表現を考慮することができれば，「仕事」と「話す」の関係の機能的な関係を「について」という機能表現が表現していることが検出することができる．このことから，機能表現検出の結果は，格解析の精度向上に効果があると考えられる．さらに，以下の例文を題材にして，機能表現検出の後段の解析としてを係り受け解析を想定する．2万円を限度に家賃に応じて支給される．2万円を限度に家賃に応じて支給される．exampleex:niouzite-1，ex:niouzite-2における空白の区切りは，それぞれ，機能表現を考慮していない場合の文節区切り，機能表現を考慮した場合の文節区切りを表している．この例文において，「限度に」という文節の係り先を推定する時，「限度に」という文節が動詞を含む文節に係りやすいという特徴をもっているので，ex:niouzite-1の場合，「応じて」という文節に係ってしまう．それに対して，ex:niouzite-2では，「に応じて」を機能表現として扱っているので，「限度に」の係り先を正しく推定できる．このようなことから，機能表現のタスクは，格解析の精度向上に効果があると考えられる．本論文では，これら3つの応用研究の内，係り受け解析への機能表現検出の適用方法を考えた．日本語の機能表現として認定すべき表記の一覧については，いくつかの先行研究が存在する．は，450種類の表現を，意味的に52種類に分類し，機能的に7種類に分類している．は，森田らが分類した表現の内，格助詞，接続助詞および助動詞に相当する表現について，階層的かつ網羅的な整理を行い，390種類の意味的・機能的に異なる表現が存在し，その異形は13690種類に上ると報告している．は，森田らが分類した表現の内，特に一般性が高いと判断される337種類の表現について，新聞記事から機能表現候補を含む用例を無作為に収集し，人手によって用法を判定したデータベースを作成している．このデータベースによると，機能表現候補が新聞記事（1年間）に50回以上出現し，かつ，機能的な意味で用いられている場合と，それ以外の意味で用いられている場合の両方が適度な割合で出現する表現は，59種類である．本論文では，この59種類の表現を当面の検討対象とする．まず，既存の解析系について，この59種類の表現に対する取り扱い状況を調査したところ，59種類の表現全てに対して十分な取り扱いがされているわけではないことが分かった．59種類の表現の内，形態素解析器JUMANと構文解析器KNPの組合わせによって，機能的な意味で用いられている場合と内容的な意味で用いられている場合とが識別される可能性がある表現は24種類である．また，形態素解析器ChaSenと構文解析器CaboChaの組合わせを用いた場合には，識別される可能性がある表現は20種類である．このような現状を改善するには，機能表現候補の用法を正しく識別する検出器と検出器によって検出される機能表現を考慮した係り受け解析器が必要である．まず，検出器の実現方法を考えた場合，検出対象である機能表現を形態素解析用辞書に登録し，形態素解析と同時に機能表現を検出する方法と，形態素解析結果を利用して機能表現を検出する方法が考えられる．現在，広く用いられている形態素解析器は，機械学習的なアプローチで接続制約や連接コストを推定した辞書に基づいて動作する．そのため，形態素解析と同時に機能表現を検出するには，既存の形態素に加えて各機能表現の接続制約や連接コストを推定するための，機能表現がラベル付けされた大規模なコーパスが必要になる．しかし，検出対象の機能表現が多数になる場合は，作成コストの点から見て，そのような条件を満たす大規模コーパスを準備することは容易ではない．形態素解析と機能表現検出が独立に実行可能であると仮定し，形態素解析結果を利用して機能表現を検出することにすると，前述のような問題を避けられる．そこで，機能表現の構成要素である可能性がある形態素が，機能表現の一部として現れる場合と，機能表現とは関係なく現れる場合で，接続制約が変化しないという仮定を置いた上で，人手で作成した検出規則を形態素解析結果に対して適用することにより機能表現を検出する手法が提案されてきた．しかし，これらの手法では，検出規則を人手で作成するのに多大なコストが必要となり，検出対象とする機能表現集合の規模の拡大に対して追従が困難である．そこで，本論文では，機能表現検出と形態素解析は独立に実行可能であると仮定した上で，機能表現検出を形態素を単位とするチャンク同定問題として定式化し，形態素解析結果から機械学習によって機能表現を検出するアプローチ~をとる．機械学習手法としては，入力次元数に依存しない高い汎化能力を持ち，Kernel関数を導入することによって効率良く素性の組合わせを考慮しながら分類問題を学習することが可能なSupportVectorMachine(SVM)を用いる．具体的には，SVMを用いたチャンカーYamChaを利用して，形態素解析器ChaSenによる形態素解析結果を入力とする機能表現検出器を実装した．ただし，形態素解析用辞書に「助詞・格助詞・連語」や「接続詞」として登録されている複合語が，形態素解析結果中に含まれていた場合は，その複合語を，構成要素である形態素の列に置き換えた形態素列を入力とする．また，訓練データとしては，先に述べた59表現について人手で用法を判定したデータを用いる．更に，このようにして実装した機能表現検出器は，既存の解析系およびが提案した人手で作成した規則に基づく手法と比べて，機能表現を高精度に検出できることを示す．次に，機能表現を考慮した係り受け解析器の実現方法としては，既存の解析系であるKNPとCaboChaを利用する方法が考えられる．KNPを利用する場合は，新たに機能表現を考慮した係り受け規則を作成する必要がある．それに対して，CaboChaを利用する場合は，現在使用されている訓練用データ（京都テキストコーパス~）を機能表現を考慮したものに自動的に変換すればよい．そこで，本論文では，CaboChaの学習を機能表現を考慮した訓練データで行うことによって，機能表現を考慮した係り受け解析器を実現する．訓練データの作成には，訓練の対象となる文の係り受け情報と文に存在する機能表現の情報を利用する．本論文の構成は以下の通りである．~節で，本論文の対象とする機能表現と，その機能表現候補の用法を表現するための判定ラベルについて述べる．~節で，機能表現検出をチャンク同定問題として定式化し，SVMを利用した機能表現のチャンキングについて説明し，機能表現検出器の検出性能の評価を行い，この検出器が，既存の解析系および人手によって規則を作成した手法と比べ，機能表現を高精度に検出できることを示す．~節では，機能表現検出器によって検出される機能表現を考慮した係り受け解析器について説明を行い，機能表現を考慮した係り受け解析器と従来の係り受け解析器を使った機能表現を考慮した最適な係り受け解析について述べ，実際に機能表現を考慮した係り受け解析の評価を行う．~節では，関連研究について述べ，最後に~節で結論を述べる．</section>
  <section title="機能表現およびその用法"/>
  <subsection title="用例データベース">森田らは，機能表現の中でも特に「単なる語の連接ではなく，表現形式全体として，個々の構成要素のプラス以上の独自の意味が生じている」表現を複合辞と呼び，個々の構成要素の意味から構成的に表現形式全体の意味を説明できるような表現とは区別している．現代語複合辞用例集（以下，複合辞用例集と呼ぶ）は，主要な125種類の複合辞について，用例を集成し，説明を加えたものである．日本語複合辞用例データベース（以下，用例データベースと呼ぶ）は，機能表現の機械処理を研究するための基礎データを提供することを目的として設計・編纂されたデータベースである．用例データベースは，複合辞用例集に収録されている125種類の複合辞および，その異形（合計337種類の機能表現）を対象として，機能表現候補と一致する表記のリストと，個々の機能表現候補に対して最大50個の用例を収録している．また，用例は，毎日新聞1995年から収集されている．そして，各機能表現候補が文中において果たしている働きを，tbl:判定ラベル体系および次節に示す6種類の判定ラベルのうちから人手で判定し，付与している．</subsection>
  <subsection title="判定ラベル体系">判定ラベルとは，機能表現候補が文中でどのような働きをしているかを表すラベルであり，用例データベースではtbl:判定ラベル体系の通り，6種類のラベルが設定されている．以下，個々の判定ラベルについて説明する．用例データベースでは，IPA品詞体系（THiMCO97）の形態素解析用辞書に登録されている語から，「助詞・格助詞・連語」として登録されている語を取り除いた残りの語を，語としている．そして，ある機能表現候補が，1個以上の語，複合辞または慣用表現からなる列である場合，その候補は判定単位として適切であるが，それ以外の場合は，その候補は判定単位として不適切であるとして，判定ラベルBを付与している．例えば，tbl:判定ラベル体系中のex:A43-2000:Bに含まれる機能表現候補「にかけて」は，「心配する」という意味の慣用表現「気にかける」の一部が活用した形であり，先に述べた条件を満たしていない．したがって，ex:A43-2000:Bには，判定ラベルBが付与される．判定ラベルYは，機能表現候補の読みが，判定対象となっている機能表現の読みと一致していないことを表す．例えば，「AうえでB」という形で，「Aした後でB」という出来事の継起関係を表す機能表現「うえで」の用例としてtbl:判定ラベル体系中のex:A12-1000:Yを判定する場合を考える．この場合，機能表現候補の読み「じょうで」と，判定対象となっている機能表現の読み「うえで」が一致していないので．判定ラベルYを付与する．判定ラベルCは，機能表現候補に内容的に働いている語が含まれていることを表す．例えば，tbl:判定ラベル体系中のex:A56-1000:Cの機能表現候補に含まれる動詞「とる」は本来の意味で内容的に働いているので，判定ラベルとしてCを付与する．判定ラベルF,A,Mは，機能表現候補が機能的に働いているとき，その機能を区別するためのラベルである．判定ラベルFは，機能表現候補が複合辞用例集で説明されている用法で働いていることを表し，判定ラベルAは，機能表現候補が接続詞的に働いていることを表す．判定ラベルMは，これら以外の機能的な働きをしていることを表す．例として，機能表現候補「ところで」の用例としてtbl:判定ラベル体系中のex:A22-1000:F（）を判定する場合を考える．ex:A22-1000:Fでは，複合辞用例集で説明されている通りに逆接の働きをしているので，判定ラベルFを付与する．ex:A22-1000:Aでは，文頭で接続詞的に働いているので，判定ラベルAを付与する．ex:A22-1000:Mでは，形式名詞「ところ」を含めて機能的に働いているので，判定ラベルMを付与する．本論文では，判定ラベルF,A,Mが付与される機能表現候補を検出対象とする．</subsection>
  <section title="機能表現検出"/>
  <subsection title="SVMを用いたチャンキングによる機能表現検出"/>
  <subsubsection title="Support Vector Machines">サポートベクトルマシンは，素性空間を超平面で分割することによりデータを2つのクラスに分類する二値分類器である．2つのクラスを正例，負例とすると，学習データにおける正例と負例の間隔（マージン）を最大にする超平面を求め，それを用いて分類を行う．すなわち，以下の識別関数f(x)の値によってクラスを判別することと等価である．f(x)&amp;=sgn(^l_i=1_iy_iK(x_i,x)+b)[0.5ex]b&amp;=-_i,y_i=-1b_i+_i,y_i=1b_i2[0.5ex]b_i&amp;=^l_j=1_jy_jK(x_j,x_i)alignここでxは識別したい事例の文脈（素性の集合），x_iとy_i(i=1,...,l,y_i1,-1)は学習データの文脈とクラスである．また，関数sgn(x)は，x0のときに1，x&lt;0のときに-1となる二値関数である．各_iは，式()と式()の制約のもとで式()のL()を最大にするものである．L()&amp;=^l_i=1_i-12^l_i,j=1_i_jy_iy_jK(x_i,x_j)&amp;0_iC,,(i=1,...,l)&amp;^l_i=1_iy_i=0align関数Kはカーネル関数と呼ばれ，様々なものが提案されているが，本論文では次式で定義される多項式カーネルを用いる．ここで，C,dは実験的に設定される定数である．予備実験を行い，次数dの値として1,2,3の3通りを検討した．d=2,3とした場合はF値に大きな差はなかったが，d=1とするとF値がかなり悪化した．ただし，d=3とした場合は，d=2とした場合に比べて，学習時間がかなり増加したため，本論文では，次数dの値として2を用いる．また，予備実験において，マージンCの値として1,0.1,0.01,0.001,0.0001の5通りを検討したところ，F値に大きな差が見られなかったため，本論文ではマージンCの値として1を用いる．</subsubsection>
  <subsubsection title="チャンクタグの表現法">本論文では，検出対象とする機能表現全てに共通のチャンクタグを，形態素を単位として付与するという手順で，機能表現検出を行う．チャンクタグは，そのチャンクタグが付与された形態素が，検出対象とする機能表現のいずれかに含まれるか否かを表し，チャンクの範囲を示す要素とチャンクの用法を示す要素という2つの要素からなる．以下，本論文で用いたチャンクタグについて詳細を述べる．チャンクの範囲を示す要素の表現法としては，以下で示すようなIOB2フォーマットが広く利用されている．本論文でも，このIOB2フォーマットを使用する．ただし，本論文ではIOB2フォーマットを，さらにtbl:chunktagのように機能表現候補の用法によって細分化したものを使用する．この表において，機能的用法とは，用例データベースで設定されている判定ラベルのうち，ラベルF,A,Mのいずれかが付与されたものを表し，内容的用法とは，判定ラベルのうち，ラベルC,Y,Bのいずれかが付与されたものを表している．本論文では，2つの用法のうち，機能的用法を検出する機能表現検出器を作成する．SVMは二値分類器であるため，そのままでは，2クラスの分類しか扱えない．本論文のようにクラス数が3以上の場合には，複数の二値分類器を組み合わせて拡張する必要がある．本論文では，拡張手法としては，広く利用されているペアワイズ法を用いる．ペアワイズ法とは，N個のクラスに属するデータを分類する時，異なる2つのクラスのあらゆる組み合わせに対する二値分類器を作り，得られたN(N-1)/2個の二値分類器の多数決により，クラスを決定する方法である．</subsubsection>
  <subsubsection title="素性">学習解析に用いる素性について説明する．文頭からi番目の形態素m_iに対して与えられる素性F_iは，形態素素性MF(m_i)，チャンク素性CF(i)，チャンク文脈素性OF(i)の3つ組として，次式によって定義される．形態素素性MF(m_i)は，形態素解析器によって形態素m_iに付与される情報である．本論文では，IPA品詞体系（THiMCO97）の形態素解析用辞書に基づいて動作する形態素解析器ChaSenによる形態素解析結果を入力としているため，以下の10種類の情報（表層形，品詞，品詞細分類13，活用型，活用形，原形，読み，発音）を形態素素性として用いた．チャンク素性CF(i)とチャンク文脈素性OF(i)は，i番目の位置に出現している機能表現候補に基づいて定まる素性である．今，下図のような形態素列m_jm_im_kからなる機能表現候補Eが存在したとする．チャンク素性CF(i)は，i番目の位置に出現している機能表現候補Eを構成している形態素の数（機能表現候補の長さ）と，機能表現候補中における形態素m_iの相対的位置の情報の2つ組である．チャンク文脈素性OF(i)は，i番目の位置に出現している機能表現候補の直前2形態素および直後2形態素の形態素素性とチャンク素性の組である．すなわち，i番目の位置に対するCF(i)およびOF(i)は次式で表される．CF(i)&amp;=k-j+1,;;i-j+1(i)&amp;=~MF(m_j-2),CF(m_j-2),MF(m_j-1),CF(m_j-1),&amp;~~MF(m_k+1),CF(m_k+1),MF(m_k+2),CF(m_k+2)~align*機能表現検出においては，1つの文中に，複数の機能表現候補が部分的に重複して現れる場合を考慮する必要がある．ここでは，そのような場合のチャンク素性とチャンク文脈素性の付与方法について考える．複数の機能表現候補が部分的に重複して現れている場合，それらの候補全てに基づいてチャンク素性とチャンク文脈素性を付与するという方法と，それらの候補から何らかの基準を用いて1つの候補を選択し，選択された候補に基づいてチャンク素性とチャンク文脈素性を付与するという方法が考えられる．前者の方法で付与された素性を参照して機械学習を行うには，重複する可能性がある機能表現の全ての組み合わせに対して十分な量の学習事例が必要であるが，そのような学習事例を準備することは現実的ではない．そのため，本論文では，後者の方法を採り，次の優先順序に従って選ばれた1つの機能表現候補に基づいて，チャンク素性とチャンク文脈素性を付与することにする．例えば，ex:nakutehaikemasenには，「なくてはいけません」および「てはいけません」という2つの機能表現候補が，部分的に重複して現れている．慎重にし0ptなく0ptてはいけません．	exampleこの場合，「なくてはいけません」という機能表現候補が，「てはいけません」という機能表現候補に比べて，より左の形態素から始まっているので，「なくてはいけません」という機能表現候補に基づいて，チャンク素性とチャンク文脈素性を付与する．また，ex:toiumononoには，「という」および「というものの」という2つの機能表現候補が，部分的に重複して現れている．それが試合0ptという0ptものの0pt難しさだ．	exampleこの場合，2つの機能表現候補の先頭の形態素は同一であるため，より形態素数が多い候補「というものの」に基づいて，チャンク素性とチャンク文脈素性を付与する．i番目の形態素に対するチャンクタグをc_iとすると，チャンクタグc_iの学習・解析を行う場合に用いる素性として，i番目の形態素および前後2形態素に付与された素性F_i-2,F_i-1,F_i,F_i+1,F_i+2と，直前2形態素に付与されたチャンクタグc_i-2,c_i-1を用いる(yamcha)．解析時には，解析によって得られたチャンクタグを，直前2形態素に付与されたチャンクタグとして順に利用して，解析を行う．前後3形態素の素性と直前3形態素のチャンクタグを用いて学習・解析を行う予備実験も行ったが，前後2形態素の素性と直前2形態素のチャンクタグを用いた場合に比べて，殆んど性能が変わらなかったため，前後2形態素の素性と直前2形態素のチャンクタグを用いる．</subsubsection>
  <subsection title="実験と考察">本論文で提案する機能表現検出器に対して，学習および解析を行い，各ベースラインと性能を比較した．</subsection>
  <subsubsection title="データセット">文を単位として学習を行うには，文中に現れる全ての機能表現候補に対して判定ラベルが付与されたデータが必要である．本論文では，判別が必要な111表現のなかでも，新聞記事においても，機能的用法と内容的用法の両方が一定の割合で出現する59表現を対象とする．そして，これらの59表現に対する用例として用例データベースに収録されている2583例文について，これらの例文に含まれている全ての機能表現候補に判定ラベルを付与した．さらに，この例文の内，京都テキストコーパスに含まれる文と重複する154文を除いた．本論文では，この2429文（各表現について20用例以上収録）を機能表現検出器の訓練データとして使用する．ただし，用例データベースでは，機能表現候補の先頭と末尾が形態素境界と一致しない候補にも判定ラベルが付与されているが，本論文では，形態素解析結果に基づいて機能表現を検出する立場をとるため，そのような機能表現候補に対する判定ラベルは取り除くことにする．具体的には，以下のような処理を行った．最初に，用例データベースに収録されている用例を，IPA品詞体系の形態素解析用辞書に基づいて動作する形態素解析器ChaSenを用いて形態素解析した．次に，形態素解析結果中に，形態素解析用辞書に「助詞・格助詞・連語」や「接続詞」として登録されており，かつ実験の対象である59表現となる複合語が含まれていた場合は，その複合語を，構成要素である形態素の列に置き換えた．このようにして得られた形態素解析結果と機能表現候補を照合し，先頭と末尾が形態素境界と一致しなかった判定ラベルを取り除いた．また，機能表現検出器の評価データとしては，京都テキストコーパスに収録されている文を対象とし，その文に含まれている全ての機能表現候補に対して，判定ラベルを付与したものを使用した．訓練・評価データに含まれる各用法の数と，全形態素数をtbl:datasetに示す．1つの例文に，複数の機能表現候補が出現する場合があるため，機能表現候補の総数は，例文の総数よりも多くなっている．また，評価データ（京都テキストコーパス）における機能表現候補の分布は，tbl:kyoto_FE_freq1の通りである．tbl:kyoto_FE_freq1には，京都テキストコーパスにおける機能表現の分布以外に，機能表現の用例データベースにおける分類，その分類に基づいた係り受け解析の学習の際に使用する品詞体系の情報が示されている．機能表現の分類には，接続詞相当の働きをするもの（接続詞型），助詞相当の働きをするもの（助詞型），助動詞相当の働きをするもの（助動詞型）の3種類存在する．さらに，助詞型の機能表現は，接続助詞相当のもの（接続辞類），格助詞相当のもの（連用辞類），連体助詞相当のもの（連体辞類）に細分類することができる．係り受け解析の学習の際に使用する品詞体系は，上で述べた機能表現の分類に基づいて作成されている．また，tbl:kyoto_FE_freq1には，「といっても」，「とはいえ」など，接続詞型と助詞型の二つの分類に重複して登場している表現がある．これは，「といっても」などの機能表現候補は，接続詞型，助詞型のどちらの機能表現にもなりうるからである．</subsubsection>
  <subsubsection title="評価尺度">実験を評価する際の尺度には，以下の式で表される精度，再現率，F値，および判別率を用いた．&amp;=[1zw]&amp;=[1zw]&amp;=2+[1zw]&amp;=align*</subsubsection>
  <subsubsection title="既存の解析系に対する評価基準">既存の解析系(JUMAN/KNPおよびChaSen/CaboCha)は，形態素解析および構文解析段階で処理が必要となる機能表現を，部分的に処理の対象としている．しかし，明示的に機能表現を取り扱うという立場は取っていないため，機能表現のチャンキングというタスクに対する既存の解析系の性能を評価するには，その出力をどのように解釈するかを定めておく必要がある．形態素解析器JUMANと構文解析器KNPの組み合わせでは，機能表現は以下のように処理される．最初に，接続詞として形態素解析用辞書に登録されている機能表現は，形態素解析時に検出される．次に，構文解析時に，解析規則に記述された特定の形態素列が現れると，直前の文節の一部としてまとめたり，直前の文節からの係り受けのみを受けるように制約を加えて，機能表現である可能性を考慮した解析を行う．一方，IPA品詞体系（THiMCO97）の形態素解析用辞書を用いた形態素解析器ChaSenと，京都テキストコーパスから機械学習したモデルを用いた構文解析器CaboChaの組合わせでは，機能表現は以下のように処理される．最初に，形態素解析用辞書に「助詞・格助詞・連語」や「接続詞」として登録されている機能表現は，形態素解析時に検出される．また，「ざるを得ない」などの表現は直前の文節の一部としてまとめられ，機能的な表現として解析される．既存の解析系でも，一部の機能表現については，機能的な働きをしていることを考慮した解析が行われているが，その対応状況は不十分である．判定ラベルF,A,Mのいずれかが付与されている用例の内，少なくとも1つの用例が，機能的に働いている可能性を考慮して解析され，かつ，判定ラベルC,Y,Bのいずれかが付与された用例の内，少なくとも1つの用例が，機能的に働いている可能性を考慮せずに解析されている場合，その機能表現は，用法が正しく区別される可能性があるとする．用例データベースに50用例が収録されている表現で，かつ，機能的な意味で用いられている場合と，それ以外の意味で用いられている場合の両方が適度な割合で出現する表現は，59種類ある．その内，JUMAN/KNPによって用法が正しく区別される可能性がある表現は，23種類である．一方，ChaSen/CaboChaによって用法が正しく区別される可能性がある表現は21種類である．また，用例データベースに収録されている337表現全体では，新聞上の実際の用法の割合に関係なく識別が必要と思われる表現は，111種類である．その内，JUMAN/KNPによって用法が正しく区別される可能性がある表現は43種類，ChaSen/CaboChaによって用法が正しく区別される可能性がある表現は40種類である．</subsubsection>
  <subsubsection title="評価結果">本論文で提案する機能表現検出器と，各ベースラインの検出性能をtab:kekka_gaiyouに示す．tab:kekka_gaiyouにおいて，「頻度最大の判定ラベル」とは，全ての候補部分に対して頻度最大の判定ラベル（機能的用法）を付与した場合の検出性能である．「人手作成の規則による検出器」は，による検出性能である．tab:kekka_gaiyou中の「CRFを用いた検出器」は，ConditionalRandomFileds(CRF)によって学習・解析を行った場合の検出性能である．CRFとは，系列ラベリング問題のために設計された識別モデルであり，正しい系列ラベリングを他の全ラベリング候補と弁別するような学習を行う．本論文では，CRFによる学習・解析用ツールとしてCRF++を利用した．素性としては，前後2形態素の形態素素性，チャンク素性，チャンク文脈素性と，直前2形態素のチャンクタグを用いた．学習時には，事前分布としてGaussianPriorを用いて事後確率を最大化することにより，パラメータを正則化した．その際のハイパーパラメータとしては，1,2,3,4,5の5通りの値について予備実験を行い，最も良い性能を示した1を採用した．tab:kekka_gaiyou中の「SVMを用いた検出器」は，本論文の提案するSVMによるチャンキング手法による検出性能である．表より，提案手法は，学習・解析に用いた素性に関わらず，ベースラインおよび人手作成の規則による検出よりも，高いF値を示した．また，提案手法は，CRFを用いた検出器よりも，高いF値を示した．tab:kekka_gaiyouを見ると，「JUMAN/KNP」，「ChaSen/CaboCha」が他の手法に比べて著しく性能が悪いのがわかる．これは，節で述べたように，「JUMAN/KNP」，「ChaSen/CaboCha」が取り扱っている機能表現が，本実験の対象である59表現の内，23表現，21表現となっているのが，一つの原因である．もう一つの原因は，評価対象の大部分を占める「という」という表現に対する再現率が，両解析系において，著しく低いということである．学習・解析に用いた素性の違いによる性能の違いを検討すると，形態素素性のみを用いた場合よりも形態素素性とチャンク素性を併用した場合の方が，形態素素性とチャンク素性を併用した場合よりも形態素素性，チャンク素性，チャンク文脈素性すべてを使用した場合の方が検出性能がすぐれていることから，チャンク素性とチャンク文脈素性は，機能表現を検出するための素性として適当であったといえる．全ての素性を用いて学習と解析を行った機能表現検出器において，評価用データにおいて10用例以上存在し，他の表現と比較して極端に検出性能が悪く，F値が70に達しなかった表現は，「にあたり」の1表現である．例えば，ex:niatari-Fに含まれる「にあたり」は，「（新規参入という）時が来たのに当面して」という機能的な意味で用いられている．それに対して，ex:niatari-Cおよびex:niatari-C2に含まれる「にあたり」は，内容的に用いられている．新規参入にあたり，潜在的なニーズを掘り起こそうと，転勤族	を主な対象にした．お神酒の瓶が女性にあたり，けがをする事故があった．	米国の最先端の科学者が知恵を結集して原爆の開発にあたり，	一九四五年八月に広島・長崎に原爆が投下された．	exampleしかし，SVMを用いた検出器は，ex:niatari-Fとex:niatari-Cの用法を内容的用法として，また，ex:niatari-C2の用法を機能的用法として検出してしまい，用法を正しく判定できたのはex:niatari-Cのみであった．仮に，ex:niatari-Fとex:niatari-Cを区別することだけが必要ならば，直前がサ変名詞であることが有効な素性として働く可能性があるが，ex:niatari-C2は，そのような素性だけではうまく判定できない．このように，提案手法によっては適切に検出できない表現もごく少数ながら存在するが，他の表現については，tab:kekka_gaiyouに示したように適切に検出することができた．</subsubsection>
  <section title="機能表現を考慮した係り受け解析器"/>
  <subsection title="SVMを用いた統計的係り受け解析">本論文では，SVMを用いた統計的係り受け解析手法を利用して係り受け解析を行っている．工藤らの手法は，入力文Bに対する，条件付き確率P(D!!B)を最大にする係り受けパターン列Dを求める従来の手法と異なり，チャンキングを段階的に適用することによって係り受け解析を実現している．ここで，入力文Bとは，あらかじめ文節にまとめられ，属性付けされた文節列b_1,b_2,...,b_mを表しており，係り受けパターン列Dとは，Dep(1),Dep(2),...,Dep(m-1)を表している．ただし，Dep(i)は，文節b_iの係り先文節番号を示す．実際には，以下のようなアルゴリズムによって，段階的にチャンキングを行っている．入力文節すべてに対し，係り受けが未定であることを示すOタグを付与する．文末の文節を除くOタグが付与された文節に対し，直後の文節に係るか否かを判定．係る場合はDタグを付与．文末から2番目の文節には無条件にDタグを付与．Oタグの直後にあるすべてのDタグおよびその文節を削除する．残った文節が一つ（文末の文節）の場合は終了，それ以外は2．に戻る．このアルゴリズムによる解析例をfig:example_depに示す．fig:example_depでは，入力として「彼は彼女の温かい真心に感動した．」という文を文節単位に区切ったものが与えられている．そして，それぞれの文節に対して，係り受けが未定であることを示すOタグが付与される．その後，Oタグが付与されている文節に対し，直後の文節に係るか否かを判定する（文末から2番目の文節は無条件にDタグを付与）．すると，「温かい」，「真心に」という文節が直後の文節に係ると推定されるので，Dタグが付与される．その後，Oタグの直後にあるすべてのDタグおよびその文節を削除するので，「温かい」という文節を削除する．この文節を削除できる理由としては，削除される文節は，非交差条件を考慮すると，他の文節から修飾されることはなく，それ自身の係り先もすでに同定されているため，係り受け候補として考慮する必要がなくなるためである．以上の作業を，入力が「感動した．」という文節のみになるまで続けると，「彼は」が「感動した．」に，「彼女の」が「真心に」に，「温かい」が「真心に」に，「真心に」が「感動した．」に係ると判定することができる．このアルゴリズムにおける係り受け関係の同定には，SVMを用いている．この場合，従来手法では，訓練データ中の全ての2文節の候補を学習事例として抽出していた．しかし，このような抽出方法では，学習データを不必要に多くしてしまい，学習の効率が悪い．それに対して，工藤らの手法では，学習も解析時と同じアルゴリズムを採用している．つまり，学習で使われる文節のセットは，上のアルゴリズムにおいて隣り合う文節のみであるので，負例が不必要に増えるのを防ぐことができる．SVMの学習・解析に使用する素性は，tbl:featureに示す通りである．静的素性とは，文節の作成時に決定される素性を示しており，動的素性とは，係り関係そのものを素性としたものである．また，主辞とは文節内で品詞が特殊，助詞，接尾辞となるものを除き，文末に一番近い形態素を指し，語形とは文節内で品詞が特殊となるものを除き，文末に一番近い形態素のことを指す．具体的にfig:feature_for_cabochaの文において，「して」という文節と「参加した」という文節の係り受け関係の学習・解析に使われる素性について見てみる．まず，係り元，係り先の文節である「して」と「参加した」の主辞，語形の情報と，各文節における括弧の有無，句読点の有無，文節の位置（文頭，文末）が素性として使用される．次に文節間の素性として，文節の距離，文節の間に存在する全ての助詞の見出し，文節間の括弧の有無，文節間の句読点の有無が使用される．「して」と「参加した」の間には，「運動会に」という文節が存在している．よって，文節の距離としては，「2以上5以下」（素性として1，2以上5以下，6以上の3通りの素性を選択）が使用される．文節の間に存在する全ての助詞の見出しとしては，「運動会に」に含まれる「に」が使用される．括弧の有無は，「運動会に」には括弧が含まれていないので「0」，句読点の有無も，句読点が含まれていないので「0」が使用される．動的素性としては，係り先文節「参加した」に係る文節「運動会に」の語形見出し「に」と，係り元文節「して」に係る文節「保護者と」の語形見出し「と」と，係り先文節「参加した」が係る文節「私は，」の主辞品詞「名詞」が使用される．以上の素性の一覧をtbl:feature_for_cabochaに示す．</subsection>
  <subsection title="機能表現を考慮した係り受け解析">次に，本論文で提案する，機能表現を考慮した係り受け解析の流れをfig:flow1に示す．まず，ChaSenによって形態素解析を行う．次に，形態素解析結果に対して，機能表現検出器を用いて，機能表現検出を行う．その際，検出された機能表現は，構成している形態素列を連結し，一つの形態素として出力される．最後に，その出力結果に対して，機能表現を考慮した係り受け解析器を用いて，係り受け解析を行う．機能表現を考慮した係り受け解析器の学習において，形態素を連結して作られた機能表現に対して，新たに品詞名を付与する必要がある．用例データベースによると，機能表現は，接続詞相当の働きをするもの（接続詞型）と助詞相当の働きをするもの（助詞型），助動詞相当の働きをするもの（助動詞型）に分類することができる．さらに，助詞型の機能表現は，接続助詞相当のもの（接続辞類），格助詞相当のもの（連用辞類），連体助詞相当のもの（連体辞類）に細分類することができる．そこで，本論文では，tbl:kyoto_FE_freq1のような品詞体系を採用した．そして，現代語複合辞用例集~に掲載されている各機能表現と品詞分類との対応に基づいて，機能表現への品詞の付与を行った．特に，接続詞型になる可能性のある機能表現については，文頭に出現した場合は接続詞型とし，文頭以外の場合は助詞型とした．本論文では，SVMを用いた統計的係り受け解析手法の学習・解析ツールとしてCaboChaを利用して，機能表現を考慮した係り受け解析器を実現している．その際に，CaboChaの係り受け解析における訓練データを，機能表現を考慮したものに変換している．機能表現を考慮した係り受け解析の訓練データを作成するために必要な情報は二つある．一つは，既存の係り受け情報付与済みコーパスから得られる係り受け関係の情報である．もう一つは，対象文における機能表現の情報である．この二つの情報を用いてfig:学習の流れの流れで，訓練データを作成し，学習を行っている．fig:学習の流れの訓練データ作成モジュールでは，末尾の文節から順に以下の手順に従って処理を行っている．fig:訓練データ作成の流れに，機能表現を考慮した係り受け解析の訓練データ作成の例を示す．fig:訓練データ作成の流れ中には，「にあたり」という機能表現が存在している．よって，まず格助詞「に」と動詞「あたる」の連用形「あたり」の連結を行う．それに伴い，「年頭に」という文節と「あたり」という文節の連結を行う．連結された「年頭にあたり」という文節の係り先は，「あたり」の係り先を採用する．次に，「年頭にあたり」以降の文節の文節IDと，「年頭にあたり」以降の文節に係る文節の係り先文節IDに対して変更を加える．このような作業をすることによって，機能表現を考慮していない係り受け解析の訓練データを，機能表現を考慮したものに変換していく．機能表現を考慮しない係り受け解析の学習(fig:feature_for_cabocha1)と機能表現を考慮した係り受け解析の学習(fig:feature_for_cabocha2)の間では，学習に使用する素性が異なる．以下では，fig:feature_for_cabocha1における「して」という文節，および，fig:feature_for_cabocha2における「保護者として」という文節と，「参加した」という文節の間の係り受け関係に注目する．まず，fig:feature_for_cabocha2においては，文節の区切りが機能表現を考慮したものになっている．それによって，注目する係り受け関係の係り元文節が，fig:feature_for_cabocha1では「して」という文節なのに対し，fig:feature_for_cabocha2では「保護者として」となる．この違いによって，tbl:feature_change_for_cabochaに示すように，実際に学習・解析に使用する素性の間にも差違が生じる．具体的には，係り元の文節が「して」から「保護者として」と変化することによって，係り元の主辞が「し」から「保護」に，係り元の語形が「て」から「として」に変化している．また，係り元の文節に係る文節も「保護者と」から「甥の」に変化している．このように学習・解析に使用する素性を機能表現を考慮したものにすることによって，機能表現を考慮した係り受け解析が実現される．</subsection>
  <subsubsection title="評価結果および考察">機能表現を考慮した係り受け解析器と各ベースラインの精度をtbl:cabocha_resultに示す．評価においては，京都テキストコーパスを訓練・評価データとする10分割交差検定を行った．tbl:cabocha_result中の「CaboCha（機能表現抜き）」は，IPAdic辞書に連語として登録されている機能表現の内，評価対象の機能表現にあたるものを機能表現を構成している形態素に分解し，CaboChaの訓練を再度行ったものである．それらの機能表現は，59表現中「ところが」，「にあたって」，「にあたり」，「にかけて」，「に従い」，「につき」，「につけ」，「にとり」，「にかけ」，「として」，「をめぐる」，「という」，「といった」の13表現である．「CaboCha（オリジナル）」は，上記の連語に対して構成形態素への分解を行わず，CaboChaの訓練を再度行ったものである．また，機能表現を考慮した係り受け解析では，機能表現判定ラベルとして，~節で述べた検出器により出力された結果を用いた場合，および，人手で付与した正解判定ラベルを用いた場合の二通りを評価した．tbl:cabocha_resultを見ると，提案手法は，係り先精度については，ベースラインとの差を見ることができなかったが，係り元精度については，ベースラインと比べ統計的に有意な改善（有意水準5%）が見られた7096)およびベースライン（CaboCha（機能表現抜き）の係り元精度0.725(=51487100)の母比率の差の検定による．．よって，機能表現検出や，機能表現を考慮することが，係り元の推定に特に効果的であることがわかった．係り元の推定が改善された事例においては，機能表現を構成している形態素列を独立に扱うのではなく，一つの機能表現として検出していることが効果的に働いていると考えられる．例えば，「として」の場合，構成要素である形態素列を独立に扱うと，depended_sample(a)の例文において，「チェチェン進行を」という文節が動詞を含む文節に係りやすいという特徴をもっているので，誤って「して」という文節に係ってしまう．それに対して，「として」を機能表現として扱った場合，depended_sample(b)のように，「チェチェン進行を」の係り先を正しく推定することができる．また，係り元の推定が改悪された事例においては，機能表現の検出ミスが改悪の主な原因であった．一方，係り先の推定が改善された事例においては，機能表現を構成している形態素列を独立した形態素として扱うのではなく，一つの機能表現として検出していることが効果的に働いていると考えられる．例えば，「として」の場合，構成要素である形態素列を独立に扱うと．depend_sample(a)のように構成要素の一つである動詞「する」の連用形「し」が，最も近くの動詞と並立に係ると誤判定されることがある．それに対して，「として」を機能表現として扱った場合，depend_sample(b)のように係り先を正しく判定できる．逆に，機能表現を考慮した係り受け解析によって，係り先の推定精度があまり改善されない原因としては，内容的用法と機能的用法とで，係り先の特徴が変化する表現がほとんどないということが挙げられる．例えば，『「絶対に勝つ」という自信満々な人もいた．』という文章において，「という」は内容的に働いており，その係り先は「人も」という文節である．また，『トップという名にこだわる人もいる．』という文章において，「という」は機能的に働いており，その係り先は「名に」という文節である．この様に，「という」は内容的用法であっても機能的用法であっても，名詞を含む文節に係る特徴がある．機能表現候補が内容的用法・機能的用法のいずれであるかということは，上で述べた通り，係り先の推定精度の改善にはあまり寄与しない．しかし，機能表現の係り先は，機能表現の品詞分類に依存する傾向がある．例えば，連用辞類の「として」は，動詞を含む文節に係るという特徴をもっているが，連体辞類の「という」は，動詞を含む文節には係らず，名詞を含む文節に係るという特徴を持っている．提案手法では，機能表現の品詞分類を行っており，機能表現の品詞を，相当する既存の品詞の細分類として扱うことによって，この問題を解決している．それに対して，CaboCha（オリジナル）では，全ての機能表現に対して，「助詞—格助詞—連語」という品詞を与え，機能表現の品詞分類を全く行っていない．このことが原因で，CaboCha（オリジナル）の係り先精度が，CaboCha（機能表現抜き）の係り先精度を下回っていると考えられる．</subsubsection>
  <section title="関連研究">は，話し言葉コーパスを対象コーパスとして，半自動で精度良く短単位・長単位の2種類の粒度の形態論的情報を付与する枠組みを提案している．この枠組みでは，なるべく少ない人的コストで話し言葉コーパス全体に2種類の粒度の形態素情報を付与するため，最初に短単位の解析を行い，次に，短単位の形態素情報を素性として，短単位をチャンキングすることによって長単位の形態素情報を付与するという手順を採っている．例えば，「という」という機能表現は，短単位列としては助詞「と」および動詞「いう」の連体形の2短単位に分割され，長単位としては助詞「という」という1長単位にチャンキングされる．短単位から長単位をチャンキングするための機械学習手法としては，最大エントロピー法(ME)とSVMを比較し，SVMがより優れていると報告している．内元らの研究は，話し言葉コーパス全体を対象としているのに対して，本論文では，機能表現に焦点をあてて検討を行っている点で異なる．そのため，内元らは話し言葉コーパス中の長単位全体に対する形態素解析精度の評価は行っているが，機能表現に特化した評価は行っていない．一方，本論文では，既存の解析系における機能表現の取り扱い状況を整理した上で，機能表現に特化した性能評価を行っている．また，本論文では，対象となる機能表現のリストを事前に用意しているため，形態素列のどの部分が機能表現として検出される可能性があるかという情報（チャンク素性およびチャンク文脈素性）を利用して，チャンキングを行うことができる．機械学習手法としては，CRFとSVMを比較し，SVMの方が検出性能が高いことを示している．は，機能表現や慣用表現を含む複数の形態素からなる定型的表現をできるだけ網羅的に収集し，機能表現間に類似度を定義して，機能表現の言い換えや機械翻訳に利用することを提案している．とは，日本語の文構造の解析を容易にするため，通常よりかなり長い文節を単位として解析を行うことを提案し，機能表現を含む大規模な長単位機能語辞書を作成している．しかし，これらの先行研究における日本語処理系においては，機能表現と同一の形態素列が内容的に振る舞う可能性が考慮されていない．とは，機能表現を考慮して，係り受け解析を実現している．では，接続詞として形態素解析辞書に登録されている機能表現は，形態素解析時に検出される．次に，構文解析時に，解析規則に記述された特定の形態素列が現れると，直前の文節の一部にまとめたり，直前の文節からの係り受けのみを受けるように制約を加えて，機能表現を考慮した係り受け解析を実現している．では，形態素解析辞書に「助詞・格助詞・連語」や「接続詞」として登録されている機能表現は，形態素解析時に検出される．また，「ざるを得ない」などの表現は直前の文節の一部としてまとめることによって，機能表現を考慮した係り受け解析を実現している．しかし，~節で述べた通り，これらの手法において考慮されている機能表現の数は，我々の一連の研究において対象とした機能表現の数よりも少ない．また，これらの研究では，機能表現検出が係り受け解析にどれだけ効果的かという評価を行っていない．一方，本論文では，評価対象を機能表現候補を含む文節に限定し，機能表現検出が係り受け解析にどのような影響を与えるのかを調べ．機能表現検出が，係り受け解析に効果的であることを示している．では，本論文の~節の内容に相当する機能表現のチャンキングについて述べられており，本論文では，この結果をふまえて，機能表現検出の結果を考慮した日本語係り受け解析手法（~節）を提案している．と本論文との差分は~節の内容に相当するが，技術的な内容を本論文の記述範囲で完結させるために，本論文では，~節を設けて，機能表現のチャンキングについても記述している．</section>
  <section title="結論">本論文では，機能表現検出と形態素解析は独立に実行可能であると仮定した上で，形態素を単位とするチャンク同定問題として機能表現検出タスクを定式化し，機械学習手法を適用して機能表現の検出を実現し，さらに，その機能表現検出を利用して日本語機能表現を考慮した係り受け解析を実現した．実際に，SVMを用いたチャンカーYamChaを利用して，形態素解析器ChaSenによる形態素解析結果を入力とする機能表現検出器を実装し，59種類の機能表現を対象として性能評価を行った．その結果，機械学習によって作成した機能表現検出器は，既存の解析系および人手で作成した規則を用いた検出器よりも，高精度に機能表現を検出できることを示した．係り受け解析に関しても，機能表現を考慮した訓練データから，係り受け解析・学習ツールをCaboChaを利用して学習を行い，機能表現検出器の解析結果を入力とす日本語機能表現を考慮した係り受け解析器を実装した．59種類の機能表現を対象とした評価実験において，総体的に従来のCaboChaよりもよい性能を示すことができた．今後の研究課題として，対象とする機能表現の種類を増やし，その性能を評価することを計画している．また，格解析との統合的解析の実現により，解析性能をさらに改善することが期待できると考えている．document</section>
</root>
