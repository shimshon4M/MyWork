<?xml version="1.0" ?>
<root>
  <title>痕跡処理のためのGLR法の拡張</title>
  <author>五百川明宮崎正弘</author>
  <jabstract>本論文では，GLR法に基づく痕跡処理の手法を示す．痕跡という考え方は，チョムスキーの痕跡理論で導入されたものである．痕跡とは，文の構成素がその文中の別の位置に移動することによって生じた欠落部分に残されると考えられるものである．構文解析において，解析系が文に含まれる痕跡を検出し，その部分に対応する構成素を補完することができると，痕跡のための特別な文法規則を用意する必要がなくなり，文法規則の数が抑えられる．これによって，文法全体の見通しが良くなり，文法記述者の負担が軽減する．GLR法は効率の良い構文解析法として知られるが，痕跡処理については考慮されていない．本論文では，GLR法に基づいて痕跡処理を実現しようとするときに問題となる点を明らかにし，それに対する解決方法を示す．主たる問題は，ある文法規則中の痕跡の記述が，その痕跡とは関係のない文法規則に基づく解析に影響を与え，誤った痕跡検出を引き起す，というものである．本論文で示す手法では，この問題を状態の構成を工夫することで解決する．</jabstract>
  <jkeywords>構文解析，GLR法，痕跡処理</jkeywords>
  <subsubsection title="">*関数CLOSURE関数CLOSUREは，与えられた項の集合Iから，次の手順でIの閉包CLOSURE(I)を求める．与えられた項の集合Iに含まれる，すべての項をその閉包CLOSURE(I)に加える．項[AB]がCLOSURE(I)に含まれ，文法規則Bが存在するとき，項[B]がCLOSURE(I)に含まれていなければ，これをCLOSURE(I)に加える．加えるべき項がなくなるまで，これを繰り返す．ここで，A，Bは非終端カテゴリを，，，は非終端カテゴリおよび品詞からなるカテゴリ列を表す．</subsubsection>
  <section title="はじめに">本論文では，GLR法に基づく痕跡処理の手法を示す．痕跡という考え方は，チョムスキーの痕跡理論で導入されたものである．痕跡とは，文の構成素がその文中の別の位置に移動することによって生じた欠落部分に残されると考えられるものである．例えば，``Achildwhohasatoysmiles.''という文では，`achild'がwhoの直後(右隣り)から現在の位置に移動することによって生じた欠落部分に痕跡が存在する．痕跡をtで表すと，この文は``Achildwhothasatoysmiles.''となる．構文解析において，解析系が文に含まれる痕跡を検出し，その部分に対応する構成素を補完することができると，痕跡のための特別な文法規則を用意する必要がなくなり，文法規則の数が抑えられる．これによって，文法全体の見通しが良くなり，文法記述者の負担が軽減する．GLR法は効率の良い構文解析法として知られるが，痕跡処理については考慮されていない．本論文では，GLR法に基づいて痕跡処理を実現しようとするときに問題となる点を明らかにし，それに対する解決方法を示す．これまでに，痕跡を扱うための文法の枠組みが提案されるとともに，それらを用いた痕跡処理の手法が示されている．これらのうち痕跡の扱いに関する初期の考え方として，ATNGのHOLD機構，PereiraによるXGのXリストが知られている．本論文で示す手法では，XGでのXリストの考え方と基本的に同じものを用いる．</section>
  <section title="GLR法">本章では，本論文で示す手法の基となるGLR法について簡単に述べる．GLR法では，次に示す項の集合によって解析系の状態というものが定義される．そして，解析系がLR構文解析表に従ってある状態から他の状態へと遷移することで解析が進められる．項とは，文法規則に解析経過を示すドット記号`・'を付加したものである．ドット記号は文法規則の右辺に付加され，その左側のカテゴリは既に解析済みであり，その右隣りのカテゴリがその後の解析の対象となることを示す．[svp]は項の一例であるが，これは「現時点までにカテゴリnpの解析が終了し，次にカテゴリvpの解析を開始する．」ということを示す．状態を構成する項の集合は，与えられたCFGに文法規則[S'S]を加えて得られる文法から，次に示す関数CLOSUREおよびGOTOによって求められる．ここで，Sは開始記号を表す．</section>
  <section title="文法記述形式">本論文で示す手法では，文法記述形式として今野らによるXGSを用いる．これは，GLR法で用いられるCFGそのままでは痕跡を扱えないためである．XGSは，痕跡を容易に扱えるように，補強CFGの一つであるDCGを拡張したものである．XGSでは，次に示すスラッシュ記法を用いて痕跡を記述する．スラッシュ記法では，スラッシュと呼ばれる記号`/'を使用して，非終端カテゴリの記述に痕跡の記述を追加する．`relC/np'はスラッシュ記法を用いた記述の一例であるが，これは「非終端カテゴリrelCを根とする解析木が作られたとき，その根の下に痕跡を直接構成素として持つカテゴリnpが一つ存在する．」という意味を持つ．また，スラッシュ`/'の直後(右隣り)に記述されたカテゴリは，スラッシュカテゴリと呼ばれる．`relC/np'の例では，カテゴリnpはスラッシュカテゴリである．XGSでの文法記述例を図に示す．また，この文法を使用した場合の，例文``Achildwhohasatoysmiles.''に対する解析木を図に示す．</section>
  <section title="痕跡検出">解析系は，文に含まれる痕跡を検出するために，痕跡となるカテゴリを保持しなければならない．本論文で示す手法では，痕跡となるカテゴリの保持に，XGでのXリストと同じ手法を用いる．つまり，痕跡となるカテゴリの保持にスタックを使用する．ここでは，このスタックを便宜的にXリストと呼ぶことにする．Xリストへのプッシュは次のようにおこなう．文法規則中のスラッシュ記法を処理するときに，そのスラッシュカテゴリをXリストにプッシュする．つまり，スラッシュ記法の直前(左隣り)にドット記号`・'のある項を含む状態に解析系が遷移するときに，そのスラッシュカテゴリをXリストにプッシュする．例えば，図の文法規則[npnprelC/np]では，relC/npの解析を開始するとき，つまり，項[npnprelC/np]を含む状態に解析系が遷移するときに，スラッシュカテゴリであるnpをXリストにプッシュする．Xリストからのポップは，痕跡を検出したときにおこなう．解析系は，Xリストの先頭にあるスラッシュカテゴリが痕跡として文中に存在すると判断したとき，そのスラッシュカテゴリをXリストからポップし，そのスラッシュカテゴリに対してLR構文解析表に定義されている動作に従って解析を続ける．痕跡の検出は，文のすべての単語間に痕跡の存在を仮定することでおこなう．解析が単語の境界に到達したときに，その時点でのXリストの先頭にあるスラッシュカテゴリに対して，LR構文解析表に動作が定義されているとき，その単語境界にそのスラッシュカテゴリが痕跡として存在すると判断する．一方，LR構文解析表に動作定義がない場合やXリストが空である場合には，その単語境界には痕跡は存在しないと判断する．自然言語の解析では，スラッシュカテゴリは，通常，非終端カテゴリである．痕跡の検出において，Xリストの先頭にあるスラッシュカテゴリが非終端カテゴリである場合には，そのスラッシュカテゴリを構成する左隅の品詞を先読み情報とした還元を考慮しなければならない．これを例を用いて次に説明する．使用する文法は図に示すものである．この文法からは図に示す各状態が構成される．例文として``Atoywhichamangivesachildmoves.''を使用する．ここで，aの品詞はdetであり，toy，man，childはn，whichはrelPron，givesはvt，movesはviとする．childまで解析が終了したとき，解析系の状態は状態9であり，Xリストの先頭にあるスラッシュカテゴリは非終端カテゴリnpである．ここでLR構文解析表を参照すると，状態9ではカテゴリnpに対する動作は定義されていない．したがって，解析系はchildとmovesの単語境界には痕跡は存在しないと判断する．しかし，実際にはカテゴリnpが痕跡として存在するので，この判断は正しくない．この判断の誤りは，文法規則[npdetn]による還元によって，aとchildから`achild'がまだ構成されていないことに起因する．この還元は，Xリストの先頭にあるスラッシュカテゴリnpを構成する左隅の品詞であるdetを先読み情報としておこなわれるべきものである．しかし，このスラッシュカテゴリnpは痕跡として存在するので，この品詞detが先読み情報として実際の文から得られることはない．そのため，このままではこの還元はおこなわれない．そこで，痕跡検出の手続きの一つとして，この還元をおこなう．これによって，解析系は一時的に状態7に遷移したのち，状態10に遷移する．ここでLR構文解析表を参照すると，カテゴリnpに対して状態12への遷移が定義されている．これによって，解析系はchildとmovesの単語境界にカテゴリnpの痕跡が存在すると判断する．これで痕跡が正しく検出されたことになる．2mm4.5cm痕跡検出において，文のすべての単語間に痕跡の存在を仮定する理由を次に示す．痕跡処理をおこなわずに痕跡を含む文を解析すると，通常，痕跡が存在する位置でその解析は失敗する．そこで，痕跡処理において，解析が失敗する位置に痕跡が存在すると仮定して痕跡の検出をおこなうものとする．そうすると，``Achildwhomamangivesatoysmiles.''などの文では，``Achildwhomamangivesatoytsmiles.''と解析されてしまい，正しく``Achildwhomamangivestatoysmiles.''とは解析されない(tが痕跡を表す)．このため，文のすべての単語間に痕跡の存在を仮定し痕跡の検出をおこなう．痕跡が存在するか否かの判断は，LR構文解析表を参照することで即座におこなわれる．このため，純粋なボトムアップ法での場合のような無駄な処理はおこなわれない．また逆に，文のすべての単語間に痕跡の存在を仮定して痕跡の検出をおこなうと，``Atoywhichamangivesachildmoves.''などの文では，``Atoywhichamangivestachildmoves.''と解析されてしまい，正しく``Atoywhichamangivesachildtmoves.''とは解析されない(tが痕跡を表す)．そこで，痕跡が存在すると判断される場合には，解析過程を分岐させ横型探索によって，痕跡は存在しないものとした解析も同時におこなう．</section>
  <section title="状態の構成">XGSで記述された文法に対して，通常のGLR法での方法で，状態を構成する項の集合を求めると，次の(1)〜(3)に示す問題が生じる．ここで，説明上の都合により，slash項と芯という用語を導入する．slash項とは，スラッシュ記法の直前(左隣り)にドット記号`・'のある項のことである．図の項の集合I_2に含まれる項[npnp/np]は，slash項の一例である．また，slash項のうち，スラッシュ記法が右辺の左端に存在するものを左隅slash項と呼ぶことにする．芯とは，閉包を求めるときに関数CLOSUREに与えた項の集合に含まれる項のことである．図の項の集合I_2では，項[snpvp]と[npnprelC/np]が芯である．状態が芯としてslash項とそうでない項を含む場合，そのslash項ではない項の閉包として得られた項に基づく解析においても，その状態に遷移するときにXリストにプッシュしたスラッシュカテゴリが参照されてしまい，誤った痕跡の検出が引き起される．状態が芯として複数のslash項を含む場合，その状態に遷移するときにXリストにプッシュすべきスラッシュカテゴリが複数存在してしまう．状態が左隅slash項を含む場合，その左隅slash項の閉包として得られた項以外の項に基づく解析においても，その状態に遷移するときにXリストにプッシュしたスラッシュカテゴリが参照されてしまい，誤った痕跡の検出が引き起される．次に，これらの問題についてより具体的に述べるとともに，その解決方法を示す．</section>
  <subsection title="状態分割">図の状態2(I_2)には，(1)に示した問題がある．状態2に遷移するときにXリストにプッシュされたスラッシュカテゴリnpは，カテゴリrelCの解析においてのみ参照されるべきものである．しかし，このスラッシュカテゴリnpは，Xリスト上に存在する限り，カテゴリvpの解析，つまり，I_2のうちCLOSURE([snpvp])に含まれる項に基づく解析においても参照されてしまう．その結果，誤った痕跡の検出がおこなわれる．非文である``Achildhas.''を用いて，次により具体的に述べる．ここで，aの品詞はdet，childはn，hasはvtとする．childまで解析が終了したとき，解析系の状態は状態9であり，Xリストは空である．解析系は，次にhasを先読みし，その品詞であるvtを先読み情報として得る．ここで，文法規則[npn]による還元をおこない，一時的に状態0に遷移したのち状態2に遷移する．このとき，Xリストにスラッシュカテゴリnpをプッシュする．そして，先読み情報であるvtに従って状態7に遷移する．ここで，Xリストの先頭にあるスラッシュカテゴリnpに対してLR構文解析表に動作が定義されているため，誤りであるにも関わらず，解析系はhasの直後(右隣り)にこのスラッシュカテゴリnpが痕跡として存在すると判断する．そして，このスラッシュカテゴリnpをXリストからポップし，カテゴリnpに対してLR構文解析表に定義されている動作に従って状態10に遷移する．この後，解析系は(状態2)状態4(状態0)状態1と遷移し，この非文が正しいものであるかのように解析を終了する．この問題は，状態から芯であるslash項の閉包を取り出し，それによって新たな状態を構成することで解決できる．図の状態2の場合，CLOSURE([npnprelC/np])を取り出し，これによって新たな状態を構成する．この状態分割によって，図に示した状態を構成する項の集合は，図に示すものとなる．図の状態2は図では，状態21と状態22へと分割される．そして，解析系は状態22に遷移するときにのみ，スラッシュカテゴリnpをXリストにプッシュする．これによって，上述の誤った痕跡の検出を防ぐことができる．このように状態を分割しても問題が生じないのは，それぞれの芯の閉包を独立したものとして扱うことが可能なためである．また，このような状態分割は，状態遷移における非決定性をもたらす．例えば，図では状態0からのカテゴリnpによる遷移先として，状態21と状態22が存在する．これらの非決定性に対して，解析系は解析過程を分岐させ横型探索をおこなう．また，この状態分割の手法は(2)に示した問題に対しても有効である．状態が芯として[AB/C]や[DE/F]などのslash項を含む場合，この状態に遷移するときにXリストにプッシュすべきスラッシュカテゴリとしてCやFなどが存在してしまう．ここで，A，B，D，Eは非終端カテゴリ，，，，は非終端カテゴリおよび品詞からなるカテゴリ列，C，Fは非終端カテゴリあるいは品詞とする．そこで，CLOSURE([AB/C])やCLOSURE([DE/F])などをそれぞれ取り出し，これらによって新たな状態をそれぞれ構成する．そして，これらの新たに構成された状態に遷移するときにのみ，対応するスラッシュカテゴリをXリストにプッシュする．このように，状態分割の手法によって，状態遷移においてXリストにプッシュすべきスラッシュカテゴリを一つにすることができる．</subsection>
  <subsection title="依存関係をともなう状態分割">次に，(3)に示した問題について例を用いて述べる．通常のGLR法での方法によって，図に示す文法から，状態を構成する項の集合の一つとして図に示すI_xが得られる．この状態x(I_x)には，左隅slash項[relCs/np]が含まれ，(3)に示した問題がある．この状態xに遷移するときにXリストにプッシュされたスラッシュカテゴリnpは，カテゴリsの解析，つまり，CLOSURE([relCs/np])に含まれる項に基づく解析においてのみ参照されるべきものである．しかし，このスラッシュカテゴリnpは，Xリスト上に存在する限り，CLOSURE([relCs/np])には含まれない，[snpvp]などの項に基づく解析においても参照されてしまう．その結果，誤った痕跡の検出がおこなわれる．先に述べたような状態分割の手法によって，この問題を解決することは難しい．これは，左隅slash項の閉包とそれ以外の項とを独立したものとして扱えないためである．図のI_xでは，項[npnprelC]に基づく解析には，CLOSURE([relCs/np])に含まれる項に基づく解析が含まれる．このため，これらを独立したものとして扱うことはできない．状態xからCLOSURE([relCs/np])を取り出し，状態の分割を敢えておこなうなら，状態xは図に示す状態x1と状態x2に分割される．実際にこのような状態の分割をおこなった場合には，解析系はこれらの状態の間の依存関係を扱わなければならない．例えば，状態x2においてカテゴリrelCが構成された場合には，解析系は依存関係に従って一時的に状態x1に遷移し，そこからカテゴリrelCによる遷移をおこなわなければならない．次に，少し複雑な依存関係をともなう状態の分割をおこなった場合について述べる．ある状態y(I_y=CLOSURE([ABC]))が，y1(I_y1=CLOSURE([ABC])-I_y2)，y2(I_y2=CLOSURE([DE/F])-I_y3)，y3(I_y3=CLOSURE([GH/J]))の三つの状態に分割されるとする．また，CD，EGとする．ここで，A，C，D，E，G，Hは非終端カテゴリ，B，F，Jは非終端カテゴリあるいは品詞，，，，，，は非終端カテゴリおよび品詞からなるカテゴリ列，`'は0回以上の導出を表す．これらの状態の関係を図に示す．状態y1と状態y2は依存関係にあり，また，状態y2と状態y3も同様に依存関係にある．解析系が状態y3に遷移するときには，スラッシュカテゴリであるJをXリストにプッシュすることになるが，これに加えてFもプッシュしなければならない．これは，状態y3での解析が状態y2での解析の一部を構成するため，状態y2でのスラッシュカテゴリであるFが状態y3での解析においても参照可能でなければならないからである．このように，依存関係をともなう状態分割をおこなった場合には，解析系の構成が複雑なものになってしまう．3.5cmまた，状態に左隅slash項が再帰的に含まれる場合には，次に示す問題がある．通常のGLR法での方法によって，図に示す文法から，状態を構成する項の集合の一つとして図に示すI_zが得られる．この状態z(I_z)には，左隅slash項[名詞句連体修飾節/後置詞句名詞句]が再帰的に含まれている．状態zからCLOSURE([名詞句連体修飾節/後置詞句名詞句])を取り出し状態の分割をおこなうと，状態zは図に示す状態z1と状態z2に分割される．状態z1には，CLOSURE([名詞句連体修飾節/後置詞句名詞句])にも含まれる項[後置詞句名詞句後置詞]と[名詞句名詞]が含まれているが，これらは項[動詞句後置詞句他動詞]から導かれたものである．状態z2では，左隅slash項[名詞句連体修飾節/後置詞句名詞句]が再帰的に含まれているため，この項に基づく連体修飾節の解析が再帰的におこなわれ得る．この再帰的な解析では，その再帰の数だけスラッシュカテゴリである後置詞句を必要とする．しかし，どれだけ再帰的に解析がおこなわれるかを事前に知ることはできない．このため，状態z2への遷移において，どれだけの数の後置詞句をスラッシュカテゴリとしてXリストにプッシュすべきかを決定できない．このため，状態に左隅slash項が再帰的に含まれる場合には，状態分割の手法による対処は難しい．このように，状態分割の手法は(3)に示した問題に対して有効でない．そこで，文法規則の置き換えによる解決方法を次に示す．</subsection>
  <subsection title="文法規則の置き換え">左隅slash項は，右辺の左端にスラッシュ記法が存在する文法規則から生じる．したがって，そのような文法規則が存在しなければ，左隅slash項が現れることはない．そして，(3)に示した問題が起ることもない．そこで，文法に対する前処理として，右辺の左端にスラッシュ記法が存在する文法規則に対して，図に示す置き換えをおこない，スラッシュ記法を擬似的に右辺の左端から移動させる．これによって，左隅slash項が現れることはなくなり，(3)に示した問題は(1)あるいは(2)に示した問題に帰着される．そして，先に述べたように，これらの問題は状態分割の手法によって解決される．ここで，A，Bは非終端カテゴリ，Cは非終端カテゴリあるいは品詞，は非終端カテゴリあるいは品詞からなるカテゴリ列を表す．また，dummyはスラッシュ記法を擬似的に移動させるためだけに導入された非終端カテゴリであり，は空文字列を表す．図に示す文法では，前処理をおこなうと図に示すものとなる．</subsection>
  <section title="slash項に基づく状態遷移">slash項[AB/C]を含む状態において，Bが構成されたときに解析系がおこなう状態遷移には，二通りのものが考えられる．ここで，A，Bは非終端カテゴリ，Cは非終端カテゴリあるいは品詞，，は非終端カテゴリおよび品詞からなるカテゴリ列を表す．その一つは，B/Cによる状態遷移である．解析系は，この状態に遷移するときにXリストにプッシュしたスラッシュカテゴリCが痕跡検出によって既にポップされているとき，B/Cによる状態遷移をおこなう．もう一つは，単なるBによる状態遷移である．この状態遷移は，Xリストの内容とは無関係である．解析系は，LR構文解析表にBによる状態遷移が定義されているとき，これをおこなう．したがって，B/Cによる状態遷移と単なるBによる状態遷移をともにおこなう必要がある場合には，解析系は解析過程を分岐させ横型探索をおこなう．</section>
  <section title="複合名詞句制約">痕跡処理では，ロスの複合名詞句制約などのいわゆる「島制約」への対処が求められる．次に，ロスの複合名詞句制約について述べ，その後，それへの対処方法を示す．ロスの複合名詞句制約は，埋め込み文中の痕跡の位置に関する統語的な制約である．ロスの複合名詞句制約によれば，名詞句は文や名詞句の構造を二度越えて移動することはできない．この制約に違反する例を図に示す．図では，名詞句`atoy'がhasの直後(右隣り)から，`t_1hast_2'，そして，`themanknowsthechildwhot_1hast_2'の二つの埋め込み文を越えて文頭に移動したために，ロスの複合名詞句制約に違反する．XGSでは，ロスの複合名詞句制約を表現するために，open(&lt;)，close(&gt;)と呼ばれる記法が導入されている．この記法には，「`&lt;'と`&gt;'の外側の構成素と，`&lt;'と`&gt;'で囲まれたカテゴリの中の痕跡とは対応付けることはできない」という意味が与えられている．この記法の使用例を図に示す．図に示す文法では，関係節を表すrelCが`&lt;'と`&gt;'で囲まれているため，関係節内の痕跡がその外側の構成素と対応付けられることはない．これによって，関係節が多重に存在する文の解析において，ロスの複合名詞句制約が満たされることになる．本論文で示す手法では，open(&lt;)，close(&gt;)を次のように解析系に組み込む．文法規則中の`&lt;'と`&gt;'で囲まれたカテゴリを処理するときに，Xリストを一時的に空にする．つまり，`&lt;'と`&gt;'で囲まれたカテゴリの直前(左隣り)にドット記号`・'のある項を含む状態に遷移するときに，Xリストを一時的に空にする．そして，そのカテゴリの解析が終了したときに，Xリストの内容を元に戻す．このようなXリストの操作によって，open(&lt;)，close(&gt;)は解析系に組み込まれる．ここで，説明上の都合により，enclosed項という用語を導入する．enclosed項とは，`&lt;'と`&gt;'で囲まれたカテゴリの直前(左隣り)にドット記号`・'のある項のことである．また，enclosed項のうち，`&lt;'と`&gt;'で囲まれたカテゴリが右辺の左端に存在するものを左隅enclosed項と呼ぶことにする．通常のGLR法での方法によって，図に示す文法から，状態を構成する項の集合の一つとして図に示すI_sが得られる．この状態s(I_s)には，enclosed項であり，かつslash項である[npnp&lt;relC/np&gt;]が含まれている．したがって，解析系はこの状態sに遷移するときには，まず一時的にXリストを空にし，その後，スラッシュカテゴリであるnpをXリストにプッシュする．また，解析系は状態sからrelC/npによる状態遷移をおこなうときには，Xリストの内容をこの状態sに遷移する前のものに復元する．open(&lt;)，close(&gt;)を実現するXリスト操作による影響は，`&lt;'と`&gt;'で囲まれたカテゴリの解析，つまり，enclosed項の閉包に含まれる項に基づく解析に限定されなければならない．そうでなければ，検出されるべき痕跡が検出されない．open(&lt;)，close(&gt;)を用いて記述された文法に対して，通常のGLR法での方法で，状態を構成する項の集合を求めると，次の(1)，(2)に示す問題が生じる．状態が芯としてenclosed項とそうでない項を含む場合，そのenclosed項ではない項の閉包として得られた項に基づく解析に対しても，その状態に遷移するときにおこなわれたXリスト操作が影響し，痕跡が検出されなくなる．状態が左隅enclosed項を含む場合，その左隅enclosed項の閉包として得られた項以外の項に基づく解析に対しても，その状態に遷移するときにおこなわれたXリスト操作が影響し，痕跡が検出されなくなる．これらの問題は，5章で論じた問題と類似している．(1)に示す問題は，状態から芯であるenclosed項の閉包を取り出し，それによって新たな状態を構成することで解決できる．また，(2)に示す問題は，文法に対する前処理として，右辺の左端に`&lt;'と`&gt;'で囲まれたカテゴリが存在する文法規則に対して，図に示すものと同様な置き換えをおこない，`&lt;'と`&gt;'で囲まれたカテゴリを擬似的に右辺の左端から移動させることで解決できる．</section>
  <section title="動作例">本論文で示す手法を用いてパーザを構成した例を次に示す．DCGに対するGLRパーザとして論理型言語Prolog上に効率よく実装されたSGLRを拡張することでパーザを構成した．本論文では，このパーザをSGLR-plusと呼ぶことにする．SGLR-plusを使用して，``Achildwhohasatoysmiles.''という文を解析した様子を図に示す．SGLR-plus(痕跡処理あり)とSGLR(痕跡処理なし)を使用していくつかの文を解析した結果を次に示す．今回の解析では，それぞれ平叙文を概ね網羅する文法を使用した．また，SGLRは痕跡処理を持たないため，図と同様に，痕跡を含むカテゴリに対して，その痕跡に対応する構成素が欠けた文法規則を用意した．ただし，これらの解析では補強項での統語的制約のチェックはおこなわなかった．SGLR-plus，SGLRのそれぞれを使用した場合での文法規則数，解析系の状態数，項の総数を表に示す．SGLR-plusを使用した場合には，痕跡処理がおこなわれるため，SGLRを使用した場合と比較して3割ほど文法規則が減少している．次に示す英文を解析の対象とした．それぞれの英文に対する，解析に要した時間，得られた解析木の数，失敗した数を表に示す．Thekidswereskippingaboutinthepark.Thecoffeehassloppedoverintothesaucer.Thetroubleisthatshedoesnotlikeit.IwanttogotoFrance.Theyscatteredgravelontheroad.Hetoldmethathelikedbaseball.Icannotallowyoutobehavelikethat.Thechildwhohasatoysmiles.Janehasanunclewhoisverykind.ThebookwhichIboughtyesterdayisveryinteresting.IwantamanwhounderstandsEnglish.Thebookwhichthemanwhohadabagwhichlookedheavyboughtisdifficult.SGLR-plus，SGLRのそれぞれを使用した場合の解析時間を比較すると，SGLR-plusを使用した場合により多くの時間を要す傾向がある．一般に文法規則の増加は，非決定性の増加などによる処理量の増加を引き起す．今回の比較では，痕跡に関連する処理量がこれを上回ったため，この傾向が生じたと考える．この傾向は，痕跡を含まない(1)〜(7)の文の解析にも見られる．これは，痕跡処理を解析系に組み込むためにおこなった状態分割に関連して，非決定性が増加したためであると考える．SGLR-plusを使用した解析ではより多くの時間を要す傾向があるとは言え，対象とした文のうち，(12)以外のものの解析はおよそ数ミリ秒で終了している．(12)の文は複数の痕跡を含むため，SGLR-plusを使用した解析では，痕跡処理に関連する非決定性が増加するとともに失敗の数も増加する．この様子を表に示す．しかし，SGLRを使用した場合と比較すると，失敗の数ほど解析時間に差は生じていない．これは，誤りがLR構文解析表から即座に判定されるためであると考える．</section>
  <section title="おわりに">本論文では，効率の良い構文解析法として知られているGLR法に基づく痕跡処理の手法を示した．この手法では，文法記述形式としてXGSを使用し，XGでのXリストと基本的に同じ手法で痕跡を扱った．また，GLR法で文法規則が解析系の状態として集合的に扱われることから生じる問題を，状態の構成を工夫することで解決した．また，この手法によって，GLRパーザであるSGLRを拡張し痕跡処理を実現した．構成素の移動現象を自然に記述する枠組みとして，DCGにスラッシュ記法と下位範疇化制約という二つの概念を導入したものが，徳永らによって提案されている．この考え方を取り入れることが，今後の課題である．*パーザSGLRを提供していただいた東京工業大学大学院情報理工学研究科田中穂積教授，SGLRの開発者である故沼崎浩明氏，有用な意見をいただいた新潟大学宮崎研究室の学生諸君，に深く感謝致します．document</section>
</root>
