<?xml version="1.0" ?>
<root>
  <title>自然言語解析のためのMSLRパーザ・ツールキット</title>
  <author>白井清昭植木正裕橋本泰一徳永健伸田中穂積</author>
  <jabstract>本論文では，我々が現在公開している自然言語解析用ツール「MSLRパーザ・ツールキット」の特徴と機能について述べる．MSLRパーザは，一般化LR法の解析アルゴリズムを拡張し，日本語などの分かち書きされていない文の形態素解析と構文解析を同時に行うツールである．MSLRパーザを用いて解析を行う際には，まずLR表作成器を用いて，文法と接続表からLR表を作成する．このとき，LR表作成器は，接続表に記述された品詞間の接続制約を組み込んだLR表を生成する．このため，接続制約に違反する解析結果を受理しないLR表が作られるだけでなく，LR表の大きさを大幅に縮小することができる．次に，MSLRパーザは，作成されたLR表と辞書を用いて辞書引きによる単語分割と構文解析を同時に行い，その結果として構文木を出力する．さらに，MSLRパーザは，文中の括弧の組によって係り受けに関する部分的な制約が与えられた文を入力とし，その制約を満たす構文木のみを出力する機能を持つ．また，文脈依存性を若干反映した言語モデルのひとつである確率一般化LRモデル(PGLRモデル)を学習し，個々の構文木に対してPGLRモデルに基づく生成確率を計算し，解析結果の優先順位付けを行う機能も持つ．</jabstract>
  <jkeywords>形態素解析，構文解析，一般化LR法，パーザ</jkeywords>
  <section title="はじめに">我々は，1998年10月から自然言語解析用ツール「MSLRパーザ・ツールキット」を公開している~．MSLRパーザ(MorphologicalandSyntacticLRparser)は，一般化LR法の解析アルゴリズムを拡張し，単語区切りのない言語(日本語など)を主に対象とし，形態素解析と構文解析を同時に行うパーザである．本論文では，MSLRパーザ・ツールキットの特徴と機能について述べる．MSLRパーザを用いて文を解析する場合には，以下の3つが必要になる．本ツールキットでは，文法・辞書・接続表を自由に入れ換えることができる．すなわち，ユーザが独自に開発した文法や辞書を用いて，MSLRパーザによって文の解析を行うことが可能である．また，MSLRパーザ・ツールキットには日本語解析用の文法，辞書，接続表が含まれている．したがって，文法等を持っていないユーザでも，ツールキットに付属のものを用いて日本語文の形態素・構文解析を行うことができる．MSLRパーザはC言語で実装され，動作するOSはunixのみである．具体的には，以下のOSで動作することが確認されている．SunOS5.6DigitalUnix4.0IRIX6.5FreeBSD3.3Linux2.2.11,LinuxPPC(PC-Mind1.0.4)MSLRパーザを動作させるために必要なメモリ使用量・ディスク使用量は，使用する文法や辞書の規模に大きく依存する．例えば，ツールキットに付属の日本語解析用文法(規則数1,408)と辞書(登録単語数241,113)を用いる場合，50Mbyteのメモリと10Mbyteのディスク容量を必要とする．本ツールキットを用いた形態素・構文解析の流れを図~に示す．MSLRパーザの解析アルゴリズムは一般化LR法に基づいているため，まず最初にLR表作成器を用いて，文法と接続表からLR表を作成する．MSLRパーザは，作成されたLR表と辞書を参照しながら入力文の形態素・構文解析を行い，解析結果(構文木)を出力する．本ツールキットの主な特徴と機能は以下の通りである．MSLRパーザは，形態素解析と構文解析を同時に行う．まず最初に形態素解析を行い，その出力をもとに構文解析を行う逐次的な方法では，形態素解析の段階では文法などの構文的な制約を考慮しない場合が多く，その後の構文解析の段階で不適当と判断されるような無駄な解析結果も出力される．これに対し，MSLRパーザは形態的な情報(辞書，接続表)と構文的な情報(文法)を同時に用いて解析を行うため，このような無駄な解析結果を生成することはない．LR表作成器は，接続表に記述された品詞間の接続制約を組み込んだLR表を作成する．すなわち，LR表を作成する段階で品詞間の接続制約を考慮し，接続制約に違反する構文木を受理しないLR表を作る．さらに，品詞間の接続制約を組み込んだ場合，接続制約を組み込まない場合と比べてLR表の状態数・動作数を減らすことができ，メモリ使用量も小さくすることができるという利点がある．品詞間の接続制約は，接続表という形式で記述する代わりに，文法に組み込むことも可能である．しかしながら，接続制約を文法に組み込んだ場合，規則数が組み合わせ的に増大する．このため，文法作成者の負担が大きくなり，また作成されるLR表の大きさも大きくなるために望ましくない．このような理由から，本ツールキットでは，接続表と文法を独立に記述する枠組を採用している．平文を入力とした解析の他に，係り受けに関する部分的な制約を加えた文を入力とした解析を行うことができる．例えば，「太郎が渋谷で買った本を借りた」という文を解析する際に，次のような括弧付けによる制約を付けた文が入力されたときには，括弧付けと矛盾した解析結果は出力しない．[太郎が渋谷で買った]本を借りたdisplaymathすなわち，「太郎が」が「借りた」に係る以下のような解析結果は，Aの括弧付けが入力の括弧付けと矛盾(交差)しているために出力しない．[[太郎が][_A;[[渋谷で][買った]][[本を][借りた]]];_A]displaymathこの機能は，例えば前編集により係り受けに関する部分的な制約をあらかじめ文に付加してから解析を行い，構文的曖昧性を抑制する場合などに利用できる．確率一般化LRモデル~(ProbabilisticGeneralizedLRModel，以下PGLRモデル)を取り扱うことができる．PGLRモデルとは，一般化LR法の枠組において構文木の生成確率を与える確率モデルである．PGLRモデルに基づく構文木の生成確率は，統計的な意味での正しさの尺度を構文木に与えることができるので，構文的な曖昧性の解消に利用することができる．以下では，ここに挙げた本ツールキットの特徴と機能について詳しく説明する．節では品詞間の接続制約を組み込むLR表作成器について述べ，節ではMSLRパーザの概略について述べる．最後に節で本論文のまとめとMSLRパーザ・ツールキットの今後の開発方針について述べる．</section>
  <section title="LR表作成器">本節では，MSLRパーザ・ツールキットにおけるLR表作成器の機能と特徴について詳しく説明する．</section>
  <subsection title="3種類のLR表を作成する機能">一般化LR法で用いられるLR表には，SLR(SimpleLR),CLR(CanonicalLR),LALR(LookaheadLR)の3種類がある．我々のLR表作成器は，これら3種類のLR表を作成する機能を持つ．実際の自然言語文の解析では，最も状態数の少ないLALRが用いられる場合が多い．したがって，以後LR表といえばLALRを意味するものとする．これらのLR表の違いの詳細については文献~を参照していただきたい．</subsection>
  <subsection title="品詞間の接続制約を組み込む機能">本ツールキットにおけるLR表作成器の最も大きな特徴は，LR表に品詞間の接続制約を反映させることができる点にある．品詞間の接続制約をLR表に反映させるということは，接続制約に違反する構文木を生成する動作をLR表からあらかじめ除去することに相当する．このことを図~の文法CFG_1を例に説明する．CFG_1において，書き換え規則の右側にある数字は規則番号を表わす．また，終端記号は品詞である．CFG_1から通常のLR表作成アルゴリズムによって作成されたLR表を図~に示す．但し，図~のLR表はaction部のみであり，goto部は省略されている．今，このLR表に図~の接続表に記述された接続制約を反映させることを考える．図~の接続表において，行列要素(i,j)が1ならi行目の品詞x_iとj列目の品詞x_jがこの順序で連接可能であることを示し，(i,j)が0ならx_iとx_jが連接不可能であることを意味する．また，``''は文末を表わす特殊な品詞である．CFG_1では，VSを構成する品詞としてvs_5k,vs_5m,vs_5wが，VEを構成する品詞としてve_i,ve_ki,ve_maがあるので，規則(5)から，Vを構成する品詞列は33=9通りあることがわかる．これに対し，図~の接続表を考慮した場合，これら9通りの品詞列のうち``vs_5kve_ki''，``vs_5mve_ma''，``vs_5wve_i''の3組だけが接続制約を満たす．したがって，これら以外の品詞列は受理すべきではない．ここで，図~のLR表の状態4，先読み記号ve_iの欄にある11というに着目する．11は，CFG_1における規則(11)に対応した部分木を作ることを意味する(図~)．ところが，先読み記号がve_iであることから，``vs_5kve_i''という品詞列に対してこの動作を実行することになるが，この品詞列は図~の接続制約に違反する．同様に，図~において，``*''のついた動作もまた接続制約に違反する動作である．したがって，このような動作を事前にLR表から削除しておけば，接続制約に違反する解析結果の生成を防ぐことができる．接続制約に違反する動作をLR表から除去する方法としては，まず図~のように接続制約を考慮しないLR表を作成してから，接続制約に違反する動作をLR表から削除する方法が考えられる．しかしながら，文法の規模が大きくなると，接続制約を考慮しないLR表の大きさが非常に大きくなるために望ましくない．これに対して，本ツールキットでは，LR表を作成する段階で接続制約を考慮し，接続制約に違反する動作を除いたLR表を直接生成する方法を採用している．接続制約を組み込みながらLR表を作成するアルゴリズムの詳細については文献~を参照していただきたい．接続制約をLR表に組み込む主な利点としては以下の3つが挙げられる．接続制約を事前に組み込んだLR表を用いて解析を行った場合，解析時には品詞間の連接可能性をチェックする必要がないので，解析時の効率を上げることができる．接続制約に違反する構文木を生成する動作をLR表から除去することにより，LR表の状態数・動作数を大幅に減らし，メモリ使用量を小さくすることができる．品詞間の接続制約は，接続表として記述してからLR表に組み込む代わりに，書き換え規則の細分化によって組み込むこともできる．例えば，CFG_1の例では，規則(5)の代わりに，図~に挙げる3つの規則を導入すれば，接続制約を満たす品詞列のみ受理することができる．しかしながら，このように接続制約を組み込んだ文法を作成することは，規則数が組み合わせ的に増大するために望ましくない．品詞間の接続制約は，接続表として文法とは独立に記述し，LR表を作成する段階で接続制約を組み込む方が，最終的に得られるLR表の状態数・動作数も少なく，メモリ使用量を小さくすることができる．また，文法記述者の負担も減らすことができる．</subsection>
  <subsection title="評価実験">LR表に品詞間の接続制約を組み込む効果を調べる簡単な実験を行った．本ツールキットに付属されている日本語解析用の文法と接続表を用いて，品詞間の接続制約を組み込む場合と組み込まない場合のLR表を比較した．使用した文法の規則数は1,408，非終端記号数は218，終端記号数は537である．実験に使用した計算機はSunUltraEnterprise250Server(主記憶2GB，CPU周波数300MHz)である．結果を表~に示す．表~において，「CPU時間」はLR表作成に要したCPU時間を，「状態数」は作成されたLR表の状態の数を，「動作数」は作成されたLR表の動作(と)の数を示している．この表から，品詞間の接続制約を組み込むことによって，状態数はほとんど変わらないが，動作数は約半分に減ることがわかる．したがって，LR表のために必要なメモリ使用量を大幅に縮小することができる．一方，「CPU時間」は，接続制約を考慮する場合としない場合とでそれほど大きな差は見られなかった．一般に，接続制約を組み込む場合は，品詞間の連接可能性を調べながらLR表を作成するために，それに要する時間は長くなることが予想される．しかしながら，接続制約に違反する無駄なアイテムが生成されなくなることから，LR表作成に要する時間が短縮される効果も生じる．そのため，LR表作成時間が劇的に増大するわけではないことが実験的に確かめられた．</subsection>
  <section title="MSLRパーザ">本節では，MSLRパーザの機能と特徴について概説する．</section>
  <subsection title="形態素解析と構文解析を同時に行う機能">節で述べたように，MSLRパーザは形態素解析と構文解析を同時に行う．また，形態素・構文解析結果として構文木を出力する．例えば，図~の文法(CFG_1)，図~の接続表，図~の辞書を用いたときの「あいこにたのまれた」という文の解析結果(構文木)を図~に示す．実際には，MSLRパーザは以下のような括弧付けで表現された構文木を出力する．=0.6[&lt;S&gt;,[&lt;VP&gt;,[&lt;PP&gt;,[&lt;N&gt;,[noun,あいこ]],[&lt;P&gt;,[postp,に]]],[&lt;VP&gt;,[&lt;V&gt;,[&lt;VS&gt;,[vs_5m,たの]],[&lt;VE&gt;,[ve_ma,ま]]],[&lt;AX&gt;,[&lt;AX&gt;,[aux,れ]],[aux,た]]]]]verbatim=解析結果が複数ある場合には，その中からN個の構文木をランダムに選んで出力する．ただし，項で述べるPGLRモデルを用いる場合には，構文木の生成確率の大きい上位N個の構文木を取り出すことができる．また，Nの値は起動時のオプション指定により変更できる．MSLRパーザのアルゴリズムは，一般化LR法の構文解析アルゴリズムを拡張したものである．一般化LR法が通常は品詞列を入力とするのに対して，MSLRパーザは文字列を入力とし，辞書引きによる単語分割と構文解析を同時に行う．以下，一般化LR法とMSLRパーザの解析アルゴリズムとの違いを簡単に説明する．MSLRパーザの解析アルゴリズムの詳細については文献~を参照していただきたい．入力文が与えられたとき，品詞と品詞の間に位置番号をつける代わりに，図~のように入力文の文字間に位置番号をつける．解析が位置iまで進んだとき，位置iから始まる全ての単語を辞書引きし，その結果をスタックに登録する．例えば，図~の例文を図~の辞書を用いて解析した場合，位置0では``(あ,vs_5k)'',``(あ,vs_5w)'',``(あいこ,noun)''という3つの品詞付けの結果が解析スタックに登録される．これらの品詞付けの結果は，通常の一般化LR法における多品詞語と全く同様に取り扱われる．を実行して先読み記号をスタックにプッシュする際には，その品詞を構成する文字列の一番最後の位置まで解析スタックを延ばす．例えば，位置0でvs_5kという先読み記号(品詞)をプッシュする際には，vs_5kが位置0〜1に位置する単語「あ」の品詞であるので，スタックの先頭を位置1まで延ばす．そして，位置1から始まる単語の辞書引き結果をもとに以後の解析を進める．同様に，位置0でnounという品詞をプッシュする際には，nounが位置0〜3に位置する単語「あいこ」の品詞であるので，スタックの先頭を位置3まで延ばす．以後の解析は，位置3から始まる単語の辞書引き結果をもとに進められる．例文「あいこにたのまれた」を解析する際，形態素解析結果の候補としては以下の2つがある．文法CFG_1はb.の品詞列を受理しないが，形態素解析と構文解析を逐次的に行う方法では，形態素解析結果の候補としてa.,b.ともに出力し，それぞれの品詞列に対して構文解析が試みられる．これに対し，MSLRパーザは形態素解析と構文解析を同時に行い，文法に記述された構文的な制約で排除される形態素解析の結果を早期に取り除くことができるため，解析効率がよい．例えば，位置3まで解析が進んだとき，「あいこ」という文字列が図~の点線で囲まれた部分木を構成することがわかっている．このとき，位置3から始まる単語を辞書引きする際に，品詞列b.は受理されないという文法的な制約から，``(に,vs_1)''という品詞付けが適切でないことがわかる．具体的には，位置3におけるスタックトップの状態7において，``vs_1''を先読み記号とする動作が図~のLR表に存在しないことから，``(に,vs_1)''という辞書引き結果を含む解析はこの時点で中断される．したがって，誤りである形態素解析結果の候補b.を早期に取り除くことができる．このことは，MSLRパーザの大きな特徴の1つである．</subsection>
  <subsection title="括弧付けによる制約のついた入力文を解析する機能">MSLRパーザは括弧付けによる制約を加えた文を解析することができる．具体的には，MSLRパーザは次のような文字列を入力として，括弧付けに矛盾しない解析結果のみを出力する機能を持つ．この例では括弧による制約はひとつしかないが，括弧による制約は複数あってもよい．また，複数の制約が入れ子になっても構わない．以下に例を挙げる．上記の入力例において，``|*|''は括弧で示された範囲を支配する非終端記号に特に制約がないことを表わしている．これに対し，``|*|''の位置に非終端記号を指定することにより，括弧に矛盾する解析結果だけでなく，括弧で囲まれた文字列を支配する非終端記号を限定することもできる．例えば，以下のような入力に対して，MSLRパーザは「あいこに」を支配する非終端記号が``|&lt;PP&gt;|''となる解析結果のみを出力する．括弧付けによる制約を取り扱う機能は，前編集によりあらかじめ部分的な制約を付加する際に利用することができる．構文解析を完全に自動で行うのではなく，インタラクティブに人間の知識を利用しながら半自動的に構文解析を行うことは，解析精度を向上させる有効な手段のひとつである．解析を行う前に，係り受けに関する部分的な制約をうまく人手で与えれば，構文的曖昧性を激的に減らすことができ，結果として構文解析の精度を飛躍的に向上させることが期待できる．</subsection>
  <subsection title="PGLRモデルを取り扱う機能">PGLRモデル~は，一般化LR法の枠組に基づいて構文木の生成確率を与える確率モデルである．PGLRモデルにおける構文木の生成確率は，構文木を作り出す際に実行されるLR表上の動作(もしくは)の実行確率の積として推定される．この生成確率は，生成される複数の構文木の中から最も正しい構文木を選択する構文的曖昧性解消に利用できる．ここで注意すべき点は，PGLRモデルによって与えられる構文木の生成確率は品詞を葉とする構文木の生成確率だということである．すなわち，単語の導出確率や単語の共起関係などの語彙的な統計情報は考慮されていない．LR表の動作の実行確率には若干の文脈依存性が反映されていると考えられる．したがって，PGLRモデルは，文脈自由な言語モデルである確率文脈自由文法よりも推定パラメタ数は多くなるが，文脈依存性が考慮されたより精密なモデルを学習することが可能であり，構文的曖昧性解消の精度も向上することが実験的にも確かめられている~．本ツールキットでは，PGLRモデルを学習する機能，及びPGLRモデルによる構文木の生成確率を計算する機能を備えている．以下，それぞれの機能の概要について説明する．</subsection>
  <subsubsection title="PGLRモデルの学習について">PGLRモデルの学習は，LR表上の各動作の実行確率を推定することにより行われる．動作の実行確率の推定に必要なものは，構文木が付与された構文木付きコーパスである．まず，例文に付与された構文木に対して，構文木を生成する際に実行するLR表上の動作の使用回数C(s_i,l_j,a_k)を数え上げる．ここで，s_iはLR表における状態を，l_jは先読み記号を，a_kは動作を表わし，C(s_i,l_j,a_k)は，状態がs_iで先読み記号がl_jのときに動作a_kが実行された回数を表わす．LR表上の各動作の実行確率は式()()によって推定する．P(l_j,a_k|s_i)=C(s_i,l_j,a_k)_j,kC(s_i,l_j,a_k);;if;;s_iS_s[2mm]P(a_k|s_i,l_j)=C(s_i,l_j,a_k)_kC(s_i,l_j,a_k);;if;;s_iS_reqnarray式()()において，S_sは直後に到達する状態の集合，S_rはそれ以外の状態の集合を表わす．LR表における全ての状態はS_sまたはS_rのどちらか一方に必ず属する．図~のLR表の例では，S_s=0,1,2,3,4,11,13,16,18,19,20,24,S_r=5,6,7,8,9,10,12,14,15,17,21,22,23である．初期状態0はS_sに属することに注意していただきたい．式()は，s_iS_sのときには，状態s_iで実行されうる全ての動作で実行確率を正規化することを意味する．言い換えれば，LR表における同じ行に属する動作の実行確率の和は1となる．例えば，図~のLR表の状態0にある5つのは，これらの実行確率の和が1になるように正規化される．これに対して式()は，s_iS_rのときには，状態s_i，先読み記号l_iのときに実行されうる全ての動作で実行確率を正規化することを意味する．すなわち，LR表における同じマス目に属する動作の実行確率の和は1となる．例えば，図~のLR表の状態15，先読み記号vs_1の欄にある2つの動作(2と;1)の実行確率は，これらの和が1になるように正規化される．また，S_rに属する状態の場合，shift/reduceコンフリクトがない限り，その状態に属する動作の実行確率は必ず1となる．本ツールキットにおけるPGLRモデル学習の手続きは以下の通りである．まず，MSLRパーザは，構文解析を行う際に，LR表の各動作の使用回数を出力する機能を持っている．さらに，項で述べた括弧付けによる制約を取り扱う機能を利用し，訓練用コーパスに付与された構文木を入力として解析を行うことにより，訓練用コーパス中の構文木を生成する際に使われた各動作の使用回数C(s_i,l_j,a_k)を求めることができる．また本ツールキットには，このようにして得られたC(s_i,l_j,a_k)から式()()に従って各動作の実行確率を推定し，その実行確率が付与されたLR表を作成するツールが含まれている．このツールは，パラメタ推定の平滑化のために，LR表に登録されている全ての動作の実行回数にある一定の頻度を加える機能を備えている．</subsubsection>
  <subsubsection title="PGLRモデルを用いた解析について">MSLRパーザは，解析結果となる構文木とそのPGLRモデルに基づく生成確率を同時に出力することができる．また，生成確率の高い順に構文木を並べて出力することができる．すなわち，PGLRモデルに基づく生成確率を用いた解析結果の優先順位付けを行うことができる．MSLRパーザは，まず文法が受理する全ての解析結果を求め，それらをまとめた圧縮統語森を生成する．次に，この圧縮統語森を展開して個々の構文木を出力する際に，PGLRモデルに基づく構文木の生成確率を考慮し，生成確率の上位の構文木から優先して出力する．解析の途中で生成確率の低い部分木を除去するなどの枝刈りを行っていないため，生成確率の上位N位の構文木が必ず得られることが保証される代わりに，長文など構文的曖昧性が非常に多い文を解析する際にメモリ不足によって解析に失敗する可能性も高い．したがって，我々は解析途中で生成確率の低い部分木を除去して探索空間を絞り込む機構も必要であると考えている．SornlertlamvanichはPGLRモデルを利用した効率の良い枝刈りのアルゴリズムを提案しているが~，現在公開しているMSLRパーザには実装されていない．</subsubsection>
  <subsection title="解析例">本項では，MSLRパーザを用いた簡単な日本語文解析実験について報告する．実験用コーパスとして，ATRが作成した日本語対話コーパス~を使用した．実験に用いた文法は，対話文解析用の文脈自由文法で，非終端記号数172，終端記号数441，規則数は860である~．今回の実験では，日本語対話コーパス約20,000文のうち，上記の文法による構文木が付与された例文10,020文を使用した．辞書及び接続表は，これら10,020文から自動的に作成した．評価用テキストとして，単語数4〜14，15以上の文をランダムに1000文ずつ取り出し，それぞれSetA,SetBとした．これらの評価用例文について，分かち書きされていない文字列を入力とし，MSLRパーザを用いて形態素・構文解析を行った．また，評価用テキスト以外の例文約9000文からPGLRモデルを学習し，そのPGLRモデルに基づく構文木の生成確率によって解析結果の順位付けを行った．使用した計算機は，項の実験と同じSunUltraEnterprise250Serverである．実験結果を表~,に示す．また，解析結果の具体例を付録~に示す．表~において，「平均解析木数」は1文あたりに生成される構文木の平均であり，「平均解析時間」は1文の解析に要した時間(単位はミリ秒)の平均を表わしている．SetAのような短い文の場合は7ミリ秒程度，SetBのような長めの文の場合でも27ミリ秒程度で解析を行うことができる．また，表~の【形態素解析の文正解率】は，PGLRモデルに基づく構文木の生成確率の上位n位の解析結果の中に，単語分割と品詞付けの結果がコーパスに付加されたものと一致する構文木が含まれる文の割合を表わしている．同様に【構文解析の文正解率】は，上位n位の解析結果の中にコーパスに付加されたものと一致する構文木が含まれる文の割合を示している．この表から，例えば生成確率の1位の構文木について，SetAでは約80%，SetBでは約36%の文に対して正しい形態素・構文解析結果が得られたことがわかる．今回の実験で使用したコーパスがドメインの限られたコーパスであり，また辞書と接続表を評価用テキストと訓練用テキストの両方を用いて作成したこともあり，比較的良い結果が得られている．</subsection>
  <section title="おわりに">本論文では，我々が現在公開している自然言語解析用ツール「MSLRパーザ・ツールキット」の機能と特徴について述べた．最後に，本ツールキットの今後の開発方針について述べる．まず，複数の接続制約を同時に組み込むLR表作成器，さらにそれを用いて解析を行うパーザの実装を進めている．現在のツールでは，LR表に組み込める接続制約の数は1種類のみである．しかしながら，例えば音声認識と同時に構文解析を行う場合，品詞間の接続制約だけでなく，音素間の接続制約も同時に利用した方が効率の良い解析ができると考えられる~．この場合，音素と品詞の2つの接続制約をLR表に組み込む必要がある．また，これに合わせて，MSLRパーザの解析アルゴリズムも変更する必要がある．現在，複数の制約を取り扱うLR表作成器およびMSLRパーザのプロトタイプは完成しているが，効率の面でまだ問題があり，改良を進めている．次に，よりロバストな解析ができるようにパーザを拡張することが挙げられる．特に，辞書にない単語(未知語)が入力文中に現われたときには，原則的には解析に失敗する．現在のMSLRパーザは，カタカナが続いた文字列を未知語として登録するなど，非常に簡単な未知語処理機能が付加されているが，まだ改良の余地も多い．また，解析に失敗した場合でも，部分的な解析結果を表示する機能なども追加していきたいと考えている．最後に，本ツールキットに付属の日本語解析用の文法，辞書，接続表を改良することが今後の課題として挙げられる．これらを用いて新聞記事の解析を行った場合，解析に成功して何らかの結果を返すことのできる文の割合は約85%である．解析に失敗する原因としては，前述の未知語処理の不完全さや文法規則の不備によるものが多い．より多様な文を解析できるようにするためには，特に文法を改良していかなければならない．また，本ツールキットに付属の文法を用いて解析を行った場合，PGLRモデルを学習するための構文木付きコーパスが存在しないために，PGLRモデルに基づく生成確率によって解析結果に優先順位を付けることはできない．現在，構文木付きコーパスを必要としないPGLRモデルの学習方法について研究をすすめている．パーザ・ツールキットは多くの方の協力を得て開発されました．李輝氏，日本アイ・ビー・エム株式会社の綾部寿樹氏には初期のLR表作成器を実装していただきました．九州工業大学の乾健太郎助教授には，PGLRモデルの理論を提案していただきました．Sussex大学のJohnCarroll氏，NationalElectronicsandComputerTechnologyCenterのSornlertlamvanichVirach氏には，MSLRパーザの実装に関する貴重な助言をいただきました．以上の皆様を始め，本ツールキットの開発に御協力いただきました全ての人々に感謝いたします．MSLRパーザの辞書引きモジュールは，奈良先端科学技術大学院大学・松本研究室で開発された高速文字列検索システムSUFARYをベースに作成しています．SUFARYの転用を許可下さいました松本研究室の皆様に深く感謝いたします．本ツールキットに付属の日本語解析用の辞書は，日本電子化辞書研究所が作成したEDR日本語単語辞書~をもとに構築されています．本辞書の公開を許可下さいました日本電子化辞書研究所の皆様に深く感謝いたします．</section>
  <section title="MSLRパーザによる解析例">項の実験で得られた解析結果の例を挙げる．まず，以下の例文(1),(2),(3)を解析し，PGLRモデルによる生成確率の最も大きい解析結果のみを表示させたときのMSLRパーザの出力を示す．七日までのご予約ですので八日と九日の分でございますか十日と十一日のご予約を十一日と十二日に変更なさりたいわけですね御社の場合には割引価格が適用されますので朝食も含めて割と良いお部屋を百九十三ドルでご提供できます$\bullet$MSLRパーザの出力\endflushleftreadingthegrammarfile`atr.gra'DonereadingLRtablefile`atr.prtb.set2'Done###1###TAC23034-0030-3七日までのご予約ですので八日と九日の分でございますかacceptverbatim|~!@|[&lt;sent&gt;,[&lt;cl&gt;,[&lt;adv-cl&gt;,[&lt;verb&gt;,[&lt;verb/ga&gt;,[&lt;np&gt;,[&lt;n-sahen&gt;,[&lt;mod-n&gt;,[&lt;pp&gt;,[&lt;np&gt;,[&lt;n-date&amp;time&gt;,[&lt;n-day&gt;,[meisi-hi,七日]]]],[&lt;p-kaku-optn&gt;,[p-kaku-made,まで]]],[&lt;p-rentai&gt;,[p-rentai-no,の]]],[&lt;n-sahen&gt;,[&lt;n-sahen/ga-o&gt;,[&lt;prefix&gt;,[prefix-go,ご]],[sahen-meisi/ga-o,予約]]]]],[&lt;aux&gt;,[&lt;auxstem&gt;,[auxstem-desu,で]],[&lt;infl&gt;,[infl-spe-su,す]]]]],[&lt;p-conj-advcl&gt;,[p-conj-syusi,ので]]],[&lt;cl&gt;,[&lt;vaux&gt;,[&lt;vaux&gt;,[&lt;verb&gt;,[&lt;verb/ga&gt;,[&lt;np&gt;,[&lt;n-hutu&gt;,[&lt;mod-n&gt;,[&lt;np&gt;,[&lt;n-date&amp;time&gt;,[&lt;mod-n&gt;,[&lt;np||&gt;,[&lt;n-date&amp;time&gt;,[&lt;n-day&gt;,[meisi-hi,八日]]]],[&lt;p-para&gt;,[p-para-to,と]]],[&lt;n-date&amp;time&gt;,[&lt;n-day&gt;,[meisi-hi,九日]]]]],[&lt;p-rentai&gt;,[p-rentai-no,の]]],[&lt;n-hutu&gt;,[hutu-meisi-post,分]]]],[&lt;aux&gt;,[aux-de,で]]]],[&lt;aux&gt;,[&lt;auxstem&gt;,[auxstem-copula-masu,ございま]],[&lt;infl&gt;,[infl-spe-su,す]]]],[&lt;aux&gt;,[aux-sfp-ka,か]]]]]]5.716416e-23|total1314CPUtime0.2sec###2###TAS13004-0100-1十日と十一日のご予約を十一日と十二日に変更なさりたいわけですねacceptverbatim|[&lt;sent&gt;,[&lt;cl&gt;,[&lt;vaux&gt;,[&lt;verb&gt;,[&lt;verb/ga&gt;,[&lt;np&gt;,[&lt;vaux&gt;,[&lt;vaux&gt;,[&lt;verb&gt;,[&lt;verb/ga&gt;,[&lt;pp-o&gt;,[&lt;np&gt;||,[&lt;n-sahen&gt;,[&lt;mod-n&gt;,[&lt;np&gt;,[&lt;n-date&amp;time&gt;,[&lt;mod-n&gt;,[&lt;np&gt;,[&lt;n-date&amp;time&gt;,[&lt;n-day&gt;,[meisi-hi,十日]]]],[&lt;p-para&gt;,[p-para-to,と]]],[&lt;n-date&amp;time&gt;,[&lt;n-day&gt;,[meisi-hi,十一日]]]]],[&lt;p-rentai&gt;,[p-rentai-no,の]]],[&lt;n-sahen&gt;,[&lt;n-sahen/ga-o&gt;,[&lt;prefix&gt;,[prefix-go,ご]],[sahen-meisi/ga-o,予約]]]]],[p-kaku-o,を]],[&lt;verb/ga-o&gt;,[&lt;mod-v&gt;,[&lt;pp&gt;,[&lt;np&gt;,[&lt;n-date&amp;time&gt;,[&lt;mod-n&gt;,[&lt;np&gt;,[&lt;n-date&amp;time&gt;,[&lt;n-day&gt;,[meisi-hi,十一日]]]],[&lt;p-para&gt;,[p-para-to,と]]],[&lt;n-date&amp;time&gt;,[&lt;n-day&gt;,[meisi-hi,十二日]]]]],[&lt;p-kaku-optn&gt;,[p-kaku-ni,に]]]],[&lt;n-sahen/ga-o&gt;,[sahen-meisi/ga-o,変更]]]]],[&lt;aux&gt;,[&lt;auxstem&gt;,[auxstem-sahen-5-r,なさ]],[&lt;infl&gt;,[infl-5-ri,り]]]],[&lt;aux&gt;,[&lt;auxstem&gt;,[auxstem-wish,た]],[&lt;infl&gt;,[infl-adj-i,い]]]],[&lt;np&gt;,[&lt;n-hutu&gt;,[n-keisiki,わけ]]]],[&lt;aux&gt;,[&lt;auxstem&gt;,[auxstem-desu,で]],[&lt;infl&gt;,[infl-spe-su,す]]]]],[&lt;aux&gt;,[aux-sfp-ne,ね]]]]]6.846102e-32|total2583CPUtime0.3sec###3###TAS12006-0080-1御社の場合には割引価格が適用されますので朝食も含めて割と良いお部屋を百九十三ドルでご提供できますacceptverbatim|[&lt;sent&gt;,[&lt;cl&gt;,[&lt;adv-cl&gt;,[&lt;vaux&gt;,[&lt;vaux&gt;,[&lt;vaux&gt;,[&lt;verb&gt;,[&lt;verb/o&gt;,[&lt;mod-v&gt;,[&lt;pp&gt;,[&lt;pp&gt;,[&lt;np&gt;,[&lt;||n-hutu&gt;,[&lt;mod-n&gt;,[&lt;np&gt;,[&lt;n-hutu&gt;,[hutu-meisi,御社]]],[&lt;p-rentai&gt;,[p-rentai-no,の]]],[&lt;n-hutu&gt;,[hutu-meisi,場合]]]],[&lt;p-kaku-optn&gt;,[p-kaku-ni,に]]],[&lt;p-kakari&gt;,[p-kakari-wa,は]]]],[&lt;verb/o&gt;,[&lt;pp-ga&gt;,[&lt;np&gt;,[&lt;n-hutu&gt;,[&lt;n-sahen&gt;,[&lt;n-sahen/ga-o&gt;,[sahen-meisi/ga-o,割引]]],[&lt;n-hutu&gt;,[hutu-meisi,価格]]]],[p-kaku-ga,が]],[&lt;n-sahen/ga-o&gt;,[sahen-meisi/ga-o,適用]]]]],[&lt;aux&gt;,[aux-suru-sa,さ]]],[&lt;aux&gt;,[&lt;auxstem-deac&gt;,[auxstem-deac-reru,れ]]]],[&lt;aux&gt;,[&lt;auxstem&gt;,[auxstem-masu,ま]],[&lt;infl&gt;,[infl-spe-su,す]]]],[&lt;p-conj-advcl&gt;,[p-conj-syusi,ので]]],[&lt;cl&gt;,[&lt;adv-cl&gt;,[&lt;verb&gt;,[&lt;verb/ga-ni-o&gt;,[&lt;mod-v&gt;,[&lt;pp&gt;,[&lt;np&gt;,[&lt;n-hutu&gt;,[hutu-meisi,朝食]]],[&lt;p-kakari&gt;,[p-kakari-mo,も]]]],[&lt;verb/ga-ni-o&gt;,[&lt;vstem1/ga-ni-o&gt;,[vstem-1/ga-ni-o,含め]]]]],[&lt;p-conj-advcl&gt;,[p-conj-renyo-te,て]]],[&lt;cl&gt;,[&lt;vaux&gt;,[&lt;vaux&gt;,[&lt;verb&gt;,[&lt;verb/ga&gt;,[&lt;pp-o&gt;,[&lt;np&gt;,[&lt;n-hutu&gt;,[&lt;mod-n&gt;,[&lt;verb&gt;,[&lt;verb/ga&gt;,[&lt;mod-v&gt;,[&lt;advp&gt;,[&lt;adv&gt;,[hukusi,割と]]]],[&lt;verb/ga&gt;,[adjstem/ga,良],[&lt;infl&gt;,[infl-adj-i,い]]]]]],[&lt;n-hutu&gt;,[&lt;prefix&gt;,[prefix-o,お]],[&lt;n-hutu&gt;,[hutu-meisi,部屋]]]]],[p-kaku-o,を]],[&lt;verb/ga-o&gt;,[&lt;mod-v&gt;,[&lt;pp&gt;,[&lt;np&gt;,[&lt;n-quant&gt;,[&lt;n-num&gt;,[&lt;n-num-hyaku&gt;,[&lt;n-num-keta-hyaku&gt;,[&lt;num-suf-hyaku&gt;,[num-hyaku,百]]],[&lt;n-num-zyuu&gt;,[&lt;n-num-keta-zyuu&gt;,[&lt;n-num-ichi&gt;,[num-kyuu,九]],[&lt;num-suf-zyuu&gt;,[num-zyuu,十]]],[&lt;n-num-ichi&gt;,[num-san,三]]]]],[&lt;suffix-unit&gt;,[suffix-doru,ドル]]]],[&lt;p-kaku-optn&gt;,[p-kaku-de,で]]]],[&lt;n-sahen/ga-o&gt;,[&lt;prefix&gt;,[prefix-go,ご]],[sahen-meisi/ga-o,提供]]]]],[&lt;aux&gt;,[&lt;auxstem&gt;,[auxstem-sahen-1,でき]]]],[&lt;aux&gt;,[&lt;auxstem&gt;,[auxstem-masu,ま]],[&lt;infl&gt;,[infl-spe-su,す]]]]]]]]6.264841e-45|total19284CPUtime0.13secverbatim解析結果は括弧付けで表現された構文木として出力される．構文木の右にある数値はその構文木のPGLRモデルによる生成確率である．「total」は得られた解析結果の総数を，「CPUtime」は解析に要した時間を表わす．以下，得られた解析結果を構文木の形で示す．但し，紙面の都合により，構造の一部を簡略している．$\bullet$例文(1)の解析結果\\[2mm]\inputextree1.tex$\bullet$例文(2)の解析結果\\[2mm]\inputextree2.tex$\bullet$例文(3)の解析結果\\[2mm]\inputextree3.texflushleftplainplaindocument</section>
</root>
