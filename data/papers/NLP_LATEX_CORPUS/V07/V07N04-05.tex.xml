<?xml version="1.0" ?>
<root>
  <title>頑健な英日機械翻訳システム実現のための原文自動前編集</title>
  <author>吉見毅彦佐田いち子福持陽士</author>
  <jabstract>本稿では，従来の機械翻訳システムの構文解析能力を越える倒置や挿入などを含む文に対して頑健な処理を実現するための一手法として，形態素解析と簡単な構文解析によって得られる情報に基づいて原文を書き換える自動前編集手法を示す．原文書き換え系を既存システムに追加することによって，1)より品質の高い翻訳がシステムの既存部分にほとんど変更を加えることなく得られるようになるだけでなく，2)構文解析の負担が減少するためシステム全体としての効率化が実現できる．実際，提案手法を我々の英日機械翻訳システムPowerE/Jに組み込み，新聞記事を対象として実験を行なったところ，1)書き換え規則が適用された330文の78.8%にあたる260文の翻訳品質が改善され，2)書き換えを行なった場合の翻訳速度は行なわない場合の速度の1.12倍になった．</jabstract>
  <jkeywords>原文書き換え，自動前編集，不適格文，頑健性，機械翻訳</jkeywords>
  <section title="はじめに">様々な状況で利用される機械翻訳システムが直面する現実の文には，システムが持つ言語知識では適切に解析できない様々な言語現象が現れる．このような現象を含む文は，人間にとっても適格でない(が理解できる)絶対的不適格文と，人間にとっては適格であるがシステムの処理能力を越えている相対的不適格文に分けられるが，両者を適切に扱える頑健なシステムが求められている．絶対的不適格現象のうち語句の欠落や主語述語の不一致などの構文レベルの現象へ対処することを目的とした手法としては，部分解析法や制約緩和法などがこれまでに提案されている．他方，我々は，相対的不適格文への対処に焦点を当て，機械翻訳システムの翻訳品質の向上を目指している．以降本稿では紛れない限り，相対的不適格文を単に不適格文と呼ぶ．構文レベルの不適格文すなわちシステムの解析能力を越えた構文構造を持つ文を扱うための代表的な手法には，1)対象テキストの分野を限定した専用文法を用いる手法や，2)原文を書き換える手法などがある．また，後者の手法に関連して，原文とそれを人間が書き換えた結果とを比較した差分から原文書き換え規則を学習する手法も示されている．(1)と(2)の手法の設計方針は，システムの既存部分の変更を避け，新たな処理系を追加するという点で共通しているが，以下の点で異なっている．前者の手法では，システムの既存部分による処理は，可能な場合には，新たに追加した処理系による処理によって代行される．すなわち，新たな処理系による解析(分野依存の専用文法による解析)が成功した場合には，既存の処理系による解析(汎用文法による解析)は実行されない．これに対して後者では，新たに追加した処理系は既存部分の前処理系と位置付けられる．原文書き換えによる手法は，書き換えを構文解析の前に行なうか後に行なうかによって二つに分けられる．構文解析後に行なう場合は，構文情報が得られているため，構文解析前すなわち形態素解析後に行なう場合に比べてより翻訳品質の高いシステムが実現できる可能性がある．しかし，実用的な機械翻訳システムにおいて原文書き換えの実行を構文解析終了後まで遅らせることは，処理効率の点では望ましくない．なぜならば，入力文全体を覆う構文構造が生成できず構文解析に失敗することが判明するのは構文解析規則をすべて適用し終えた後であるが，実用的な機械翻訳システムでは構文解析規則の規模は非常に大きくなっており，構文解析に要する時間は解析全体に要する時間の大半を占めているため，構文解析後の書き換えは処理の効率化につながりにくいからである．これに対して，構文解析が失敗しないようにあらかじめ原文を書き換えれば，すべての構文解析規則の適用が試みられる可能性は低くなるため，システム全体として効率の良い処理が実現できる．また，構文情報が(ほとんど)得られていない時点で行なう書き換えがどの程度有効であるかを明らかにすることも重要である．このような観点から本稿では，形態素解析で得られる情報と通常よりも簡単な構文解析で得られる情報に基づいて原文書き換えを構文解析前に行なうことによって翻訳品質と共に翻訳速度を改善する手法を示す．以下，本稿で扱う書き換え対象を,節で整理する．次に,節で原文書き換え系の処理枠組について説明する．,節では，原文書き換え系を既存の英日機械翻訳システムに組み込み，システムの性能向上にどの程度貢献できるかを実験によって検証する．,節では関連研究との比較を行なう．</section>
  <section title="書き換え対象文">我々の従来システムにとっての不適格現象には様々なものがあるがそれらをすべて一度に扱うことは容易ではない．このため本研究では，出現頻度が高い現象や翻訳品質の改善度が大きい現象を含む文を書き換え対象として優先的に選ぶことにする．書き換え対象を選定するために，英文法書の例文や新聞記事を我々のシステムで処理し，構文解析に失敗した文のうち558文についてその原因を分析した．構文解析に失敗する現象は595箇所で見られた．このうち238箇所は，綴り誤りなどの絶対的不適格現象や，辞書や形態素解析系の不備によるものであった．残り357箇所のうち108箇所が省略現象によるもの，61箇所が倒置によるもの，41箇所が挿入語句によるものであった．また，特殊構文を含まないが文が長いために構文解析に失敗する文が26文存在した．この分析結果に基づいて，表,に示すパターンへ対処することを目的とした．表,のパターンで，構文解析に失敗した558文に現れたすべての倒置，省略，挿入を網羅しているわけではない．パターン7ないし10は，複雑で長い部分を動詞の後方に置くための前置詞句の前置であるが，ここでは倒置とみなす．表,において，上付き記号?は任意項を，は選択項をそれぞれ表し，斜字体の語句は省略されている語句を意味する．表,のパターンは我々の従来システムにとっての不適格現象であり，他のシステムの中には適切に処理できるものも存在すると考えられる．しかし，例えば日本電子工業振興協会の自然言語処理技術委員会で編集された翻訳品質評価用テストセットで取り扱いが重要な特殊構文として取り上げられているように，これらを適切に処理することは一般の機械翻訳システムにとっても重要な課題である．また，これらの現象のうち，倒置，省略，挿入は，英日機械翻訳システムの一般利用者が日々接することが多いテキストの一つである英字新聞記事に比較的頻繁に現れる表現であるため，これらを適切に処理する必要性は高い．本節では，これらの現象を含む文をどのように書き換えれば翻訳品質が改善されるかを検討する．以降，従来システムとは我々の従来システムを指す．</section>
  <subsection title="倒置">倒置のうち分詞を中心とする叙述部の倒置や否定表現が冒頭に置かれた文における倒置などを扱う．例えば文(E)は過去分詞が文頭に現れているために，構文解析に失敗し(J)のような出力しか得られない．しかし，文(E)の先頭に``whatis''という語句を追加して文(E')のように書き換えると，従来システムにとって適格文となり文(J')のような翻訳が得られる．AffiliatedistheparentcompanyofGlobeNewspaperCo.◇加入した‖GlobeNewspaperCoの親会社である。WhatisaffiliatedistheparentcompanyofGlobeNewspaperCo.合併されるものは、GlobeNewspaperCoの親会社である。SENT文(E)に見られるように，否定の副詞``neither''が冒頭に置かれた節では主語と助動詞の倒置が生じる．このような節に対しては，``neither''を``andalso''に書き換えて，助動詞``have''を否定形にし主語の後方に移動する．このような処理の実現には，助動詞の移動先を決定しなければならないため，主語になる名詞句この場合``thegovernmentregulators''を認識する必要がある．このため，書き換え規則の適用条件部には簡単な構文構造を認識するための手続きも記述する．この手続きに関しては,節で述べる．Neitherhavethegovernmentregulatorsindicatedthattherewillbeaproblem.◇どちらも、政府取締官を示された状態にしない‖そこのそれは、問題であろうAndalsothegovernmentregulatorshavenotindicatedthattherewillbeaproblem.そしてまた、政府取締官は、問題があるであろうことを示さなかった。SENT</subsection>
  <subsection title="省略">接続詞の省略など構文的知識に依存する省略のいくつかを扱う．文(E)は，二つの被伝達節が``and''で連結されているが，一つ目の被伝達節を導く``that''が明示されていない．これが原因で構文解析に失敗するが，``said''の直後に``that''を補えば構文解析の失敗は避けられるようになる．SprinkelsaidthefallofthedollarhadsubstantiallyrestoredU.S.costcompetitivenessandthatthedeteriorationoftheU.S.tradebalanceappearedtohaveabated.◇Sprinkelによれば、ドルの低下は、米国のコスト競争、及び、それを大幅に回復した‖米国の貿易収支の悪化は、減少したために、現れた。SprinkelsaidthatthefallofthedollarhadsubstantiallyrestoredU.S.costcompetitivenessandthatthedeteriorationoftheU.S.tradebalanceappearedtohaveabated.Sprinkelは、ドルの低下が米国のコスト競争を大幅に回復したということ、そして、米国の貿易収支の悪化が減少したように思われるということを言った。SENTまた，文(E)で``so''と相関関係にある``that''が省略されていることは，``so''の直後の形容詞に代名詞が後続していることを手がかりにすれば検出できる．The2.5pctdiscountrateissolowitispoliticallyimpossibletocutitfurther.2.5パーセント割引率は、そのようにそれが政治上まで不可能である安値が更にそれを切ったことである。The2.5pctdiscountrateissolowthatitispoliticallyimpossibletocutitfurther.2.5パーセント割引率は、更にそれを切ることが政治上不可能であるほど低い。SENT</subsection>
  <subsection title="挿入">挿入句は文中の他の語句と特に構文的な関係を持つことなく現れ，コンマやダッシュや括弧などで区切られる．括弧で囲まれた挿入句を発見することは比較的容易であるが，コンマで囲まれている場合にはコンマの他の用法との区別を行なう必要があり，挿入句の正確な認識は容易ではない．しかし，コンマだけでなくその前後の語句も手がかりとし，表,のようなパターンとして捉えれば，挿入句の発見はより正確に行なえる．例えば文(E)において，一つ目のコンマの直後に存在する``someofthem''のような特徴的な語句や二つ目のコンマの直後に存在する(助)動詞に着目すればよい．このような手がかりに基づいて認識した挿入句を括弧で囲めば，既存の構文解析系による処理が成功するようになる．ただし，文(E)は挿入だけでなくbe動詞の省略も含んでいるため，``them''の直後に``are''を補う必要がある．Theirseparateproposals,someofthemconflicting,willbewovenbyHouseDemocraticleadersintoafinaltradebillforavotebythefullHouseinlateApril.◇それらの個別の提案、‖いくらかの‖それら‖対立する、‖下院の民主党のリーダーによって4月下旬の下院本会議による投票のための最終の貿易手形に織られるであろう。Theirseparateproposals(someofthemareconflicting)willbewovenbyHouseDemocraticleadersintoafinaltradebillforavotebythefullHouseinlateApril.それらの個別の提案(それらのうちのいくらかが対立している)は、下院の民主党のリーダーによって4月下旬の下院本会議による投票のための最終の貿易手形に組み立てられるであろう。SENT</subsection>
  <subsection title="強調">強調のための言語的手段には，,節で述べた倒置文の他に感嘆文や修辞疑問文や分裂文などがある．このうち従来システムでは文(E)のような分裂文を適切に処理することができないが，これを文(E')のように書き換えれば翻訳が改善される．文(E')は，文(E)に対して，``it''を削除し，``which''を``what''に置換し，焦点の名詞句とその直前のbe動詞を``which''節の後方へ移動するという三操作を行なうことによって得られる．However,headdedthatintheend,itwasmarketforceswhichprevailed.しかしながら、彼は、結局それが普及していた市場諸力であるとつけ加えた。However,headdedthatintheend,whatprevailedwasmarketforces.しかしながら、彼は、結局普及していたものが市場諸力であるとつけ加えた。SENT</subsection>
  <section title="原文書き換え系"/>
  <subsection title="原文書き換えの枠組">本節で述べる原文書き換え系を組み込んだ機械翻訳システムにおける解析の流れを図,に示す．このシステムでは，形態素解析終了後に書き換えを実行した後，書き換えた部分の形態素解析を行ない，入力文全体の形態素解析結果を構文解析系に送る．一度目の書き換え結果に対して全体を覆う構文構造が生成できず構文解析に失敗した場合，処理の制御は原文書き換え系に戻る．再度書き換えを行なう場合には，各書き換え規則に記述されている規則の信頼度(後述)に従って，一度目の書き換えでは用いなかった規則を新たに適用したり，逆に一度目の処理で行なった書き換えを取り消したりする．原文書き換え系での処理は，形態素解析結果に対して先頭から順に書き換え規則の適用条件との照合を行なっていき，適用条件が満たされる部分を順次書き換えていく．</subsection>
  <subsection title="書き換え規則の形式">書き換え規則には，次に示すように，適用条件と書き換え操作の他，制御情報として適用抑制規則集合と信頼度を記述することができる．[(,識別番号，適用条件，書き換え操作，適用抑制規則集合，信頼度,)]</subsection>
  <subsubsection title="適用条件部">適用条件は，ある指定された属性を持つ語句がある位置あるいは区間に存在するかどうかを調べる手続きの論理積，論理和の形で表現される．入力文中での書き換え対象候補の出現位置は次のように表す．まず着目語の出現位置を変数pで表し，p+nで着目語のn語後方(文末側)の語を，p-nで着目語のn語前方(文頭側)の語を指す．コンマや終止符なども語とみなす．特別な記号として文末の語を指すドル記号を用いる．この他，コンマが書き換え対象を発見するための重要な手がかりとなることが多いため，mで着目語の後方に存在するm番目のコンマを指し，mで前方のm番目のコンマを指すことにする．例えばword_class(com_fwd_1+2,noun)という手続きは，着目語に最も近い後方のコンマの二語後方に，語種(品詞)候補として名詞を持つ語が存在するとき真を返し，存在しないとき偽を返す．適用条件部に記述する手続きは主に語の形態素語彙属性を調べるものであるが，特別な手続きとして，入力文のある部分を節や名詞句と解釈できるかという構文的な属性を調べる手続きを記述する．ただし，簡単な構文解析しか行なわない方針であることから，節の認識は次のような手順で行なう．ここで，名詞句を認識する手続きは次のような簡単な構造を検出するものである．上付き記号?と+はそれぞれ一回以下，一回以上の出現を意味する．名詞句&amp;=&amp;名詞句0(前置詞名詞句0)^?名詞句0&amp;=&amp;(副詞^?形容詞|過去分詞|現在分詞)^?^+eqnarray*</subsubsection>
  <subsubsection title="操作部">書き換え操作には，語句の追加・削除・置換・移動，文の分割，前編集記号の付加がある．前編集記号の付加は，語の形態素語彙属性を指定したり，節や句の範囲や従属先を指定したりするためのものである．語句の語彙属性や従属先の指定によって解釈の曖昧性が減るため，解析の品質と速度の向上が期待できる．</subsubsection>
  <subsubsection title="適用抑制規則集合">ある規則Rに与えられている適用抑制規則集合はRの適用を抑える他の規則に関するメタ条件を表し，規則Rはその適用抑制規則集合に記述されている識別番号の規則が既に適用されている場合には適用されない．規則Rの適用抑制規則集合には，Rの書き換え対象と重複する部分を書き換えようとする規則だけでなく，書き換え対象がRのものと重複しない規則を含めてもよい．</subsubsection>
  <subsubsection title="信頼度">規則には，その信頼性が高く規則の適用によって翻訳品質が向上することがほぼ確実な規則もあれば，信頼性があまり高くない規則もある．信頼度は，このようなことを考慮して，信頼性があまり高くない規則による悪影響を抑えるために設定したものである．各規則には，その信頼性に応じてA，B，Cのいずれかの信頼度を与える．信頼度Aの規則は最初の構文解析の前に適用し，構文解析に失敗してもこの規則による書き換えは取り消さない．規則に信頼度Aを与えるのは，この規則を適用しないと構文解析に失敗することがほぼ確実であり，たとえこの規則によって書き換えた表現の構文解析に失敗して断片的な構文構造しか得られなかったとしても，この規則を適用しない場合の(断片的な)構文構造から生成される翻訳よりも高い品質の翻訳が生成されると期待される場合である．信頼度Bの規則は最初の構文解析の前に適用するが，最初の構文解析に失敗した場合，この規則による書き換えは取り消す．信頼度Cの規則は最初の構文解析の前には適用せず，最初の構文解析に失敗した場合に初めて適用する．各規則にどの信頼度を与えるかは実験を繰り返して経験的に決定する．</subsubsection>
  <subsection title="書き換え規則の例">書き換え規則の例として，挿入と省略を含む文(E)に対処するための規則と分裂文(E)に対処するための規則を図,に示す．図,の最初の規則が挿入と省略のための規則であり，二つ目が分裂文のための規則である．ただし，これらは，理解を容易にするため実際の規則を簡単化したものである．最初の規則の適用条件が満たされるのは，現在着目している位置に``someofthem''が存在し，着目語の直前がコンマであり，着目語に最も近い後方のコンマの直後に動詞が存在し，二つのコンマに挟まれた区間に``someofthem''を主語とする述語が存在しないときである．このとき，コンマを括弧に書き換え，``someofthem''の直後にbe動詞``are''を挿入する．二つ目の規則は，現在着目している位置に代名詞``it''が存在し，着目語の直後がbe動詞の肯定形あるいは否定形であり，その直後に名詞句が存在し，その名詞句の直後に``which''が存在するときに適用する．</subsection>
  <section title="実験と考察">原文書き換えの有効性を検証するために，提案手法を我々の従来システムに組み込み，翻訳品質がどの程度向上するかを調べる実験と翻訳速度がどの程度向上するかを調べる実験を行なった．</section>
  <subsection title="実装">今回の実験のために実装した書き換え規則の総数は35規則であり，その内訳は倒置，省略，挿入，強調用がそれぞれ18，6，8，3規則である．規則の適用条件部には，形態素語彙属性を調べる手続きと構文的な属性を調べる手続きの二種類が記述されている．構文的な属性を調べる手続きは，,節で述べた，簡単な名詞句を認識する手続きnoun_phrase()と，これを利用して節を認識する手続きsubject_predicate()である．形態素属性を調べる手続きは，単語の語形，語種(品詞)，意味標識などの照合を行なうものである．形態素属性を調べる手続きの一覧を付録の表,に示す．各規則の適用条件部に含まれる平均手続き数を表,に示す．形態素属性を調べる手続きは，表,によれば，実装した規則全体の平均で10.1個含まれている．最も多い規則では16個，最も少ない規則では3個である．構文属性を調べる手続きについては，平均で0.9個，最も多い規則で3個，最も少ない規則では0個である．構文属性を調べる手続きを全く含まない規則は10規則存在する．</subsection>
  <subsection title="翻訳品質評価実験"/>
  <subsubsection title="実験方法">評価実験には新聞記事から抽出した6182文を用いた．これらのうち1282文は従来システムでの構文解析に失敗するものであり，残り4900文は失敗しないものである．評価文集に含まれる文の長さは，最も短いもので4語，最も長いもので63語，平均では27.7語であった．評価文集には書き換え規則作成時に参照した文も含まれているため，今回の実験は完全ブラインドテストではない．規則記述の方針として，書き換えるべき表現が書き換えられない(再現率が上がらない)ことにはあまり注意せず，書き換えるべきでない表現を書き換えてしまう誤りの発生を極力抑える(適合率を上げる)ことにした．このため，評価では適合率のみに着目し，書き換えるべきでない表現が誤って書き換えられていないかを調べた．次に，規則が正しく適用されている文について，原文書き換え系を組み込んだ場合と組み込まない場合とで次の二点について比較した</subsubsection>
  <subsubsection title="実験結果">各評価文集について，原文書き換え系を組み込まない場合の一文当り平均の翻訳時間と，組み込んだ場合の一文当り平均の翻訳時間，さらに，前者の翻訳速度を1としたときの後者の翻訳速度を表,に示す．実験に用いた計算機のCPUは^II400MHz，メモリは128MB，OSは^98である．翻訳システムはC言語で記述されている．評価文集,を対象とした実験の結果，原文書き換えを行なった場合の速度は行なわない場合の速度に対して1.12となっている．評価文集,において実際に書き換えられた文の数は入力文数の5.3%に過ぎないが，このことを考慮すると翻訳速度向上への原文書き換えの貢献度は高いと考えられる．評価文集,を対象とした実験の結果より，書き換えるべき文がすべて書き換えられた場合には翻訳速度は2.6倍程度にまで向上するという一つの目安が得られた．また，構文解析が失敗することがあらかじめ判明している文だけを対象とした場合には，評価文集,や,を対象とした場合よりも大きな効果が現れることが確認された．原文書き換え系を組み込むことによってシステム全体の処理効率が向上したのは，具体的には次の二つの理由による．我々の構文解析系は二段階方式に基づいており，適格文用の構文解析規則を用いて解析を行なう機構と，この機構による通常の解析が失敗した時点で起動され，解析途中で生成された部分構造の中から発見的知識を用いて妥当なものを選び出すための別の機構を備えている．第一の理由は，システムにとっての不適格文が原文書き換え系によって適格文に書き換えられると，第二の機構による処理を実行する必要がなくなるからである．従って，構文解析前に原文書き換えを行なうことによる処理効率向上の効果は，我々のシステムに限らず，制約緩和法や部分解析法のように二段階方式で構文解析を行なっているシステムで一般に期待できる．システムが想定していない言語現象を含む文の構文解析が失敗することは，第一の機構に記述されている規則をすべて適用し終えないと判明しない．これに対して，システムが想定している言語現象の文の解釈は，すべての規則を適用しなくても生成できる．速度向上のもう一つの理由は，原文書き換えによって，第一の機構で適用される規則の数すなわち生成される部分構造の数が減っていることである．今回実装した書き換え規則では実際には記述していないが，,節で述べたように，本稿の原文書き換え系では書き換え操作として前編集記号を付加する操作を記述することができる．前編集記号の付加によって解釈の曖昧性が減るため，この操作を記述することによって解析速度がさらに向上する．例えば，文(E')では``if''に名詞節接続詞か副詞節接続詞かの曖昧性があるが，文(E'')では副詞節接続詞に決定されるため，文(E')を文(E'')に書き換えれば，さらに翻訳時間が短縮される．</subsubsection>
  <subsection title="翻訳速度評価実験"/>
  <section title="関連研究との比較">原文書き換えを，形態素解析で得られる情報と通常よりも簡単な構文解析で得られる情報に基づいて行なう手法としては，金らの方法や加藤らの方法がある．金らの方法は，長い日本語文の構文解析が失敗しやすいという問題に，長文を複数の短文に分割し，必要な場合には各短文に主語を補うことによって対処するものである．これに対して本稿の原文書き換え系では，文の分割だけでなく，語句の追加・削除・置換・移動，前編集記号の付加が可能であり，単に文を分割する場合よりも品質の高い翻訳が得られる．加藤らは，英語の複文に着目してその編集方法を示しているが，書き換え方法の提案に留まっており評価結果は報告されていない．</section>
  <section title="おわりに">本稿では，一部の構文レベルの相対的不適格文を既存システムでも適切に扱えるように書き換えることによって頑健な処理を実現する手法を示した．この原文書き換え系を既存の英日機械翻訳システムの形態素解析系と構文解析系の間に組み込み，翻訳の品質と速度が改善されることを実験によって確認した．倒置，省略，挿入，強調の現象にはそれぞれ様々なパターンがあるが，今回着目したパターンは比較的単純なものであり，記述した規則で多様なパターンを網羅しているわけではない．また，書き換えるべき表現が書き換えられないことにはあまり注意を払わなかった．今後，これらの点を考慮に入れた規則の拡張が必要である．</section>
</root>
