<?xml version="1.0" ?>
<root>
  <title>ターム間の意味的関連性に基づくタームリストの翻訳多義解消</title>
  <author>菊井玄一郎</author>
  <jabstract>文章に付与されたキーワード集合のような内容語（ターム）の並びを「タームリスト」と呼ぶ．本論文では，翻訳先言語のコーパスのみを用いて，各タームに対する訳語候補のなかから最適なものを選択する「翻訳多義解消」の新たな方法を提案する．本手法では，各タームに対する訳語候補を一つずつ集めてできる組み合わせのうち，含まれる訳語同士の意味的関連性が最も高い組を選択する．単語間の意味的関連性の尺度は各単語が翻訳先言語コーパスにおいてどの程度近い文脈に出現するかを数値化したものである．翻訳実験の結果，翻訳多義のある単語に対する平均正解率77.4%を達成した．</jabstract>
  <jkeywords>訳語選択，多議解消，共起頻度</jkeywords>
  <subsection title="共起頻度による  の定義">単語空間を使ったの定義を行なう準備として，コーパス中のタームの共起頻度をそのまま使ったを定義する．まず，ターム間の共起頻度を行列で表現する．この行列の行と列はどちらも異なりタームに対応し，(i,j)要素はi行目のタームw_iとj列目のタームw_jとのコーパスにおける共起頻度である．ここで，2つのタームの共起頻度とはこれらがあらかじめ決められたp語以内の近さでテキスト中に表れる頻度である．以下ではこの行列のことを共起行列と呼ぶ．表に共起行列の例を示す．この例は，たとえば「訴訟」と「法」とがコーパス中で246回共起していることを表している．この共起行列のi行目の行ベクトル(長さを1に正規化したもの)をタームw_iに対する共起ベクトルと呼びw_i'で表す．共起ベクトルはそのタームが他のタームとどのような共起関係にあるかを表している．この定義から明らかな通り，２つのタームが他のタームと同じような比率で共起しているならば，これら2つのタームに対応するベクトルは近い方向を向く．そこで，2つのタームw_i,w_jの意味的な近さprox(w_i,w_j)をこれらのタームに対応するベクトルw_i',w_j'のなす角の余弦(cos(w_i',w_j'))として以下のように定義する．prox(w_i,w_j)=cos(w_i',w_j'):where::cos(a,b)=aba^2b^2eqnarrayこの「近さ」の概念をnタームに拡張したものがn要素から成るタームリストのの定義である．具体的には，ターム列w_1^n=w_1,w_2,,w_nに関する共起頻度に基づくrel'(w_1^n)を下記のように定式化する．rel'(w_1^n)&amp;=&amp;1n_i=1^ncos(w_i',c(w_1^n))::c(w_1^n)&amp;=&amp;1n_i^nw_i'eqnarrayすなわち，n個のターム(w_1^n)に対応するn個のベクトルの重心c(w_1^n)をまず計算し，この重心からそれぞれのベクトルまでの「近さ(式())の平均」を共起行列におけるとする．</subsection>
  <section title="はじめに">情報検索における検索語リストや文書に付与されたキーワードリストなど，複数の内容語(熟語も含む)から成るリストのことを本論文では「タームリスト」と呼ぶ．タームリストを別の言語に翻訳する「タームリストの自動翻訳処理」は，単言語用の文書検索と組み合わせてクロスリンガル検索を実現したり，他国語文書のキーワードを利用者の望む言語で翻訳表示する処理に応用できるなど，様々なクロスリンガル処理において重要な要素技術である．本論文ではタームリストの自動翻訳処理のうち，各タームに対して辞書等から与えられた訳語候補の中から最も妥当なものを選択する「翻訳多義解消」に焦点を当てる．内容語に関する翻訳多義解消の研究は従来から文(テキスト)翻訳の分野で行われて来た．80年代には統語的依存構造に着目した意味多義解消規則を用いる方式が研究され，実用システムにも組み込まれた(など)．この方式は翻訳対象語に対して特定の統語関係(例えば，目的語と動詞の関係)にある別の語を手がかりにした訳語選択規則を人手で作成し，これを入力に適用することによって多義解消を行う方式である．従って，この方法は複数語間に統語的関係が存在しないタームリストには適用できない．一方，90年代に入って言語コーパスから統計的に学習した結果に基づいて多義解消を行う研究が活発化している．これらのうち，統語的解析を(明示的には)行わず，翻訳対象語と同一文内，あるいは，近傍で共起する他の単語を手がかりに多義解消を行う手法はタームリストの翻訳にも適用可能であり，すでにいくつかの研究も行われている．これらは利用するコーパスによって大きく2つに分類できる．１つめはパラレルコーパスと呼ばれる対訳関係にあるコーパスを用いるもので，T.Brownらによる文翻訳のための訳語選択手法，R.Brownらのタームリスト翻訳手法がある．これらの方法は訳語候補自体もコーパスから抽出するので対訳辞書を別に用意する必要がないという利点があるが，対象分野に関する相当量のパラレルコーパスを学習データとして準備しなければならないという問題がある．２つめは目的言語の単言語コーパスのみを用いるもので，Daganら,田中らによる文翻訳の多義解消手法,同様の手法をタームリスト翻訳に適用したJangらによる研究がある．これらは入力の各単語(内容語)に対する訳語候補の組み合わせのうち目的言語のコーパス中における共起頻度あるいは相互情報量が最大のものを選択するという方法である．たとえば，入力が``suits''と``wear''を含み，前者の訳語候補が``裁判''と``スーツ''，後者の候補が``着用''であったとき，日本語コーパスにおいて``スーツ''と``着用''の共起頻度が``裁判''と``着用''のそれよりも高い場合，``suits''の訳語を``スーツ''に決定するというものである．この方法はパラレルコーパスに比べて大量に入手可能な単言語コーパスを学習データとして用いるという，統計的処理にとって重要な利点を持っている．本論文で提案する手法は，目的言語の単言語コーパスのみを利用する点では上記２つめの手法に分類されるが，訳語候補の組み合わせの妥当性を計算する方法が異なる．本手法では，訳語候補同士の直接的な共起頻度を用いるのではなく，各訳語候補に対して，まず，目的言語コーパスにおける共起パターンをベクトル化した一種の意味表現を求め，この意味表現同士の「近さ」によって計算する．この「意味表現同士の近さ」を以下ではと呼ぶ．2単語のはこれらの単語と共起する単語の頻度分布を元に計算されるため，2単語のみの共起頻度を用いるより精度の高い結果を得ることが期待できる．以下，まず２章で問題設定を行う．次に３章で多義解消モデルとその中心となる複数単語の意味的について定義し，４章では枝刈りによる処理の高速化について説明する．５章では評価実験とその結果について述べ，６章で誤りの原因と先行研究との関連について考察する．</section>
  <section title="タームリスト翻訳における多義解消タスク">n個の要素からなる翻訳元言語のタームリストをS=s_1^n=s_1,s_2,,s_n(s_iは一つのターム，s_i^jはs_iからs_jまでの並びを表す)と記す．ここで，タームリスト内の要素の順序には意味がない．なお，nをタームリストの長さと呼ぶ．各タームに対して対訳辞書（bilingualdictionary)などを参照して文脈独立に与えられた訳語の集合を訳語候補集合と呼ぶ．なお，訳語は一つの単語であっても複数語から成る熟語であっても良い．入力の各タームに対してその訳語候補を一つずつ選んで並べたものを翻訳タームリスト候補と呼び，T=t_1^n=t_1,t_2,,t_n(t_iはs_iに対する訳語候補の一つ)で表す．たとえば，入力がsuitとprosecuteとから成っていて，これらに対する訳語候補がそれぞれ「スーツ」と「裁判」，「遂行」と「起訴」である場合，以下の４つの翻訳タームリスト候補が存在する．（スーツ，遂行）,（スーツ，起訴）,（裁判，遂行）,（裁判，起訴）verbatim本論文で対象とする翻訳多義解消とは，翻訳タームリスト候補の中から(入力タームリスト全体の与える文脈に照らして)最も適切なものを選ぶことである．</section>
  <section title="翻訳多義解消モデル">本論文で提案する手法は「翻訳タームリスト候補の中でターム同士の意味的関連性が高い方がそうでないものより妥当である」という仮定に基づいている．ここで，単語同士の意味的関連性の高さはこれらの単語がどの程度類似した文脈で出現しうるかによって定義する．たとえば，2章で挙げたsuitとprosecuteの場合，翻訳タームリスト候補内の意味的関連性が最も高いのは(裁判，起訴)であるからこれを選択する．形式的には，n個のタームから成る入力タームリストS=s_1^nに対する最適な翻訳タームリストB(s_1^n)=T=t_1^n=t_1,,t_nは次の式で与えられる[]ここで，rel(T)は翻訳ームリスト候補Tに対するの値で\ikdあるいは単に\kdと呼ぶ．本研究では以下で示すようにを単語空間(WordSpace\citeSchuetze97)と呼ばれる多次元ベクトル空間を用いて定義する．</section>
  <section title="アルゴリズム">３章で述べたの定義には重心（平均）を求める操作が含まれているため，動的計画法などのような部分問題への分割を前提とした効率的なアルゴリズムが適用できない．従って，基本的には各翻訳タームリスト候補に対して総当たり的にを計算する方法によらざるを得ない．この問題に対して本研究では以下に示すような枝刈りを適用して計算量の削減を図った．</section>
  <subsection title="総当たり法（基本アルゴリズム）">根接点を1段目としてi段目の節点から出るリンクがi番目のタームに対する訳語候補に対応するような探索木を考える(図に例を示す)．この木の各葉接点(図の右端の節点)が一つの翻訳タームリスト候補に対応する．枝刈りの前提となる総当たり法とはこの探索木を深さ優先で辿り，葉節点に到達するたびにを計算することによってが最大の候補を決定する方法である．</subsection>
  <subsection title="枝刈り"/>
  <subsubsection title="準備">入力タームリストS=s_1^nを先頭のm:個(m&lt;n)からなるs_1^mの部分と残りのs_m+1^nの部分に分ける．s_1^nに対する翻訳タームリスト候補のうち，s_1^mに対する訳語をu_1^mに固定した時，が最大であるものをC_m(S,u_1^m)で表わすと次の不等式が成立する(なお，付録にこの不等式の簡単な証明を示す)．rel(C_m(S,u_1^m))m*rel(u_1^m)+(n-m)*rel(B(s_m+1^n))neqnarrayここで，B(s_m+1^n)は入力がs_m+1^nの場合の最適な翻訳タームリストである．従って，式()の右辺は，u_1^mに対するの値とs_m+1^nの部分のみを考えた場合の最適な翻訳タームリスト(B(s_m+1^n))のの値をそれぞれのタームの個数で重みを付けて平均したものとなる．この不等式は，s_1^mの部分に対する訳語をu_1^mに固定したとき，m+1以降のタームに対する訳語をどのように選んでもタームリスト全体のの値が右辺を越えないこと（上限）を表している．なお，等号が成り立つのはu_1^mの重心とB(s_m+1^n)の重心（の方向）が一致する時である．</subsubsection>
  <subsubsection title="枝刈り手法">前記の不等式()を用いて「総当たり法」に対する次のような枝刈りを行なう．この枝刈りを含んだアルゴリズム全体の計算量は最悪の場合，すなわち，枝刈りが一回も起こらなかった場合，元の総当たり法の計算量と前処理の計算量の和になるため，元の総当たり法より計算量が増える．しかし，実際には後述するように50%以上計算時間が短縮される．</subsubsection>
  <section title="評価実験">新聞記事から抽出したタームリストに対して本手法を適用し，多義解消精度，処理効率に関する評価実験を行った．実験手順は次の通りである．英語の新聞記事から単語を抽出して入力タームリストを作成する作成されたタームリストに対して英和辞書引きを行い訳語候補を得る提案手法，および，既存の他の手法によって多義解消を行いこれらの結果を人手で作られた正解と比較する．この実験を「翻訳実験」と呼ぶ．翻訳実験は本手法本来の用途に沿ったものであるが，「正解」を人手で作成する必要があるため客観性を保持して大量のデータを用意するのにはコストがかかる．そこで，補助的な実験として，より大量の入力に対して「再翻訳実験」と呼ばれる実験を行った．再翻訳実験とは，上記2で得られた(日本語)訳語候補の各々に対して逆方向の辞書(和英辞書)を引くことによって英語の訳語候補を作り，英語コーパスを使って多義解消を行うものである．この場合，元のタームリストを「正解」とする．以下では，まず実験条件について述べ，次に結果を述べる．</section>
  <subsection title="実験条件"/>
  <subsubsection title="コーパスと前処理">英語コーパスとして1994年下半期のNewYorkTimes(420MB)，日本語コーパスとして1994年の毎日新聞(140MB)を利用した．英語コーパスについては，まず，スペース等をデリミタとして単語単位に分割し，次に，log-likelihoodによって隣接共起性の強い2つの単語(たとえばvicepresidentなど)を一つにまとめる処理を行った．日本語コーパスに関してはJTAGを使って形態素単位に分割し，英語と同様に隣接共起性の強い2単語をまとめたものをタームとした．</subsubsection>
  <subsubsection title="入力タームリスト">入力タームリストは次の手順で作成した．前述の英語コーパスから400記事をランダムに選ぶ各記事について出現するタームの重要度をtf-idf値N_w)で与えられる．ここでtf_wはwのテキスト中での出現頻度,Nはテキストの総数N_wはwを含むテキストの数である．によって計算し上位から順に20単語抽出する．</subsubsection>
  <subsubsection title="訳語候補">前述の方法によって作られたタームリストに対して対訳辞書を引いて訳語候補を作成した．対訳辞書としては，入手が容易なことと約77000語という語彙の多さからEDICTを和英辞書として用い，英和辞書はこのEDICTを逆変換して作成した．なお，EDICTの単語1語あたり平均訳語数は1.72である．翻訳実験用前述の英語タームリストのうちさらにランダムに70個を選び，英和辞書を使って各タームに対する訳語候補を生成した．次に，これらの訳語候補の中から人手で正解(複数可)にマークした．あるタームの訳語候補の中に正解が存在しない場合，精度の判定ができないので，そのターム自体をリストから除いた．そして，最後に残ったものの中から重要度(tf-idf値)の大きい順に10個選んで実験用の入力とした．表に各タームリストの先頭n単語(ターム)を取り出した場合の総語数，平均訳語数，多義語数，平均多義数を示す．ここで平均訳語数とは1語あたりの訳語数を全タームに対してとった平均であり，平均多義数とは翻訳多義解消という観点からみたもので，多義性のあるタームのみを対象に訳語候補数を正解数で割ったもの(の平均)である．表によると平均多義数はおおよそ2.3であり．ランダムに訳語を選んだ場合，多義性のある単語に対する平均正解率は1/2.3=0.43となる．なお，正解訳語が存在しないために除かれたタームは全体の10%あり，そのうち64%が固有名詞，18%が複合語，残りが通常の単語であった．固有名詞の大部分は日本語テキストにはあまり出現しない人名や組織名などであり，基本的に訳語が一意に決まるため多義解消の対象にはならない．また，これらの単語は翻訳先言語に殆んど出現しない人名や組織名であるため(提案手法および比較に用いた他の手法において)他の語の多義解消に与える影響も少ない．複合語については個々の単語に分割して辞書引きするという方法もあり得るが，今回は単に辞書項目なしという扱いとした．再翻訳実験用再翻訳実験用の訳語候補は前述の400個のタームリスト全てを使い，各タームに対して，まず，英和辞書を引き，次に，得られた訳語の各々に対して和英辞書を引いて，それらの集合和を取り訳語候補とした．正解は元のタームである．なお，英和辞書に掲載されていないタームについては訳語候補を元の単語のみ(多義なし)とした．再翻訳実験用データの平均多義数はタームリスト長nに比例して増大する傾向にあり，n=2の時4．38，n=10の時5.42である．</subsubsection>
  <subsubsection title="多義解消用の共起行列">前述の形態素解析済み日本語コーパスから名詞，動詞などの内容語で頻度が上位から50,000までの語を選び，この中からさらに上位1,000語を選んで，前者を行と後者を列とするような共起行列(50,0001,000)を作成した．なお，2つの単語がコーパス内で50語以内に出現している時，これらが共起しているとした．得られた共起行列をSVDPACKCによって50,000x100の行列に変換した．再翻訳実験用の英語共起行列は英語コーパスのうち入力タームリストの作成に使った400記事を除いたものを使い上記と同様にして作成した(英語に関してはあらかじめ作られた「ストップ語リスト」に含まれない単語を内容語とした)．</subsubsection>
  <subsubsection title="低頻度語の扱い">訳語候補のうち共起行列に存在しないもの(上位50,000語に含まれないもの)に対しては単語ベクトルが未定義となってしまう．これらの単語についてはコーパス中でその前後20語に出現する単語のベクトルを平均した値を近似値として用いた．なお，コーパス中に一度も出現しない単語については訳語候補から削除した．</subsubsection>
  <subsection title="精度比較用アルゴリズム">比較のため二つの多義解消アルゴリズムを用いた．</subsection>
  <subsubsection title="訳語のユニグラム頻度に基づく方法(ユニグラム法)">一つ目の手法は「あるタームが複数の訳語を持つ場合，目的言語における出現確率(ユニグラム確率)が最大のものを選ぶ」という方式である．これをユニグラム法と呼ぶ．ある単語の目的言語における生起確率の推定値は，単純に，共起行列の作成に用いたコーパスにおけるその単語の出現数をコーパスの総語数で割ったものを用いた．</subsubsection>
  <subsubsection title="訳語間の相互情報量に基づく方法(訳語共起法)">二つ目の手法として，目的言語コーパスのみを用いた既存の多義解消手法の代表として訳語同士の共起頻度に基づくアルゴリズムを用いた．この手法では，各翻訳タームリスト候補について「共起スコア」を計算しこの値が最大のものを選ぶ．ある翻訳タームリスト候補に対する共起スコアはその翻訳タームリスト内の単語を2つ取り出してできる全ての組み合わせについて，目的言語コーパスから得られる2語共起のスコア（文献では相互情報量/(f_Af_B)で与えられる．ここで，Nは総語数，f_A,f_BはそれぞれA,Bの出現頻度を，f_ABはAとBとが一定の近さで出現する頻度を利用）を計算し，その総和を取ったものと同等である．なお，共起を判定する基準は我々の手法と同じく2つの単語が50語以内に出現することとした．</subsubsection>
  <subsection title="実験結果"/>
  <subsubsection title="日英翻訳における翻訳精度">翻訳実験では各タームリストの先頭からn個(nは2から10)取り出してできるタームリストに対して，4つの手法で多義解消を行ない精度の比較を行った．ここで，4つの手法とは，提案手法，SVDを適用する前の生の共起行列を使うもの，5.2で述べた2つの比較用アルゴリズムである．[t]figure*図にその結果を示す．ここで，図の縦軸は多義語1語あたりの翻訳正解率，横軸は入力タームリストの長さ(n)を表す．なお，「多義語1語あたりの正解率」とは全ての翻訳多義語（不正解訳語を候補として持つターム）の中でシステムの出力が正解だったものの比率である．5.1.3で述べた通り，ランダムに訳語を選択した場合の理論値は0.43となる．図中のProposed,Non-SVD,Unigramはそれぞれ，提案手法，提案手法で縮退共起行列の代わりに(SVDを適用する前の)共起行列を使うもの，ユニグラム法，に対応する．また，MI,MI'はどちらも訳語共起法の結果であるが，前者は適用不可能なもの(入力の19%)の正解率を0,後者はこれをランダム選択の場合の値(0.43)とした場合の正解率である．なお，訳語共起法に関する実験値は論文の値(MI=0.62,適用率=76%)とほぼ一致している図より明らかな通り，正解率の高い順にProposed,Non-SVD,Unigramとなり，この3つの中でのSVDを使った提案手法の有効性が検証された．訳語共起法との比較でも提案手法の方が高くなった．提案手法の正解率の最大値はタームリスト長8の時で77.4%，このときの多義性のない単語を含めた正解率(全体の正解率)は89.4%である．タームリスト長と正解率の関係であるが，提案手法では長さnが8，MIは5で正解率極大，non-SVDは9でわずかに極大となった．極大点が生じる理由としては，タームリストが長くなるにつれて文脈情報が増加するが，長くなりすぎると(tf-idf値の低い単語[ノイズ単語]が含まれるために)タームリスト中の単語の意味的関連性が下がるため，と考えられる．なお，手法によって極大点が異なるのはこれらタームリスト増加によるメリットとデメリットの影響が手法によって違うためであると考えられる．特に，MIの方が提案手法より小さいnで極大となるのは，前者の方法が基本的に2単語間の共起関係を用いてスコアを計算しているので，タームリスト全体でスコアを求める後者の方法より単語増加によるメリットを受けにくいためと推測できる．また，non-SVDにおいてはベクトルの信頼性が低いために少ない個数ではノイズの方が大きいことを示していると思われる．なお，これらの詳しい検証は今後の課題である．</subsubsection>
  <subsubsection title="再翻訳実験における翻訳精度">翻訳実験と同様にタームリスト長を変えて多義解消を行いProposed,Non-SVD,Unigramに対して翻訳精度を求めた．その結果を図に示す．図の見方は前節と同様である．なお，``-normalized''の付いているものは多義語に関する一語あたりの平均多義数が一定になるように正規化したものである．図より値の傾向は翻訳実験と同じであることが分かる．[t]figure*</subsubsection>
  <subsubsection title="枝刈りの効果">枝刈りの効果を調べるために，長さ8および10のタームリストに対して再翻訳実験を行ない，処理時間を測定した．縦軸にタームリスト一つあたりの処理時間(秒)，横軸に枝刈り判定ターム数(4.2章の「前処理」におけるkの値)を取ったグラフを図に示す．この図から明らかな通り，枝刈りによって60%-70%の削減となった．また，元のタームリストの長さの半分の長さを使って枝刈りの可否の判定を行なうと計算量はほぼ最小となることが分かった．さらに，ここで注目すべきなのは，判定ターム数が２でも計算時間は半分以下になるということである．</subsubsection>
  <section title="考察"/>
  <subsection title="失敗例の分析">失敗例のうち我々の手法に関係するものは次の２種類である．１つ目は多義解消すべき単語の出現する文脈が極めて近いものである．たとえば``share''に対する訳語の「シェア(市場占有率)」と「株」はどちらも会社の業績や将来性に関する文脈で出現するため識別が難しい．文翻訳であればのような統語的依存関係を用いてより精密な識別が可能であるが，タームリストの場合は難しい．２つ目は訳語候補が多義性を持つ場合である．ある訳語候補が多義性を持ち，その意味の一つが非常に一般的である（様々な単語と共起する）場合，この一般的な単語が訳語として選択されやすくなる．この理由として，この種の単語のベクトルは各次元に対して「平均的な」値を持つため，ベクトルの方向が他の単語の重心ベクトルの方向に近くなることが考えられる．後者の問題はDaganらによって既に指摘されており，解決法として１）より大きなコーパスで共起関係を学習する，２）パラレルコーパスを使う，という２点が挙げられている．これらに加えて，共起関係を学習する前にあらかじめ単言語の意味多義解消手法によってコーパス中の単語の意味多義を解消しておくことが考えられる．</subsection>
  <subsection title="関連研究">Daganらはテキスト中で統語的な依存関係(例えば，動詞-目的語,名詞-形容詞など)にある２つの単語を対象に，これらの単語に対する訳語候補の最適な組み合わせを決定する方法を提案した．訳語の組み合わせの妥当性は目的言語コーパス中でのこれらの共起頻度によって評価する．また，田中らは同一文に出現する任意個の単語を対象としてやはり目的言語側での共起頻度をもとに最適な訳語の組み合わせを求める手法を提案している．はじめに述べた通り，第一の相違点は彼らの方法がコーパス中の共起情報のうち訳語候補間に関する共起頻度しか利用していないのに対して，我々の方法はコーパス全体の共起情報から計算された高次の情報を使っていることである．第二の相違点は，彼らが目的言語コーパスから得られた共起頻度をそのまま使っているのに対して我々のはSVDによって一種のスムージングを施した値を使っている点である．すなわち，我々の方法はコーパス中の情報をより有効に利用していると考えられ，このことが精度向上の一つの理由だと考えられる．</subsection>
  <section title="おわりに">本論文ではタームリスト中の各単語のに着目した翻訳多義解消方式を提案した．本手法は多義語に対して平均77.4%の正解率を持ち，デフォールトのタームリスト翻訳結果として有用であると考えられる．また，本手法は，単語ごとに分割された目的言語のコーパスのみの教師なし学習に基づいており，入力や学習データに対する統語的解析を要さないという利点を持っている．今後の課題として学習コーパスから共起情報を取り出す際の最適な共起の範囲を自動的に決定すること，また，学習コーパス中の単語に対してあらかじめ多義解消をした場合の効果を評価することがあげられる．クロスランゲージ検索など実際の応用システムに適用した場合，また，通常の文翻訳に適用した場合の性能評価（クロスランゲージ検索の場合は適合率／再現率）も今後の課題である．</section>
  <section title="SVDによる共起行列の縮退">行列Aに対するSVDとは次の式を満たすU_0,S_0,V_0^-1を求めることである．A&amp;=&amp;U_0S_0V_0^Teqnarray*ここで，U_0U_0^T=V_0V_0^T=I(Iは単位行列),S_0は対角行列diag(s_0,...,s_n)でs_i&gt;s_j&gt;0if(i&gt;j)を満たす．S_0の対角要素のうちkより大きいものを全て0と置いたものをSとし，U_0,V_0の先頭からk列目までの部分行列をそれぞれU,Vとすると，A=USV^Teqnarray*はAの階数をkに落した近似になっている．Aを共起行列と考えるとw_i,w_jの類似性を表す行列はAA^Tで得られる．Aの代わりにAを使うと，AA^T=LSR^T(LSR^T)^T=LS(LS)^Teqnarray*となり，L,Sという次元の小さい行列によって単語間の類似性が計算できることが分かる．なお，さらに詳しい説明は文献を参照されたい．</section>
  <section title="不等式(4)の証明">S=s_1,,s_nに対応する任意の翻訳タームリストをT=t_1,,t_nその最初のm(mn)個からなるタームリストをt_1^m，残りをt_m+1^nとすると次の式が成立する．rel(T)m*rel(t_1^m)+(n-m)*rel(t_m+1^n)neqnarray[証明]Tの各タームに対応するベクトル(長さを1に正規化したもの)をx_1,,x_n,ターム集合T,t_1^m,t_m+1^nそれぞれに対するベクトル集合の重心をそれぞれg,g_1,g_2とすると，式()の左辺はrel(T)=1n_i=1^nprox(x_i,g)=1n_i=1^nx_igg=1nnggg=geqnarrayとなる(gはgの長さを表す)．右辺も同様に書き換えるとm*rel(t_1^m)+(n-m)*rel(t_m+1^n)n=m*g_1+(n-m)*g_2neqnarrayのようになる．ここで重心の定義からng=n*1n_i=1^nx_i=_i=1^mx_i+_i=m+1^nx_i=mg_1+(n-m)g_2eqnarrayが成立しているので，()の値は()と同じか大きい．なお，等号が成立するのはベクトルg,g_1,g_2の向きが同じ時である．(証明終)flushrightquotation式()のTの部分にC_m(S,u_1^m)=u_1,,u_m,z_m+1,,z_n=u_1^m,z_m+1^nを代入すると次の式が得られる．rel(C_m(S,u_1^m))m*rel(u_1^m)+(n-m)*rel(z_m+1^n)neqnarray一方，B(S)の定義よりrel(z_m+1^n)rel(B(s_m+1^n))eqnarrayであるから，()と()を組み合わせれば不等式()が得られる．(証明終)flushrightdocument</section>
</root>
