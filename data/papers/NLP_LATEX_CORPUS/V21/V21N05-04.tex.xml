<?xml version="1.0" ?>
<root>
  <jtitle>組合せ最適化入門：線形計画から整数計画まで</jtitle>
  <jauthor>梅谷俊治</jauthor>
  <jabstract>線形計画問題において変数が整数値を取る制約を持つ整数計画問題は，産業や学術の幅広い分野における現実問題を定式化できる汎用的な最適化問題の1つであり，最近では分枝限定法に様々なアイデアを盛り込んだ高性能な整数計画ソルバーがいくつか公開されている．しかし，整数計画問題では線形式のみを用いて現実問題を記述する必要があるため，数理最適化の専門家ではない利用者にとって現実問題を整数計画問題に定式化することは決して容易な作業ではない．本論文では，数理最適化の専門家ではない利用者が現実問題の解決に取り組む際に必要となる整数計画ソルバーの基本的な利用法と定式化の技法を解説する．</jabstract>
  <jkeywords>組合せ最適化，線形計画，整数計画，数理最適化</jkeywords>
  <section title="はじめに">線形計画問題において全てもしくは一部の変数が整数値を取る制約を持つ（混合）整数計画問題は，産業や学術の幅広い分野における現実問題を定式化できる汎用的な最適化問題の1つである．近年，整数計画ソルバー（整数計画問題を解くソフトウェア）の進歩は著しく，現在では数千変数から数万変数におよぶ実務上の最適化問題が次々と解決されている．また，商用・非商用を含めて多数の整数計画ソルバーが公開されており，整数計画問題を解くアルゴリズムを知らなくても定式化さえできれば整数計画ソルバーを利用できるようになったため，数理最適化以外の分野においても整数計画ソルバーを利用した研究が急速に普及している．最適化問題は，与えられた制約条件の下で目的関数f(x)の値を最小にする解xを1つ求める問題であり，線形計画問題は，目的関数が線形で制約条件が線形等式や線形不等式で記述される最も基本的な最適化問題である．通常の線形計画問題では，全ての変数は連続的な実数値を取るが，全ての変数が離散的な整数値のみを取る線形計画問題は整数（線形）計画問題と呼ばれる．また，一部の変数が整数値のみを取る場合は混合整数計画問題，全ての変数が0,1の2値のみを取る場合は0-1整数計画問題と呼ばれる．最近では非線形の問題も含めて整数計画問題と呼ばれる場合が多いが，本論文では線形の問題のみを整数計画問題と呼ぶ．また，混合整数計画問題や0-1整数計画問題も区別せずに整数計画問題と呼ぶ．整数変数は離散的な値を取る事象を表すだけではなく，制約式や状態を切り替えるスイッチとして用いることが可能であり，産業や学術の幅広い分野における現実問題を整数計画問題に定式化できる．組合せ最適化問題は，制約条件を満たす解の集合が組合せ的な構造を持つ最適化問題であり，解が集合，順序，割当て，グラフ，論理値，整数などで記述される場合が多い．原理的に，全ての組合せ最適化問題は整数計画問題に定式化できることが知られており，最近では，整数計画ソルバーの性能向上とも相まって，整数計画ソルバーを用いて組合せ最適化問題を解く事例が増えている．現実問題を線形計画問題や整数計画問題に定式化する際には，線形式のみを用いて目的関数と制約条件を記述する必要がある．こう書くと，扱える現実問題がかなり限定されるように思われる．実際に，線形計画法の生みの親であるDantzigもWisconsin大学で講演をした際に「残念ながら宇宙は線形ではない」と批判を受けている．しかし，正確さを失うことなく現実問題を非線形計画問題に定式化できても最適解を求められない場合も多く，逆に非線形に見える問題でも変数の追加や式の変形により等価な線形計画問題や整数計画問題に変換できる場合も少なくない．そのため，現実問題を線形計画問題や整数計画問題に定式化してその最適解を求めることは，実用的な問題解決の手法として受け入れられている．現在では，整数計画ソルバーは現実問題を解決するための有用な道具として数理最適化以外の分野でも急速に普及している．一方で，数理最適化の専門家ではない利用者にとって，線形式のみを用いて現実問題を記述することは容易な作業ではなく，現実問題を上手く定式化できずに悩んだり，強力だが専門家だけが使う良く分からない手法だと敬遠している利用者も少なくない．そこで，本論文では，数理最適化の専門家ではない利用者が，現実問題の解決に取り組む際に必要となる整数計画ソルバーの基本的な利用法と定式化の技法を解説する．なお，最近の整数計画ソルバーはアルゴリズムを知らなくても不自由なく利用できる場合が多いため，本論文では，線形計画法，整数計画法の解法および理論に関する詳しい説明は行わない．線形計画法については，整数計画法についてはが詳しい．また，線形計画法，整数計画法の発展の歴史についてはが詳しい．</section>
  <section title="線形計画問題と整数計画問題">線形計画問題は，目的関数が線形で制約条件が線形等式や線形不等式で記述される最適化問題であり，一般に以下の標準形で表される．ここで，a_ij,b_i,c_jは定数，x_jは変数である．制約式を全て満たす変数値の組を実行可能解と呼び，実行可能解全体の集合を実行可能領域と呼ぶ．実行可能解の中で目的関数の値を最小にする解が最適解であり，このときの目的関数の値を最適値と呼ぶ．線形計画問題はc^TxAxb,x0と記述される場合も多い．ここで，各変数の非負条件x_j0を（非負）整数条件x_jZ_+（Z_+は非負整数集合）に置き換えると整数計画問題となる．線形計画問題では効率の良いアルゴリズムが開発されており，一番最初に単体法が1947年にDantzigによって提案されている．単体法は実用的には優れた性能を持つが，理論的には多項式時間アルゴリズムではない．その後，初めての多項式時間アルゴリズムとなる楕円体法が1979年にKhachiyanに，さらに実用的にも高速な内点法が1984年にKarmarkarによって提案されている．現在では，単体法と内点法が実用的なアルゴリズムとして広く使われている．性能では内点法の方が優れているが，単体法は制約式や変数を追加して解き直す再最適化を効率良く実行できるため，単体法を用いた再最適化は整数計画問題を解く上で重要な役割を担っている．整数計画問題は実行可能解の数が有限となる場合が多く，理論上は全ての実行可能解を列挙すれば最適解が求められる．しかし，この種の列挙法は問題の規模の増加とともに走査する解の個数が急激に増加（組合せ的爆発）するため実用的ではない．整数計画問題はNP困難と呼ばれる問題のクラスに属することが計算の複雑さの理論により知られている．詳しい説明は省略するが，NP困難問題の最適解を求めようとすると，最悪の場合に全ての実行可能解を列挙するのと本質的に変わらない計算時間が必要であろうと予想されている=NP予想として有名である．．整数計画問題では，分枝限定法と切除平面法が代表的なアルゴリズムとして知られている．分枝限定法は，直接解くことが難しい問題をいくつかの小規模な部分問題に分解する分枝操作と，生成された部分問題のうち何らかの理由で最適解が得られないと判定されたものを除く限定操作の2つの操作を繰返し適用するアルゴリズムで，整数計画問題以外にも多くの最適化問題で使われている．整数計画問題に対する分枝限定法は1960年にLandとDoigによって提案されており，暫定解（これまでの探索で得られた最良の実行可能解）から得られる最適値の上界値と，線形計画緩和問題（各変数の整数条件を緩和して得られる線形計画問題）を解いて得られる最適値の下界値を利用した限定操作で無駄な探索を省くアルゴリズムである．切除平面法は1958年にGomoryによって提案されており，線形計画緩和問題から始めて，切除平面（実行可能な整数解を残しつつ線形計画緩和問題の最適解を除去する制約式）を組織的に生成し，線形計画緩和問題に逐次追加することで最終的に整数最適解を得るアルゴリズムである．切除平面法は単体では実用的なアルゴリズムではなく，現在では，分枝限定法の内部で切除平面を逐次追加し，変数値の固定や部分問題に対する下界値の改善を実現する分枝切除法が大きな成功を収めている．</section>
  <section title="整数計画問題の応用事例">これまで，産業や学術の幅広い分野における多くの現実問題が整数計画問題に定式化されてきた．ここでは自然言語処理の応用事例として文書の自動要約と文の対応付けを紹介する．</section>
  <subsection title="文書の自動要約">文書の自動要約は与えられた単数もしくは複数の文書から要約を生成する問題であり，与えられた文書から必要な文の組合せを選択する手法が知られている．文書要約の問題には，1つだけの文書が与えられる単一文書の要約と，同じトピックについて記述した複数の文書が与えられる複数文書の要約がある．まず，単一文書の要約を考える．m個の概念とn個の文と要約長Lが与えられる．概念iの重要度をw_i(&gt;0)，文jの長さをl_j，文jに含まれる概念iの数をa_ij0,1と表す．x_jは変数で，文jが要約に含まれるならばx_j=1，そうでなければx_j=0の値を取る．文jに含まれる概念の重要度の合計p_j=_i=1^mw_ia_ijはあらかじめ計算できるので，要約長Lを超えない範囲で重要度の合計が最大となる要約を構成する問題は以下の通りに定式化できる．この問題はナップサック問題と呼ばれるNP困難のクラスに属する組合せ最適化問題であるが，動的計画法や分枝限定法に基づく効率良いアルゴリズムが知られている．次に複数文書の要約を考える．複数の文書に類似した内容の文が含まれる場合はこれらの文が同時に選択され，生成された要約の中に類似した内容が繰返し現れる恐れがある．そこで，概念iが要約に含まれているならばz_i=1，そうでなければz_i=0の値を取る変数z_iを導入すると以下の通りに定式化できる．1番目の制約条件は，左辺の値に関わらずz_i=0の値を取れば必ず制約条件が満たされるため，最適解において概念iを含む文jが要約に含まれているにも関わらずz_i=0の値を取る場合があるように思われる．しかし，目的関数は最大化で各変数z_iの係数w_iは正の値であり，このような場合にはz_i=1の値を取れば改善解が得られるため，最適解では概念iを含む文jが要約に含まれていれば必ずz_i=1の値を取ることが分かる．この定式化では，重要度の高い概念が要約の中に繰返し現れても目的関数は増加しないので，冗長性を自然に抑えることができる．一方で，この問題は（ナップサック制約付き）最大被覆問題と呼ばれるNP困難のクラスに属する組合せ最適化問題であり，大規模な問題例では最適解を効率良く求めることは難しい．複数文書の要約を求める問題は，この他にも施設配置問題や冗長制約付きナップサック問題などに定式化されている．</subsection>
  <subsection title="文の対応付け">統計的機械翻訳では，対訳コーパスにおいて原言語文と目的言語文の対応付けが与えられている前提の下で処理が適用される．しかし，実際の対訳コーパスでは，文書同士の対応付けは行われていても，それらの文書に含まれる文同士の対応付けは行われていない場合が多い．そのため，対訳文書の間で文同士の正しい対応付けを求めることは，統計的機械翻訳の精度を上げるための重要な前処理となる．などは，対訳文書間で対応する文の出現順序が大きく入れ替わらないという前提で動的計画法に基づく文の対応付けを提案している．すなわち，対訳文書の組F，Eが与えられたとき，Fのi番目の文とEのj番目の文が対応するならば，Fのi+1番目の文に対応するEの文は，（存在するならば）j番目の近くにあるという前提で文の対応付けを行っている．しかし，文の出現順序が大きく入れ替わらないという前提はどの文書でも成り立つ性質ではない．まず，文書FとEの任意の文を出現順序に関わらず自由に対応付けても良い場合を考える．n_f個の文を含む文書Fとn_e個の文を含む文書Eが与えられる．文書Fのi番目の文と文書Eのj番目の文が対応付けられたときのスコアをs_ijと表す．x_ijは変数で，文書Fのi番目の文と文書Eのj番目の文が対応付けられるならばx_ij=1，そうでなければx_ij=0の値を取る．このとき，文書Fの文は文書Eの高々1つの文にしか対応付けられない（その逆も同様）という制約を課すと，スコアの合計が最大となる文の対応付けを求める問題は以下の通りに定式化できる．この問題は（2部グラフの）最大重みマッチング問題と呼ばれる組合せ最適化問題であり，ハンガリー法など効率良いアルゴリズムが知られている．文書FとEの任意の文を対応付けても良いという前提では，それぞれの文書において前後の文との繋がりを無視した対応付けを行うことになるため，段落のような文の系列（連続する文のまとまり）を単位として順序が入れ替わる場合には正しい順序付けができない可能性が高い．そこで，図に示すように，文書Fと文書Eをそれぞれ同数の文の系列に分割し，文の系列について一対一の対応付けを求めることを考える．文書Fのi番目からj番目までの文の系列をF[i,j](1ijn_f)，文書Eのk番目からl番目までの文の系列をE[k,l](1kln_e)とする．文pF[i,j]の文qE[k,l]の対応付けでは出現順序の入れ替わりはないとすると，の手法を適用することで文pF[i,j]と文qE[k,l]の最適な対応付けとスコアの合計w_ijklを計算できる．考えられ得る全ての文の系列の組(F[i,j],E[k,l])に対して，それらの系列に含まれる文同士の最適な対応付けとスコアの合計w_ijklをあらかじめ計算する．x_ijklは変数で，文の系列F[i,j]とE[k,l]が対応付けられるとx_ijkl=1，そうでなければx_ijkl=0の値を取る．各文pF,qEが対応付けられたいずれかの文の系列F[i,j],E[k,l]にちょうど1回ずつ含まれるという制約条件を用いて文の系列を一対一に対応付ける．このとき，スコアの合計が最大となる文の系列の対応付けを求める問題は以下の通りに定式化できる．この問題は集合分割問題と呼ばれるNP困難のクラスに属する組合せ最適化問題であり，大規模な問題例では最適解を効率良く求めることは難しい．統計的機械翻訳では，この他にもフレーズ（連続する単語列）の対応付けを求める問題が整数計画問題に定式化されている．</subsection>
  <section title="整数計画ソルバーを利用する">前節で紹介したように，実際に多くの現実問題が整数計画問題として定式化できる．一方で，整数計画問題を含む多くの組合せ最適化問題はNP困難のクラスに属することが計算の複雑さの理論により明らかにされている．こう書くと，多くの現実問題に対して最適解を求めることは非常に困難であるように思われるが，計算の複雑さが示す結果の多くは「最悪の場合」であり，全ての入力データに対して最適解を求めることは困難でも，多くの入力データに対して現実的な計算時間で最適解を求められる問題は少なくない．また，整数計画ソルバーは探索中に得られた暫定解を保持しているので，与えられた計算時間内に最適解が求められなくても，精度の高い実行可能解が求まれば，利用者によっては十分に満足できる場合も多く，整数計画ソルバーはそのような目的にも使われる．表に示すように，現在では，商用・非商用を含めて多数の整数計画ソルバーが利用可能である．商用ソルバーを利用するためには，数十万〜数百万円のライセンス料金が必要となる場合が多いが，無償の試用ライセンスや無償〜数十万円のアカデミックライセンスが用意されている場合も少なくない．一般的に，非商用ソルバーより商用ソルバーの方が性能は高いが，実際には商用ソルバーの中でもかなりの性能差がある．整数計画ソルバーのベンチマーク問題例に対する最新の実験結果によると，商用ソルバーでは，先に挙げたXpressOptimizationSuite,GurobiOptimizer,CPLEXOptimizationStudioの3つが，非商用ソルバーではSCIPが最も性能が高いようである．整数計画ソルバーを選ぶ際には，性能以外にも，扱える問題の種類，扱える問題の記述形式，インターフェースなどを考慮して，各自の目的に合った整数計画ソルバーを選ぶことが望ましい．利用可能な整数計画ソルバーについてはが詳しい．まず，整数計画ソルバーを用いて以下の問題例を解くことを考える．整数計画ソルバーの主な利用法には，(1)コマンドラインインターフェースを通じてソルバーを実行する方法，(2)最適化モデリングツールを通じてソルバーを実行する方法，(3)他のソフトウェアからAPIを通じてソルバーを実行する方法の3通りがある．1番目は，問題例をLP形式，MPS形式などで記述された入力ファイルを用意して整数計画ソルバーを実行する方法である．図は問題例()をLP形式で記述したものである．目的関数や制約条件の部分は，数式をほぼそのまま記述しているだけである．maximize,subjectto,bounds,general,endは予約語で，変数値の上下限や整数制約などをこれらの予約語を用いて記述している．LP形式は文法が平易で可読性が高く，多くの整数計画ソルバーが対応している．図は問題例()をMPS形式で記述したものである．MPS形式は1960年代にIBMによって導入された形式で，現在も標準的に使われているが可読性は低い．LP形式やMPS形式はプログラミング言語の配列のように変数をまとめて扱う記述ができない．つまり，LP形式やMPS形式で_j=1^100x_j3の数式を記述するには，x1+x2+(中略)+x100&lt;=3と書くしか方法がない．よって，大きな問題例を記述する場合には，適当なプログラム言語を用いてLP形式やMPS形式のファイルを生成するプログラムを作成する必要がある．2番目は，最適化モデリングツールが提供するモデリング言語で問題例を記述し，最適化モデリングツールを通じて整数計画ソルバーを実行する方法である．商用の最適化モデリングツールが提供するモデリング言語では，AIMMS,AMPL,GAMSなど，非商用では，MathProg,ZIMPLなどが知られている．図は問題例()をMathProg形式で記述したものである．多くのモデリング言語では，モデル部分とデータ部分を分離して記述できるため，数式を直感的にモデルに書き換えることが可能である．例えば，_j=1^100x_j3の数式は，sum(iin1..100)(x[i])&lt;=3と記述できる．現実問題を最適化問題に定式化できればすぐに整数計画ソルバーを利用できるので効率良いプロトタイピングが可能となる．一方で，最適化モデリングツールの購入とモデリング言語の習得が必要で，1番目の方法に比べると汎用性に欠ける．3番目は，整数計画ソルバーが提供するC,C++,Java,Python,Matlab,Excelなどのライブラリやプラグインを通じて整数計画ソルバーを実行する方法である．部分問題を解くためのサブルーチンとして整数計画ソルバーを利用する場合や，整数計画ソルバーの挙動を細かく制御したい場合はこの方法が効率的である．ただし，整数計画ソルバーやそのバージョン毎にライブラリやプラグインの仕様が異なるため汎用性と保守性に欠ける．最適化ソルバーの利用者にとって，与えられた問題例がどの程度の計算時間で解けるかを事前に見積ることは重要である．線形計画問題では，一部の特殊な問題を除けば変数や制約式の数を計算時間の目安にして差し支えない場合が多い．一方で，整数計画問題では，で報告されているように，10万変数，10万制約式で最適解を効率良く求められる問題例がある一方で，1,000変数程度でも最適解を求められない問題例があり，変数や制約式の数だけでは計算時間を見積れないことが知られている．整数計画ソルバーの現状や利用法についてはが詳しい．</section>
  <section title="線形計画問題に定式化する">線形計画問題では，数百万変数，数百万制約式の大規模な問題例でも現実的な計算時間で最適解を求められるが，線形式のみを用いて目的関数と制約条件を記述する必要があるため，数理最適化の専門家ではない利用者にとって，現実問題を線形計画問題に定式化することは容易な作業ではない．しかし，一見すると非線形計画問題に見える問題も変数の追加や式の変形により等価な線形計画問題に変換できる場合は少なくない．現実問題を線形計画問題を定式化する際には，与えられた現実問題を線形計画問題で正確に記述できるか，または満足できる程度に近似できるか良く見極める必要がある．ここでは，一見すると非線形に見える最適化問題を線形計画問題に定式化するいくつかの方法を紹介する．</section>
  <subsection title="凸関数最小化問題">凸関数最小化問題は線形計画問題に近似できる．ここでは，図に示すように，1変数の凸関数f(x)を区分線形関数g(x)で近似する方法を考える．凸関数f(x)上のm個の点(a_1,f(a_1)),,(a_m,f(a_m))を適当に選んで線分で繋ぐと区分線形関数g(x)が得られる．この区分線形関数g(x)は凸関数なので，各区分を表す線形関数を用いて，と記述できる．このとき，各区分を表す線形関数の最大値を表す変数zを用意すると，区分線形関数g(x)の最小化問題は以下の線形計画問題に定式化できる．多変数の凸関数最小化問題でも，直線の集合の代わりに超平面の集合で凸関数を近似すれば同様に定式化できる．</subsection>
  <subsection title="連立1次方程式の近似解">全ての制約式を同時には満たせない連立1次方程式に対して，できる限り多くの制約式を満たす近似解を求める問題は目標計画法と呼ばれる．連立1次方程式に対して，その誤差をできる限り小さくする近似解x^=(x_1^,,x_n^)を求める問題を考える．このとき，平均2乗誤差1m_i=1^mz_i^2，平均誤差1m_i=1^mz_i，最悪誤差_i=1,,mz_iなどが評価基準として考えられる．これらの評価基準は，それぞれ誤差ベクトルz=(z_1,,z_m)のL_2ノルム，L_1ノルム，L_ノルムを最小化する近似解x^を求めることに対応する．応用事例では，誤差の分布がガウス分布に近いことを前提に，平均2乗誤差を評価基準として最小2乗法を用いて近似解を求める場合が多い．しかし，実際には外れ値が多いなど誤差の分布がガウス分布と全く異なる場合も少なくない．このような場合は，外れ値の影響を受けにくい平均誤差や最悪誤差を評価基準として近似解を求める方法が考えられる．平均誤差を最小化する近似解x^を求める問題は，制約式を持たない以下の最適化問題に定式化できる．これは一見しただけでは線形計画問題に見えないが以下の線形計画問題に変換できる．この方法で線形回帰問題を解くこともできる．m個のデータ(x_1,y_1),,(x_m,y_m)が与えられる．これをn個の関数_1(x_i),,_n(x_i)の線形結合を用いてy(x_i)w_0+w_1_1(x_i)++w_n_n(x_i)と近似する問題を考える．各データ(x_i,y_i)に対する平均誤差を最小にするパラメータw_0,,w_nを求める問題は以下の最適化問題に定式化できる．i番目のデータに対する誤差を表す変数z_iを用意すると以下の線形計画問題_iは与えられたデータなので_1(x_i),,_n(x_i)は定数となる．に定式化できる．最悪誤差を最小化する近似解x^を求める問題も制約式を持たない以下の最適化問題に定式化できる．これも一見すると線形計画問題に見えないが以下の線形計画問題に変換できる．この方法でk個の目的関数_j=1^nc_1jx_j,_j=1^nc_2jx_j,,_j=1^nc_kjx_jを同時に最小化する多目的最適化問題も解くことができる．まず，これらの目的関数の線形和を最小化する定式化が考えられる．しかし，いくつかの目的関数が極端に大きな値となる解が求まってしまう場合が少なくないため，全ての目的関数をバランス良く最小化することは容易ではない．そこで，これらの目的関数の最大値を最小化する定式化を考える．新たに目的関数の最大値を表す変数zを導入すると，この問題は以下の線形計画問題に変換できる．</subsection>
  <subsection title="比率の最小化">2つの関数の比を目的関数に持つ最適化問題は分数計画問題と呼ばれる．以下の2つの線形関数の比を目的関数に持つ分数計画問題を考える．ただし，_j=1^nd_jx_j&gt;0とする．ここで，新たな変数t=1/_j=1^nd_jx_jとy_j=tx_j(j=1,,n)を導入すると，この問題は以下の線形計画問題に変換できる．この変換は_j=1^nd_jx_jが常に同じ符号で0にならない場合のみ成立するので，必要があれば_j=1^nd_jx_j（は十分に小さな正の定数）などの制約式を追加すれば良い．</subsection>
  <section title="整数計画問題に定式化する">整数計画問題は整数変数を含む線形計画問題であるが，線形計画問題の方が整数計画問題よりもはるかに解き易い事実を考慮すれば，現実問題において離散値を取る量を決定するという理由だけで安易に整数変数を用いるべきではない．例えば，自動車や機械部品の生産数を決定する問題を整数計画問題に定式化することは必ずしも適切ではない．このような場合は，各変数の整数条件を取り除いた線形計画問題を解いて実数最適解を得た後に，その端数を丸めて最も近い整数解を求めれば十分に実用的な解となる場合が多い．実際に，多くの現実的な整数計画問題では，yes/noの決定や離散的な状態の切り替えを記述するために2値変数（0,1の2値のみを取る整数変数）を用いていることに注意する必要がある．ここでは，代表的な組合せ最適化問題を例に整数計画問題の基本的な定式化の技法を紹介する．もちろん，いくつかの組合せ最適化問題では効率良いアルゴリズムが知られているが，現実問題が既知の組合せ最適化問題と一致することは稀であり，これらの効率良いアルゴリズムをそのまま適用できるとは限らない．一方で，整数計画ソルバーであれば定式化を少し変形するだけで適用できる場合が多い．このように，代表的な組合せ最適化問題に対する整数計画問題の定式化を知れば，それらを雛形として変形もしくは組合せることで多種多様な現実問題を整数計画問題に定式化できるようになる．</section>
  <subsection title="整数性を持つ整数計画問題">整数計画問題は一般にはNP困難のクラスに属する計算困難な問題であるが，いくつかの特殊な整数計画問題は効率良く解けることが知られている．ここでは，制約行列Aが完全単摸行列である整数計画問題c^TxAxb,xZ_+^nを紹介する．任意の小行列式が0,1,-1のどれかに等しい行列Aは完全単摸行列と呼ばれる．Aが整数行列，bが整数ベクトルである線形計画問題c^TxAxb,x0について，Aが完全単摸行列で（実数）最適解が存在するならば，単体法を適用すると常に整数最適解xZ_+^nが得られる．有向グラフが与えられたとき，点の番号を行番号，辺の番号を列番号とする行列Aで，辺e=(i,j)に対応する列がa_ie=1,a_je=-1（その他は0）で与えられる行列は接続行列と呼ばれる．任意の有向グラフに対して，その接続行列は完全単摸行列となる．また，無向グラフの接続行列では辺に対応する列がa_ie=a_je=1（その他は0）で与えられる．無向グラフでは2部グラフであるときに限り，その接続行列は完全単摸行列となる．以下では，完全単摸行列を制約行列に持つ整数計画問題の例として最短路問題と割当問題を紹介する．最短路問題：有向グラフG=(V,E)と各辺(i,j)Eの長さd_ijが与えられる．x_ijは変数で，辺(i,j)Eが経路に含まれるならばx_ij=1，そうでなければx_ij=0の値を取る．このとき，与えられた始点sVから終点tVに至る最短路を求める問題は以下の通りに定式化できる．1番目と2番目の制約式は，始点sから出る辺と終点tに入る辺がちょうど1本ずつ選ばれることを表す．3番目の制約式は，訪問する頂点kでは出る辺と入る辺がちょうど1本ずつ選ばれ，それ以外の頂点では辺は選ばれないことを表す．割当問題：m人の学生をn個のクラスに割り当てる．クラスjの受講者数の下限をl_j，上限をu_j，学生iのクラスjに対する満足度をp_ijとする．x_ijは変数で，学生iがクラスjに割当てられればx_ij=1，そうでなければx_ij=0の値を取る．このとき，学生の満足度の合計が最大となる割当てを求める問題は以下の通りに定式化できる．1番目の制約式は，各学生iがちょうど1つのクラスに割当てられることを表す．2番目の制約式は，各クラスjに割当てられる学生の数が受講者数の上下限内に収まることを表す．最短路問題，割当問題はそれぞれダイクストラ法やハンガリー法など効率良いアルゴリズムが知られている．しかし，現実問題では実務上の要求から生じる制約条件が追加される場合が多いため，これらの効率良いアルゴリズムがそのまま適用できるとは限らない．一方で，与えられた現実問題を完全単摸行列に近い形の制約行列を持つ整数計画問題に定式化できる場合は，線形計画緩和問題から良い下界値が得られることが期待できるため，整数計画ソルバーを用いて現実的な計算時間で最適解を求められる場合は少なくない．完全単摸行列の性質についてはが詳しい．</subsection>
  <subsection title="論理的な制約条件">現実問題が既知の組合せ最適化問題と一致することは稀であり，実務上の要求から生じる制約条件が追加される場合が多い．ここでは，ナップサック問題を例にいくつかの論理的な制約条件とその記述を紹介する．ナップサック問題：1つの箱とn個の荷物が与えられる．箱に詰込める重さ合計の上限をc(&gt;0)，各荷物jの重さをw_j(&lt;c)，価値をp_jとする．x_jは変数で，荷物jを箱に詰めるならばx_j=1，そうでなければx_j=0の値を取る．このとき，価値の合計が最大となる荷物の詰込みを求める問題は以下の通り定式化できる．ちなみに，複数の制約式を持つナップサック問題は多制約ナップサック問題と呼ばれ，投資計画やポートフォリオ最適化などの応用を持つ．ナップサック問題についてはが詳しい．以下に，いくつかの論理的な制約条件とその記述を示す．詰込む荷物の数は高々k個．荷物j_1,j_2の少なくとも一方は詰込む．荷物j_1を詰込むならば荷物j_2も詰込む．詰込む荷物の数は0または2．もしくはyを使わずに，以下の通りにも記述できる．2番目以降の制約式は_j=1^nx_j=1を満たす解を除外しており，図に示すように，これらの制約式は実行可能解全体の凸包（全ての実行可能解を含む最小の凸多面体）から得られる．</subsection>
  <subsection title="固定費用付き目的関数">生産計画や物流計画など多くの現実問題では，取り扱う製品量によって生じる変動費用と段取替えなど所定の作業によって生じる固定費用の両方を考慮する場合が多い．例えば，xを単位費用c_1で生産される製品の生産量とする．もし，その製品が少しでも生産されれば初期費用c_2が生じるとすると，総費用f(x)は以下に示す非線形関数となる（Cは製品の生産量の上限とする）．そこで，少しでも製品を生産するならばy=1，そうでなければy=0の値を取る2値変数yを導入すると，総費用f(x)は以下の通りに記述できる．以下では，固定費用を持つ整数計画問題の例としてビンパッキング問題を紹介する．ビンパッキング問題：十分な数の箱とn個の荷物が与えられる．箱に詰込める荷物の重さ合計の上限をc(&gt;0)，各荷物jの重さをw_j(&lt;c)とする．x_ijとy_iは変数で，荷物jが箱iに入っていればx_ij=1，そうでなければx_ij=0，箱iを使用していればy_i=1，そうでなければy_i=0の値を取る．このとき，使用する箱の数が最小となる荷物の詰込みを求める問題は以下の通りに定式化できる．1番目の制約式は，箱iが使用されている場合は詰込まれた荷物の重さ合計が上限内に収まることを，箱iが使用されていない場合は荷物が詰込めないことを表す．2番目の制約式は，各荷物jがちょうど1つの箱に詰込まれることを表す．</subsection>
  <subsection title="離接した制約式">一般に，最適化問題では全ての制約式を同時に満たすことを求められるが，現実問題ではm本の制約式のうちちょうどk本だけを満たすことを求められる場合も少なくない．これは離接した制約式と呼ばれ，選択や順序付けなどの組合せ的な制約条件を記述する場合に用いられる．例えば，2つの制約式_j=1^na_1jx_jb_1と_j=1^na_2jx_jb_2(0x_ju_j,j=1,,n)の少なくとも一方が成立するという場合は，各制約式に対応する2値変数y_1,y_2を導入すれば以下の通りに記述できる．ここで，Mはを満たす十分に大きな定数（big-Mと呼ばれる）である．y_i=0の場合は，制約式の右辺はb_i+Mと十分に大きな値を取り，各変数x_jの取る値に関わらず必ず満たされる．以下では，離接した制約式を持つ整数計画問題の例として1機械スケジューリング問題と長方形詰込み問題を紹介する．1機械スケジューリング問題：n個の仕事とこれらを処理する1台の機械が与えられる．機械は2つ以上の仕事を同時には処理できないものとする．仕事iの処理にかかる時間をp_i(&gt;0)，納期をd_i(0)とする．s_iとx_ijは変数で，s_iは仕事iの開始時刻，x_ijは仕事iが仕事jに先行するならばx_ij=1，そうでなければx_ij=0の値を取る．このとき，仕事の納期遅れの合計が最小となる処理スケジュールを求める問題は以下の通りに定式化できる．納期遅れは仕事iの終了時刻s_i+p_iが納期d_iより後になる場合のみ生じるので，各仕事iに対する納期遅れはs_i+p_i-d_i,0と記述できる．1番目の制約式は，仕事iが仕事jに先行するならば仕事iの終了時刻が仕事jが開始時刻の前になることを表す．2番目の制約式は，仕事iが仕事jに先行するかもしくはその逆が必ず成り立つことを表す．目的関数が最大値の最小化なので，納期遅れを表す新たな変数t_i=s_i+p_i-d_i,0を導入すると整数計画問題に変換できる．長方形詰込み問題：図に示すように，幅が固定で十分な高さがある長方形の容器とn個の長方形の荷物が与えられる．容器の幅をW，各荷物iの幅をw_i，高さをh_iとする．荷物はその下辺が容器の下辺と平行になるように配置し，回転は許さないものとする．ここで，全ての荷物を互いに重ならないように容器内に配置する．(x_i,y_i)を荷物iの左下隅の座標を表す変数とすると（容器の左下隅を原点とする），問題の制約条件は以下の通りに記述できる．z_ij^left,z_ij^right,z_ij^lower,z_ij^upperは変数で，それぞれ荷物iが荷物jの左側，右側，下側，上側にあるならば1，そうでなければ0の値を取る．このとき，制約条件を満たした上で必要な容器の高さHを最小にする荷物の配置を求める問題は以下の通りに定式化できる．</subsection>
  <subsection title="非線形関数">非凸関数最小化問題は整数計画問題に近似できる．図に示すように，非凸関数f(x)上のm個の点(a_1,f(a_1)),,(a_m,f(a_m))を適当に選んで線分で繋ぐと区分線形関数g(x)が得られる．区分線形関数上の点(x,g(x))はある線分上にある．例えば，点(x,g(x))が(a_i,f(a_i))と(a_i+1,f(a_i+1))で結ばれる線分上にある場合は以下の通りに記述できる．これを考慮すると一般の場合も以下の通りに記述できる．ここで，2値変数z_1,,z_m-1を導入すると「高々2つの隣り合うt_iが正」という制約条件は以下の通りに記述できる．次に，2値変数で定義される非線形関数を線形関数に変換する方法を紹介する．まず，2値変数x_1とx_2の積y=x_1x_2を考える．このとき，(x_1,x_2,y)の実行可能解は(0,0,0),(1,0,0),(0,1,0),(1,1,1)の4通りなので以下の通りに記述できる．これらの制約式は実行可能解全体の凸包から得られる．同様にk個の2値変数の積y=_i=1^kx_iも以下の通りに記述できる．</subsection>
  <subsection title="グラフの連結性">グラフにおける最適化問題では選択した部分グラフの連結性が求められる場合が少なくない．ここでは，グラフの連結性を制約条件に持つ整数計画問題の例として最小全域木問題と巡回セールスマン問題を紹介する．無向グラフG=(V,E)の任意の頂点i,jVの間に路が存在するならばGは連結であると呼ぶ．図は連結なグラフと非連結なグラフの例である．これは，任意の頂点集合SV(S=)に対して，SとVSの間を繋ぐ辺が少なくとも1本は存在するという制約条件に置き換えられる．最小全域木問題：無向グラフG=(V,E)と各辺(i,j)Eの長さd_ijが与えられる．閉路を持たない連結な部分グラフは木，全ての頂点を繋ぐ木は全域木と呼ばれる．x_ijは変数であり，辺(i,j)は木に含まれるならばx_ij=1，そうでなければx_ij=0の値を取る．このとき，辺の長さの合計が最小となる全域木を求める問題は以下の通り定式化できる．1番目の制約式は，辺集合TEが全ての頂点を連結することを表し，カットセット制約と呼ばれる．2番目の制約式は，|T|=n-1を満たすことを表す．これらの制約式はTが全域木となるための必要十分条件である．巡回セールスマン問題：無向グラフG=(V,E)の全ての頂点をちょうど1回ずつ通る閉路は巡回路と呼ばれる．巡回路となるためには，各頂点kに接続する辺がちょうど2本でなければならない．しかし，これだけでは不十分で，図（左）に示すような部分巡回路を排除する必要がある．これは，任意の頂点集合SV(S=)に含まれる辺の本数が|S|-1以下であるという制約条件に置き換えられる．無向グラフG=(V,E)と各辺(i,j)Eの長さd_ijが与えられる．x_ijは変数で，辺(i,j)Eが巡回路に含まれるならばx_ij=1，そうでなければx_ij=0の値を取る．このとき，全ての頂点をちょうど1回ずつ訪問する最短の巡回路を求める問題は以下の通りに定式化できる．1番目の制約式は，各頂点に接続する辺がちょうど2本となることを表す．2番目の制約式は，部分巡回路を持たないことを表し，部分巡回路除去制約と呼ばれる．最小全域木問題のカットセット制約や巡回セールスマン問題の部分巡回路除去制約は，制約式の数がO(2^n)と膨大で，全ての制約式を書き下して整数計画ソルバーに解かせるのは現実的ではないため，必要に応じて制約式を逐次追加する切除平面法が必要となる．グラフの連結性を制約条件に持つ整数計画問題の定式化と解法については(藤江2011;久保，ペドロソ，村松，レイス2012)FujieT2011,KuboM2012が詳しく，新たな変数を導入して必要な制約式の数を抑える方法が紹介されている．</subsection>
  <section title="最適解が求められない場合の対処法">最近の整数計画ソルバーは非常に高性能ではあるものの，解候補を体系的に列挙する分枝限定法を探索の基本戦略とするため，与えられた問題例によってはいつまで待っても計算が終了しない場合が少なくない．ここでは，目的関数の値を最小化する整数計画問題を考える．分枝限定法は，整数計画問題を分枝操作によって小規模な部分問題に分解しつつ，各部分問題では，暫定解から得られる最適値の上界値と，線形計画緩和問題から得られる最適値の下界値を利用した限定操作によって無駄な探索を省いている．そのため，いつまで待っても整数計画ソルバーの計算が終了しないならば，(1)線形計画緩和問題の求解に多大な計算時間を要する，(2)限定操作が効果的に働いていないことなどが原因として考えられる．もちろん，整数計画ソルバーは分枝限定法以外にも多くのアルゴリズムを内包しているため，これだけが原因であると決めつけるべきではないが，対策を練る上でまず始めに確認すべき事項である．(1)については，原問題から各変数の整数条件を取り除いた線形計画問題を整数計画ソルバーで解けば計算時間を見積もることができる．実際には，整数計画ソルバーは再最適化と呼ばれる手法を利用するため，整数計画問題の各部分問題において線形計画緩和問題の求解に要する計算時間はもっと短くなる．しかし，この方法で線形計画問題を1回解くのに要する計算時間が長いと感じるようであれば，問題例の規模が整数計画ソルバーで解くには大き過ぎると判断するのが妥当であろう．ただし，集合被覆問題や集合分割問題などの線形計画緩和問題では，単体法と内点法で計算時間が大きく異なるため，（部分問題ではなく）原問題の線形計画緩和問題に適用するアルゴリズムを切り替えることで計算時間を大幅に削減できる場合もある．(2)については，(i)暫定解から得られる最適値の上界値が悪い場合，(ii)線形計画緩和問題から得られる最適値の下界値が悪い場合，(iii)多数の最適解が存在する場合などが考えられる．これらは，整数計画ソルバーの実行時に出力される最適値の上界値と下界値から確認できる．まず，(i)暫定解から得られる上界値が悪い場合を考える．これは，実行可能解が非常に少ないかもしくは存在しないため，整数計画ソルバーの実行時に良い実行可能解を発見できないことが原因として考えられる．このような場合は，制約式を必ず満たさなければならない制約式（絶対制約）とできれば満たして欲しい制約式（考慮制約）に分けた上で，優先度の低い考慮制約を緩和する方法がある．例えば，制約式_j=1^na_ijx_jb_iを_j=1^na_ijx_jb_i-（は適当な正の定数）に置き換える方法や，新しい変数z_i(0)とペナルティ係数p_i(&gt;0)を導入して_j=1^na_ijx_jb_i-z_iに置き換えた上で目的関数に新たな項+p_iz_iを加える方法などがある．また，利用者の持つ先験的な知識を利用して容易に実行可能解を求められるならば，利用者が持つアルゴリズムで求めた実行可能解を初期暫定解として整数計画ソルバーに与えることも可能である．次に，(ii)線形計画緩和問題から得られる最適値の下界値が悪い場合を考える．図に示すように，線形計画緩和問題の実行可能領域は，整数計画問題の実行可能解となる整数格子点のみを含む凸多面体となるため，同じ整数計画問題に対して線形計画緩和問題の最適値が異なる複数の定式化が存在する．つまり，整数計画問題では最適値の良い下界値が得られる強い定式化と，そうでない弱い定式化が存在する．ちなみに，最も強い定式化は整数計画問題の実行可能解全体の凸包を記述することであるが，凸包を記述する全ての制約式を求めることは，最悪の場合には全ての実行可能解を列挙することに他ならないため現実的な方法ではない．たしかに，制約式の数が少ない定式化の方が見栄えも良く，分枝限定法を適用した際にも各部分問題における線形計画緩和問題の求解に要する計算時間も短くなるように思われる．しかし，最適値の上界値と下界値の差が広がれば分枝限定法で生成される部分問題の数は急激に増加するため，安易に制約式を減らすべきではない．一方で，多くの整数計画ソルバーは冗長な制約式を前処理で除去するため，制約式が多少増えても計算時間にはあまり影響しない場合が多い．例えば，与えられた現実問題を完全単摸行列に近い形の制約行列を持つ整数計画問題に定式化できる場合は，線形計画緩和問題から良い下界値が得られることが期待できる．最後に，(iii)多数の最適解を持つ場合を考える．最適値の上界値と下界値の差が小さいにも関わらず，いつまで待っても整数計画ソルバーの計算が終了しないならば，整数計画問題が多数の最適解を持っている可能性がある．このような場合は，目的関数や制約式を変更して最適解の数を減らす方法がある．例えば，節で紹介したビンパッキング問題の定式化では，使用する箱の数が最小であれば使用する箱の組合せは何でも構わないため多数の最適解が生じる．そこで，必ず番号の小さい箱から順に使用するという制約式を追加すると最適解の数を減らすことができる．また，節で紹介した多目的最適化問題の定式化では，1変数からなる目的関数を持つ整数計画問題に変換するとやはり多数の最適解が生じる．このような場合は，いつまで待っても整数計画ソルバーの計算が終了しないならば線形和を最小化する定式化に変更した方が良い．また，目的関数_j=1^nc_jx_jの各項の係数c_jが全て同じ値を取る場合も多数の最適解が生じ易いため，可能ならば各項の係数c_jをいろいろな値に変えて最適解の数を絞り込む方が良い．最後に，いつまで待っても整数計画ソルバーの計算が終了しない場合には，最適解を求めることを諦めるのも1つの手である．整数計画ソルバーは探索中に得られた暫定解を保持しているので，与えられた計算時間内に最適解が求められなくても良い実行可能解が求まれば，利用者によっては十分に満足できる場合も多い．また，整数計画ソルバーは線形計画緩和問題を解いて得られる最適値の下界値も保持しているので，事後にはなるが得られた暫定解の精度も評価できる．実際に，整数計画ソルバーは近似解法としても高性能であり，メタヒューリスティクスなどの発見的解法を利用もしくは開発する前に，整数計画ソルバーで良い実行可能解が得られるかどうか確認するべきである．最適解が求められない場合の対処法についてはが詳しい．</section>
  <section title="おわりに">本論文では，数理最適化の専門家ではない利用者が，現実問題の解決に取り組む際に必要となる整数計画ソルバーの基本的な利用法と定式化の技法を解説した．整数計画ソルバーの解説は本論文が初めてではなく，オペレーションズ・リサーチの分野では同じ趣旨の解説がいくつか発表されている．また，現実問題を線形計画問題や整数計画問題に定式化する技法についてはが詳しい．これらの文献は，本論文では取り上げていない多くの内容を含んでいるので，整数計画ソルバーに興味を持たれた読者にはぜひ一読をお勧めする．document</section>
</root>
