<?xml version="1.0" ?>
<root>
  <jtitle>カテゴリ間の兄弟関係を活用した集合拡張</jtitle>
  <jauthor>高瀬翔岡崎直観乾健太郎</jauthor>
  <jabstract>集合拡張手法の多くはシードインスタンスだけを手掛かりに新たなインスタンスを取得するものであり，対象が複数のカテゴリであっても，各カテゴリのインスタンスの収集を独立に行う．しかし，複数カテゴリを対象にした集合拡張ではカテゴリ間の関係など，シードインスタンスとは別の事前知識も利用できる．本研究ではこのようなカテゴリ間の関係，特に兄弟関係を事前知識として活用した集合拡張手法を提案する．さらに，Wikipediaから半自動で抽出したインスタンスと兄弟関係を事前知識として実験を行い，兄弟関係が集合拡張に有用であることを示す．</jabstract>
  <jkeywords>知識獲得，集合拡張，ブートストラッピング，意味ドリフト</jkeywords>
  <section title="はじめに">自然言語の理解に向けて，常識的知識の獲得が重要である．特に意味カテゴリに属する固有表現のリストは，質問応答~，情報抽出~，語義曖昧性解消~，文書分類~，クエリ補完~など様々なタスクで有用である．固有表現リストを人手で構築すると多大なコストがかかるうえ，新しい実体や概念に対応できないため，固有表現リストを（半）自動的に獲得する方法が研究されてきた．集合拡張はある意味カテゴリに属する既知の固有表現の集合を入力とし，その意味カテゴリの未知の固有表現を獲得するタスクである．例えば「プリウス」，「レクサス」，「インサイト」という自動車カテゴリの固有表現から，「カローラ」，「シビック」，「フィット」のように自動車カテゴリに属する固有表現を新たに獲得する．なお本論文では，意味カテゴリに属する固有表現をその意味カテゴリのインスタンスと呼び，特に入力として与えるインスタンスをシードインスタンスと呼ぶ．集合拡張には通常，ブートストラッピング手法を用いる~．ブートストラッピング手法とはシードインスタンスを用いて新たなインスタンスを反復的に獲得する手法である．ブートストラッピング手法では，まず，コーパス中でシードインスタンスと頻繁に共起するパターンを獲得する．例えば自動車カテゴリについて「プリウス」や「レクサス」のようなシードインスタンスから「トヨタのX」や「ハイブリッド車のX」（Xは名詞句を代入する変数）のようなパターンが得られる．次にこれらのパターンと頻繁に共起するインスタンス，すなわち，パターンの変数X部分に多く現れる名詞句を獲得する．例えば「トヨタのX」というパターンからトヨタの自動車製品を表す語が得られる．次に新たに得られたインスタンスをシードインスタンスに加え，再びパターンの獲得を行う．ブートストラッピング手法はこのようにパターンの獲得とインスタンスの獲得を繰り返し行うことにより，少数のシードインスタンスから大規模なインスタンス集合を獲得する．しかしブートストラッピング手法はシードインスタンス集合とは無関係なインスタンスを獲得してしまう場合もある．これは対象とする意味カテゴリのインスタンス以外とも共起するパターンによって引き起こされる．例えば「プリウス」や「レクサス」といったシードインスタンスから「新型のX」というパターンを獲得したとすると，このパターンを用いることにより，「iPad」や「ThinkPad」のようなシードとは無関係なインスタンスを抽出してしまう．ブートストラッピング手法において，対象とする意味カテゴリとは無関係なインスタンスを獲得してしまう現象を意味ドリフトと呼ぶ~．意味ドリフトはブートストラッピング手法において非常に重大な問題である．ブートストラッピング手法は意味カテゴリに関する事前知識をシードインスタンスという形で受け取っている．しかしながら，シードインスタンスのみで意味カテゴリを正確に表現することは難しく，意味ドリフトが引き起こされる．一方，事前知識として，Wikipediaにおける意味カテゴリ間の上位下位・兄弟関係に見られるように，シードインスタンス以外の知識を得られる場合がある．例えば人カテゴリに属するインスタンスは男優と女優カテゴリに同時に属することはできないという知識や，自動車と自動二輪カテゴリという2つの異なったカテゴリが共通の特徴（例：乗り物，ガソリン式，陸上）と異なる特徴（例：タイヤの数，窓の有無）を持つというような知識が入手できる．近年，テキストに非明示的な情報を推論するため，MachineReadingproject~に見られるように大規模なテキストコーパスを利用し，ありとあらゆる種類の語彙知識を獲得しようとする研究が盛んである．意味カテゴリのインスタンスの収集においても，Carlsonら~のように，複数のカテゴリを対象として同時に収集を行う需要が高まっている．このような場合には，シードインスタンス以外に，意味カテゴリ間の関係も事前知識として利用できると考えられる．本研究では，複数の意味カテゴリを対象とした集合拡張において，事前知識として意味カテゴリ間の兄弟関係を活用する手法を提案する．評価実験では，Wikipediaから抽出したインスタンスと兄弟関係を事前知識として集合拡張を行い，兄弟関係の知識が有用であることを示す．本論文の構成は以下の通りである．2節では本研究のベースライン手法であるEspressoアルゴリズムを概説する．また，この節では意味ドリフト問題とその対処法に関する先行研究を紹介する．3節では意味カテゴリの兄弟関係を追加の事前知識として活用する手法を提案する．4節では提案手法の効果を実験で検証し，考察を行う．最後に5節で本論文の結論を述べる．</section>
  <section title="関連研究"/>
  <subsection title="Espressoアルゴリズム">Espresso~は，パターンの取得とインスタンスの取得の2つのステップを反復する集合拡張アルゴリズムである．パターンの取得とインスタンスの取得は共に，コーパスからの候補の抽出と，候補のランキングという同じ手順にもとづいている．候補の抽出では既に獲得したインスタンスと共起するパターン，既に獲得したパターンと共起するインスタンスを抽出する．候補のランキングでは候補インスタンス／パターンのスコアを計算し，上位N個の候補を採用する．Espressoアルゴリズムでは候補パターンpのスコアr_(p)と候補インスタンスiのスコアr_(i)を，それぞれ式~()と式~()で計算する．r_(p)=1|I|_iI(i,p)r_(i)	_(i)=1|P|_pP(i,p)r_(p)	(i,p)=_2(|i,p||i,*||*,p|discountingfactor)	discountingfactor=|i,p||i,p|+1((|i,*|,|*,p|)(|i,*|,|*,p|)+1)	gatherPとIは各カテゴリにおけるパターンとインスタンスの集合である．|P|と|I|はそれぞれ集合PとIに含まれるパターンとインスタンスの数である．|i,*|と|*,p|はインスタンスiとパターンpのコーパス中での出現頻度であり，|i,p|はインスタンスiとパターンpの共起頻度である．すなわち，式~()における右辺第1項はインスタンスiとパターンpの自己相互情報量である．自己相互情報量は単語間の相関の指標として一般的であるが，めったに出現しない単語に対して値が大きくなってしまうという問題がある．これに対処するため，PantelとRavichandranは式~()に示されるdiscountingfactorを導入した~．また，maxpmiはカテゴリ内のすべてのインスタンスとパターンのpmiの最大値である．なお，初期値としてシードインスタンスのスコアは1.0とする．Espressoアルゴリズムの動作を説明する．始めに，シードインスタンスと共起するパターンを候補として抽出する．次に，式~()で候補パターンのスコアを計算し，上位N個のパターンを獲得することで，対象とする意味カテゴリに対応するパターンを獲得する．インスタンスの獲得については，獲得したパターンと式~()を用い，上記の手順をパターンとインスタンスを逆にして行うことで達成する．すなわち，獲得したパターンと共起するインスタンスを候補として抽出し，式~()で高スコアのパターンとよく共起するインスタンスを獲得する．</subsection>
  <subsection title="意味ドリフト">ブートストラッピング手法においてシードとは無関係なインスタンスを獲得してしまい，対象とするカテゴリから逸脱してしまう現象を意味ドリフトと呼ぶ~．例として，「プリウス」や「レクサス」をシードインスタンスとして持つ自動車カテゴリについて考える．Espressoアルゴリズムは何回か反復を行うと「Xの性能」や「新型のX」など多くのカテゴリのインスタンスと共起するパターン（ジェネリック・パターン）を得る．これらのパターンを用いてインスタンスの収集を行うと，「iPad」や「ThinkPad」のようなインスタンスが抽出され得る．これらは対象とする意味カテゴリの特徴を備えておらず，シードが表そうとしている意味カテゴリとは無関係なインスタンスである．しかしながら，これらの間違ったインスタンスを獲得してしまうことで，アルゴリズムの取得するパターンは元々の想定からかけ離れたものになってしまう．また意味ドリフトは多義性のある語によっても引き起こされる．例えば自動車メーカーのシードとして「サターン」や「スバル」を与えた場合，ブートストラッピング手法は「木星」や「天王星」のような星カテゴリに属するインスタンスを獲得してしまう．これは「サターン」や「スバル」に多義性があり，自動車メーカーだけでなく天体（惑星や恒星）も表す語だからである．小町ら~はEspressoアルゴリズムをグラフ解析の観点から分析することで，ブートストラッピング手法において，意味ドリフトが本質的には回避できない問題であることを示した．</subsection>
  <subsection title="g-Espressoアルゴリズム">小町ら~はEspressoアルゴリズムをグラフ解析として定式化し，さらに意味ドリフトへの対処として，グラフカーネルの適用を提案した．彼らはまず，Espressoアルゴリズムを行列計算によって定式化した．なお，ここではEspressoアルゴリズムにおける，毎回の反復において上位N個の候補を獲得する，というステップが省略されており，全パターンと全インスタンスにスコアを付与する形になっている．インスタンスとパターンの共起行列をMとし，その(p,i)要素[M]_piは式~()のpmiを用いて，とする．また，シードインスタンスに対応する位置の要素は1，それ以外の要素は0である，|I|次元のベクトルをシードベクトルi_0とする．このとき，n回目の反復におけるパターンへのスコアの付与は，p_n=Mi_nを計算した後にp_np_n/|I|として正規化する操作に対応する．同様に，インスタンスへのスコアの付与は，i_n+1=M^Tp_nを計算した後にi_n+1i_n+1/|P|として正規化する操作に対応する．したがって，n回目の反復後に得られるインスタンスのスコアベクトルi_nは，式~()と書ける．i_n=A^ni_0	A=1|I||P|M^TMgatherIをノード集合，Aを隣接行列とした重み付き無向グラフGを考えると，反復におけるインスタンスのスコアの更新は，シードインスタンスのスコアがグラフ上を伝播していく過程と見なすことができる．よって，グラフカーネルによりこの過程を形式化することが可能である．小町ら~はジェネリック・パターンの影響を減らし，意味ドリフトを抑制するために，正則化ラプラシアンカーネル~を用いた．まず，グラフGのラプラシアンLを式~()によって求める．L=D-A	[D]_i,i=_j^[A]_ijgather次に，正則化ラプラシアンカーネルを式~()で計算する．正則化ラプラシアンカーネルはそれぞれのノードに対し，次数に応じて接するエッジの重みを減ずる．このため，ジェネリック・パターンの影響を低く抑えることができる．萩原ら~はこのグラフ理論によって再定式化したEspressoアルゴリズムをg-Espressoと呼び，集合拡張において意味ドリフトを抑制する効果があることを示した．</subsection>
  <subsection title="意味ドリフトへの対処">意味ドリフトの影響を軽減するために，小町ら~や萩原ら~の手法に加え，シードインスタンス集合の洗練~，分類器の使用~，人間の判断の導入~，意味カテゴリ間の関係の活用~など様々な手法が提案されている．Vyasらはブートストラッピング手法におけるシードインスタンスの影響を調査した~．その結果，専門家でない人の選んだシードインスタンス集合はランダムに選択したものよりも結果が悪くなる可能性があることを示した．また彼らは，人手で作成されたシードインスタンス集合を洗練し，集合拡張の性能を向上させる手法を提案した．Bellareらはブートストラッピング手法のランキング時にスコア関数の代わりに分類器を使用する手法を提案した~．分類器を用いる手法はインスタンスのランキング時にパターン以外の素性を使うためである．SadamitsuらはBellareらの手法~を拡張し，LatentDirichletAllocation(LDA)から推定されるトピック情報を素性として使用する手法を提案した~．彼らはまた，意味的に近いカテゴリの情報を与え，LDAのトピックの粒度を調整する手法も提案している~．PennacchiottiとPantelは分類器のためのトレーニングデータを自動で収集する手法を提案した~．しかしながら，これらの研究は複数の意味カテゴリに対して同時に集合拡張を行うことを想定しておらず，節で説明したような，意味カテゴリ間の関係知識の利用を考慮していない．VyasとPantelは意味ドリフトの原因となったパターンを検出し，それを削除する手法を提案した~．彼らは意味ドリフトを防ぐため，ブートストラッピング手法の反復に人間の正否判定を取り入れた．彼らの手法では，人手によって誤りインスタンスが発見された場合，その誤りインスタンスとそれを獲得する原因となったパターンを除去する．また，同様の誤りを防ぐため，誤りインスタンスと類似した文脈ベクトルを持つインスタンスも除去する．彼らもカテゴリ間の関係のような事前知識は使用していない．Curranらはブートストラッピング手法にカテゴリ間の排他制約を導入した，MutualExclusionBootstrappingという手法を提案した~．MutualExclusionBootstrappingは，インスタンスやパターンの属するカテゴリはただ1つであるという制約を取り入れたものである．複数のカテゴリに出現するインスタンスやパターンには曖昧性があり，意味ドリフトの原因になると考えられる．そこで，曖昧性のあるインスタンスやパターンを除去することにより，彼らの手法は高い精度を達成した．同じく排他関係を使用する手法としてCarlsonらはCoupledPatternLearner(CPL)アルゴリズムを提案した~．CPLアルゴリズムは意味カテゴリのインスタンス（例：自動車カテゴリのインスタンス）と関係インスタンス（例：CEO-of-Companyという関係に対する(LarryPage,Google)やCompany-acquired-Companyに対する(Google,Youtube)）を同時に収集する手法である．CPLアルゴリズムはこれらのインスタンスを取得するために，カテゴリ間の排他関係とカテゴリ間の意味的関係（例：CEOカテゴリのインスタンスは会社カテゴリに属するインスタンスのうちいずれかのCEOである）を使用する．しかしながら，カテゴリ間の意味的関係は関係インスタンスの取得にしか用いられておらず，意味カテゴリのインスタンスについては複数カテゴリに対する排他制約という事前知識しか用いていない．Curranら~とCarlsonら~はどちらも事前知識としてシードインスタンスだけではなくカテゴリ間の排他関係も利用している．しかし，意味カテゴリ間には上位下位や兄弟関係など排他関係以外の関係も存在する．兄弟関係は共通の特徴を持つべきであるカテゴリについての知識であり，排他関係という，インスタンスが同時に属さないカテゴリに関する知識とは別種のものである．兄弟関係についての知識はWikipediaのような既存のリソースから容易に取得することができるため，事前知識として利用しやすい．本研究では，既存のリソースから入手できるカテゴリ間の兄弟関係に関する知識を事前知識として集合拡張に導入し，その有用性を検証する．</subsection>
  <section title="提案手法"/>
  <subsection title="兄弟カテゴリのパターンによるフィルタリング">本節では，意味カテゴリ間の兄弟関係を事前知識として活用する手法を提案する．以降では，兄弟関係にあるカテゴリの集合を兄弟グループと呼ぶこととする．例えば，自動車と自動二輪のカテゴリは兄弟関係にあるため，同一の兄弟グループに属する．本研究では，同一の兄弟グループに含まれるインスタンスは共通の特徴を保有していると仮定する．例えば，自動車と自動二輪の兄弟グループに含まれるインスタンスは「乗り物」や「ガソリン式」という特徴を持ち，「乗る」や「燃費」などの語と係り受け関係を持ちやすい．この兄弟グループに共通の特徴を持っていないインスタンスは，正しいインスタンスである可能性が低いと考えられる．そのため，提案手法は兄弟グループのシードインスタンス集合を利用して兄弟グループに共通の特徴を取得し，グループ内の候補インスタンスがこの共通の特徴を保有しているか否かを検証することで，誤ったインスタンスの獲得を防ぐ．同一の兄弟グループに属する自動車と自動二輪カテゴリについて，提案手法を用いて集合拡張の際の誤りインスタンスを除去する例を図~に示す．提案手法はまず，この兄弟グループのインスタンスに共通の特徴として，「乗る」や「燃費」という表現と係り受け関係を持ちやすいという知識を得る．既存のブートストラッピング手法では，自動車カテゴリにおいて「新型のX」というパターンを獲得してしまった場合，シードや兄弟グループとは無関係のインスタンスである「iPad」を除去することができない．これに対して，提案手法では候補インスタンスが「乗る」や「燃費」と係り受け関係にある文節に出現しているかを，インスタンスの獲得（厳密には候補のランキング）の前に検証することによって，「iPad」のような誤りインスタンスを取り除くことができる．この結果，提案手法は「カムリ」のような兄弟グループに共通する特徴を持つインスタンスのみを獲得する．ここで，兄弟グループに共通の特徴が，対象とする意味カテゴリ以外も包含してしまうと，意味ドリフトが発生してしまう．これを防ぐために，兄弟グループ間は排他関係にあるとし，兄弟グループに共通の特徴は対象としている兄弟グループに固有の特徴とする．本研究では兄弟グループに共通の特徴は「乗る」や「燃費」などの表現によって表されると仮定する．このような表現をフィルタパターンと呼ぶ．提案手法では，候補インスタンスがフィルタパターンと共起しているか，すなわち，候補インスタンスがフィルタパターンと係り受け関係にある文節に出現しているかの検証を行うことで，インスタンスが兄弟グループに共通の特徴を保有しているかを確認する．この確認はインスタンスの獲得の直前に行い，候補インスタンスの抽出法については，既存の手法を用いる．すなわち，提案手法はEspressoアルゴリズムやg-Espressoなどの既存手法と組み合わせて利用することができる．</subsection>
  <subsection title="Espressoアルゴリズムをベースとした手法">[t]algorithmEspressoアルゴリズムを利用し，図~のアイディアをアルゴリズムとして記述したものがAlgorithm~である．このアルゴリズムは入力として対象とするカテゴリの集合C，S_1からS_Tまでの兄弟グループ，それぞれのカテゴリcCに対応するシードインスタンス集合I_c，反復の回数L，コーパスWを受け取る．兄弟グループはそれぞれCの部分集合であり，また，互いに素である．まず，行目から行目において各兄弟集合S_jに対するフィルタパターンF_S_jを選択する．次に行目において兄弟グループS_j内の各カテゴリcのインスタンスを関数Espresso_Exclusionを用いて取得する．Espresso_Exclusionは要素のそれぞれがインスタンスi，カテゴリc，スコアsのタプル，すなわち(i,c,s)からなるリストRを返す．この関数において，インスタンスの抽出とスコアの計算は，~節で説明したEspressoアルゴリズムに，兄弟グループのカテゴリ間でパターンに対する排他制約を導入した手法を用いて行う．本研究ではパターンはインスタンスと係り受け関係にある文節と定義する．例えば，「プリウス」というインスタンスと図~に示す文が与えられたとする（図~では文を文節で区切り，係り受け関係を文節間の矢印で表現している）．このとき，プリウスと同じ意味クラスに属するインスタンスを取得するためのパターンとして，を得る．ここで，係り受け関係の向きについて，インスタンスを含む文節が別の文節に係るときを「」で，別の文節がインスタンスを含む文節に係るときを「」で表している．関数Espresso_Exclusionでは，「X販売を」や「X新型」のように，係り受け関係の向きも含めた表現形式をパターンとする．次にRに含まれる候補インスタンスiが兄弟グループに共通の特徴を持つか否かの検証を，関数Filterによって行う（行目）．関数Filterは行目から行目に書かれている通りであり，Rに含まれるiがそれぞれフィルタパターンfと共起しているかどうかを検証する．この関数はフィルタパターンと共起しているインスタンスをそのスコアとともにリストとして返す．言い換えれば，この関数はフィルタパターンの集合Fによって表される兄弟グループに共通の特徴を保有していないインスタンスを除去している．兄弟グループ内でのドリフトを防ぐため，提案手法は兄弟グループのカテゴリ間に排他制約を導入している．パターンやインスタンスが兄弟グループ内の複数のカテゴリで出現している場合，提案手法はそれらが属するべき最適なカテゴリをただ1つ決定する．提案手法ではこの決定をランキングの結果をもとに行う．例えば自動車と自動二輪カテゴリにおいて「X→マフラー」というパターンが出現していたとする．ランキングの結果，もしこのパターンが自動車カテゴリでは13位であり自動二輪カテゴリでは4位だったとすると，このパターンは自動二輪カテゴリにのみ属するものとする．すでに説明したように，Algorithm~において関数Espresso_Exclusionはパターンに対する排他制約が導入されているものであるとしており，インスタンスに対する排他制約は行目から行目に実装されている．提案手法ではスコアsを元に，行目から行目での排他制約を適用しながら，反復数（l回目）に応じて上位Nl個のインスタンスを獲得する．すべてのカテゴリについて新たなインスタンスの取得が終わった後，次の反復へと進む．入力として与えた回数だけ反復した後，アルゴリズムはそれぞれのカテゴリcCに対応するインスタンス集合I'_cを出力する．</subsection>
  <subsection title="g-Espressoをベースとした手法">正則化ラプラシアンカーネルを利用したg-Espressoによるインスタンスの抽出と，フィルタパターンによる候補インスタンスの特徴の検証を組み合わせた手法を，アルゴリズムとして記述したものがAlgorithm~である．このアルゴリズムはAlgorithm~の入力から反復回数Lを除いたものを入力として受け取る．[b][1]algorithmAlgorithm~はAlgorithm~と同様，まず各兄弟集合S_jに対するフィルタパターンF_S_jを選択する．次に兄弟グループS_j内の各カテゴリcについて，候補インスタンス集合I_v_cとパターンの集合P_v_cを関数Espressoによって，抽出する~（行目）．関数Espressoは節において説明したEspressoアルゴリズムによって，パターンとインスタンスのスコアを計算し，上位N_pattern個のパターンと上位N_instance個のインスタンスを返す関数である．なお，ここでのパターンも節での関数Espresso_Exclusionで用いたものと同様，「X発表した」のような係り受け関係の向きも含めたものとする．g-Espressoは対象とするカテゴリ毎に，コーパス中の全パターンと全インスタンスを対象とした計算を行うため，ウェブページなどの大規模コーパスや，複数の意味カテゴリを対象とした場合には計算量が膨大になってしまう．計算量を抑えるため，萩原ら~はブートストラッピング手法によって計算対象を制限し，その後グラフカーネルを適用する手法を用いた．本手法でも同様に，Espressoアルゴリズムによってシードインスタンス集合と相関の高いパターン／インスタンスをP_v_c，I_v_cとして抽出し，g-Espressoへの入力とする．なお，今回は萩原ら~を参考にN_pattern=2,000とし，N_instance=2,000|S_j|とした．次に候補インスタンス集合I_v_cに含まれるインスタンスが兄弟グループに共通の特徴を持つか否かの検証を，Algorithm~における関数Filterを用いて行う~（行目）．次にP_v_cと関数Filterの返したI_v_cを対象とし，g-Espressoによってインスタンスのスコアを計算する．これは関数g-Espressoを用いて行う~（行目）．関数g-Espressoは要素のそれぞれがインスタンスi，カテゴリc，スコアsのタプルからなるリストRを返す．最後にAlgorithm~と同様に，兄弟グループのカテゴリ間での排他制約を考慮しつつ，各カテゴリについて，スコアの上位N_all個のインスタンスを獲得し~（行目から~行目），I'_cとして出力する．</subsection>
  <subsection title="フィルタパターンの獲得">既に説明したように，提案手法はインスタンスが兄弟グループに共通の特徴を持っているか否かをフィルタパターンを用いて判定する．この節ではフィルタパターンの獲得方法について述べる．フィルタパターンの獲得は候補の抽出とランキングの2つのステップからなる．候補の抽出では，兄弟グループのシードインスタンスと共起しているパターンを集める．例えば，自動車と自動二輪カテゴリからなる兄弟グループに対し，自動車か自動二輪カテゴリに含まれるシードインスタンスと共起しているパターンを抽出する．フィルタパターンは兄弟グループの特定のカテゴリのインスタンスを取得するためのものではなく，兄弟グループに無関係のインスタンスを除去するためのものであるため，兄弟グループに共通の特徴をとらえていることが望ましい．しかし，インスタンスとの係り受け関係の向きや，助詞や副詞など構成する語を厳密に指定する形式にしてしまうと，正解インスタンスまで取り除いてしまう可能性もある．このため，フィルタパターンは係り先，係り元といった係り受け関係の向きを考慮せず，さらに名詞と動詞に限定する．すなわち，フィルタパターンはEspressoアルゴリズムやg-Espressoで用いたパターンとは異なり，「乗る」や「エンジン」，「愛車」などの，インスタンスと係り受け関係にある文節に出現する名詞や動詞とする~．候補のランキングでは，抽出された候補の中からフィルタパターンとして最適なものを選択する．兄弟グループに含まれる意味カテゴリのインスタンスが獲得されるには，フィルタパターンと共起する必要がある．そのため，兄弟グループに属するインスタンスとできるだけ多く共起するようなフィルタパターンが適している．また，フィルタパターンによって，インスタンスが兄弟グループに共通の特徴を保有しているかどうかを検証するため，兄弟グループ内のカテゴリに均等に出現するようなフィルタパターンが適している．この2つの要素をそれぞれ網羅性と平等性として定式化し，これにもとづいてフィルタパターンの選択を行う．フィルタパターンは兄弟グループに属する正しいインスタンスを網羅するようなものであることが望ましい．そのため，兄弟グループ中の多くのシードインスタンスと共起しているパターンが適している．例として，自動車と自動二輪カテゴリのフィルタパターンについて考える（図~）．図~において，パターンは斜体で表されている．また，パターンの下の四角で覆われた枠内の文字はシードインスタンスであり，特にパターンと共起しているものは太字で示してある．この図の(a)において，パターン「乗る」は「マイナーチェンジ」よりも多くのシードインスタンスと共起しているため，よりフィルタパターンに適していると考える．この要素を網羅性と呼び，Coverageという指標で測定する．ある兄弟グループS_jに属するパターンfのCoverageは次の式~()を用いて計算する．Coverage(S_j,f)=_cS_j_iI_ccooccur(f,i)_cS_j|I_c|	cooccur(f,i)=.gatherI_cはカテゴリcのシードインスタンス集合であり，|I_c|はカテゴリcのシードインスタンスの数である．cooccur(f,i)はインスタンスiがパターンfと共起しているか否かを表しており，共起しているなら1を，していなければ0を返す関数である．よって，_iI_ccooccur(f,i)はカテゴリcに属し，かつパターンfと共起しているシードインスタンスの数を表す．さらに，フィルタパターンはインスタンスが兄弟グループに共通の特徴を保有しているかどうかを検証するためのものであるため，特定のカテゴリに偏って出現しているパターンは不適当である．したがって，パターンは兄弟グループ内のカテゴリのうち，2つ以上で出現していなければならないとする．図~の(b)において，「エンジン」というパターンは自動車と自動二輪の両方のカテゴリのインスタンスと共起しているが，「トヨタ」は自動車カテゴリのみでしか出現していない．このため「トヨタ」はフィルタパターンとしては不適当とし，候補から除去する．また，図~の(b)では「乗る」というパターンは両方のカテゴリのインスタンスと均等に共起しているため，「エンジン」よりもフィルタパターンとして適している．この，パターンが兄弟グループ内のそれぞれのカテゴリのインスタンスと，どれだけ均等に共起するかという要素を平等性と呼ぶ．兄弟グループ内のあるカテゴリのインスタンスとパターンが共起するとき，パターンがそのカテゴリに出現したと定義すれば，平等性は兄弟グループ内での，パターンがどのカテゴリに出現するかの分散の大きさと言える．このため，平等性は情報量(Entropy)を用いて測定できる．ある兄弟グループS_jに属するパターンfのEntropyは次の式~()を用いて計算する．Entropy(S_j,f)=-_cS_jP_c(f)_|C|P_c(f)	_c(f)=_iI_ccooccur(f,i)_cS_j_iI_ccooccur(f,i)gather|C|はパターンfの出現しているカテゴリの数である．もしパターンfが兄弟グループ内のそれぞれのカテゴリのインスタンスと均等に共起したとすると，Entropy(S_j,f)は最も高い値(1.0)となる．網羅性と平等性の両方の観点において優れているパターンを獲得するため，パターンfのスコアを次の式~()を用いて計算する．各兄弟グループS_jの候補パターンfについてScore(S_j,f)を計算し，兄弟グループに共通の特徴を特に表していると考えられる，上位15個を兄弟グループのフィルタパターンとして獲得する．なお，兄弟グループが他の兄弟グループへ意味ドリフトしてしまうことを防ぐため，兄弟グループ間は排他関係にあるとする．そのため，複数の兄弟グループで候補となっているフィルタパターンについては，属する兄弟グループをただ1つ決めなければならない．この決定はフィルタパターンの出現頻度にもとづいて行う．すなわち，兄弟グループ内のシードインスタンスとの共起頻度の和をフィルタパターンの兄弟グループ内での出現頻度とし，これが最大である兄弟グループにのみフィルタパターンは属するとする．これにより，それぞれの兄弟グループに固有のフィルタパターンが得られる．このフィルタパターンを用いることで，兄弟グループに共通の特徴を持たない，無関係なインスタンスを除去できる．</subsection>
  <section title="実験"/>
  <subsection title="実験設定">本節では集合拡張において，カテゴリ間の兄弟関係を事前知識として使用することの効果を実験的に検証する．実験ではEspressoアルゴリズム~，Espressoアルゴリズムにカテゴリ間の排他制約を加えたもの（Espresso+排他制約），Espressoアルゴリズムにカテゴリ間の排他制約と兄弟関係を事前知識として加えたもの（提案手法（ベース：Espresso））のブートストラッピング手法と，g-Espressoアルゴリズム~，g-Espressoアルゴリズムにカテゴリ間の排他制約と兄弟関係を事前知識として加えたもの（提案手法（ベース：g-Espresso））のグラフカーネルを用いた手法について比較を行う．グラフカーネルを用いた手法における，正則化ラプラシアンカーネルの拡散パラメータは萩原ら~と同様，=5.010^-4とした．ブートストラッピング手法では反復毎に，各カテゴリのインスタンスとパターンの獲得数を15個ずつ増加（すなわちN=15）させた．集合拡張は未知のインスタンスを取得するタスクであるため，再現率を正確に測定することは難しい．そのため，各手法の比較は，同じ数のインスタンスを取得した際の適合率を比べることによって行う．さらに，各手法の出力した正解インスタンスの集合を正解セットと考え，再現率を疑似的に計算し，比較する．なお，獲得インスタンスの正否は3人の評価者によって判定する．節で説明したように，近年では，全てのカテゴリのインスタンスを収集する需要が高まっている．このため実験では，Carlsonら~のように，様々な種類のカテゴリを対象とする．代表的なカテゴリをまんべんなく対象とするため，関根の拡張固有表現階層のリストとWikipediaを参考に，人手で41個のカテゴリを実験対象として選択した．対象カテゴリは表~に示した通りであり，この表に示した全てのカテゴリについて，同時に集合拡張を行う．なお，表~ではカテゴリを兄弟グループが同一のものでまとめてあり，兄弟グループ間は罫線によって区切られている．兄弟グループは同じ上位カテゴリを持つカテゴリの集合となるよう，Wikipediaを参考に人手で作成した．各カテゴリはただ1つの兄弟グループに属するものとし，各兄弟グループは2つ以上のカテゴリを含む．シードインスタンスについてはWikipediaから自動でインスタンスを抽出するツール~を利用し，各カテゴリ毎に15個ずつ用意した．なお，自動で抽出した結果には誤りも含まれているため，人手によって誤りインスタンスを除去している．実験には1億1千万の日本語ウェブページをコーパスとして用いた．ウェブページ中の文は日本語係り受け解析器であるKNP~を用いて係り受け構造を解析した．また，計算時間を削減するため，出現頻度が2回以下であるパターンとインスタンスは除去している．</subsection>
  <subsection title="結果">ブートストラッピングの反復を10回行った際の，各手法における全カテゴリでの獲得インスタンス数とその適合率を図~に示す．グラフカーネルを用いた手法では，ブートストラッピングと同数のインスタンスを獲得した際の適合率を示している．また，提案手法ではフィルタパターンにおいて係り受け関係の方向を指定しないとしていたが，この効果を確認するため，フィルタパターンにおいて係り受け関係の方向を指定した手法での結果も記した．この図より，Espresso+排他制約はEspressoよりも適合率が上昇していることがわかる．Espresso+排他制約の適合率はEspressoと比べると，4,305個のインスタンスを獲得したときに最も上昇し，2.4%高い．また，10回の反復後，すなわち6,765個のインスタンスを獲得したときには1.3%上昇している．提案手法（ベース：Espresso）はEspresso+排他制約よりもさらに適合率が上がっており，Espressoと比べると，4,305個のインスタンスを獲得したときには4.4%上昇し，6,765個のインスタンスを獲得したときには2.1%上がっている．さらに，g-Espressoと提案手法（ベース：g-Espresso）を比較しても，提案手法の適合率が上昇していることがわかる．提案手法（ベース：g-Espresso）の適合率はg-Espressoと比べ，3,690個のインスタンスを獲得したときに最も上昇し，6.1%高い．この結果から，カテゴリ間の兄弟関係についての事前知識は意味ドリフトの抑制に寄与し，集合拡張の精度を向上させることがわかる．また図~より，フィルタパターンにおいて係り受け関係の方向を指定した手法では，Espressoよりも適合率が上昇するが，提案手法（フィルタパターンにおいて係り受け関係の方向を指定しない場合）よりは適合率が低いことがわかる．したがって，フィルタパターンにおいて係り受け関係の方向まで指定することは厳しすぎる制約であり，フィルタパターンを用いて兄弟グループの共通性を検証する際には，係り受け関係の方向を指定する必要はないことがわかる．小町ら~や萩原ら~はグラフカーネルを用いることにより，意味ドリフトが抑制できることを示した．しかし，図~において，グラフカーネルを用いた手法であるg-Espressoの適合率はEspressoより低い．これは，~節で説明したように，グラフカーネルを適用するパターンと候補インスタンスを制限しているためであると考えられる．例えば，ヨーロッパの国カテゴリについて，「ドイツ」というシードインスタンスから「Xサッカー選手一覧」，「Xキーパーは」というパターンが抽出されるため，「強豪」や「代表」のような，対象とする意味カテゴリとは無関係なインスタンスのスコアが高くなってしまう．この問題について萩原ら~は，グラフの範囲を広げることで解消できるとしたが，複数の意味カテゴリを対象にした集合拡張では，計算量を抑えるためにグラフはできるだけ小さくせねばならず，避けられない問題であると考えられる．再現率を疑似的に計算するため，反復を10回行った（すなわち各カテゴリで165個のインスタンスを獲得した）ときの，各手法で獲得した正解インスタンスの和集合を正解セットとして，反復毎の適合率と再現率を計算した．この結果を図~に示した．図~より，提案手法（ベース：Espresso）はEspresso，Espresso+排他制約よりも性能が良く，また，提案手法（ベース：g-Espresso）はg-Espressoよりも性能が良いことがわかる．これより，提案手法は再現率を保ったまま，適合率を上昇させることが可能であると言える．適合率，再現率共に高いブートストラッピング手法に着目し，さらに詳しい分析を行う．まず，各手法における取得インスタンスの傾向を調べる．同じ兄弟グループに属する神社と寺カテゴリについて，各手法で反復を5回行った際の，獲得インスタンスのうち上位15個を表~に示す．なお，表~ではインスタンスを正解と誤りに分けて記している．表~によると，EspressoとEspresso+排他制約は多くの誤りインスタンスを獲得しているが，誤りの傾向には違いがある．Espressoは「八幡宮」や「太宰府天満宮」，「浅草寺」など，いくつかのインスタンスを神社と寺カテゴリの両方に属するものとしてしまっている．これに対して，Espresso+排他制約はインスタンスが複数カテゴリに所属しないように，インスタンスの属するただ1つのカテゴリを選択しており，Espressoのような誤りは発生していない．すなわち，排他制約は意味ドリフトを緩和する効果があることがわかる．しかしながら，Espresso+排他制約は寺カテゴリにおいて，「袋屋醤油店」や「あだしのまゆ村」など，対象カテゴリとは無関係のインスタンスを多く獲得してしまっている．提案手法は兄弟グループの共通性についての知識を利用することにより，このような誤りインスタンスを除去することに成功している．この結果から，兄弟関係は集合拡張に対して，有用な情報であることがわかる．[3]反復を5回行った際の，各カテゴリにおける各手法の獲得インスタンスの適合率を表~に記す．また表~には提案手法の適合率の，Espressoからの上昇率も示した．さらに，それぞれの兄弟グループでのフィルタパターンのうち，上位3つをそのスコアとともに記した．表~より，提案手法とEspresso+排他制約は多くのカテゴリにおいてEspressoよりも適合率が上昇していることがわかる．この結果は，カテゴリ間の排他関係と兄弟関係は集合拡張の精度を向上させることを示している．しかしながら，いくつかのカテゴリにおいては適合率が下がっており，兄弟関係の知識が有効に働いていないようである．この原因は以下の2つに分類されると考えられる．フィルタパターンのスコアが低いベースラインでの適合率が高い()の場合は自動車メーカーと医薬品メーカー，美術館と劇場など，兄弟グループのカテゴリすべてで適合率が下がっている．例えば，自動車メーカーと医薬品メーカーカテゴリについては，Espressoと比べ，適合率がそれぞれ14.44%，2.22%下がっている．この2つのカテゴリを含む兄弟グループでは，最もスコアの高いフィルタパターンでさえスコアが0.1837とかなり低い．各兄弟グループで取得したフィルタパターンのスコアの最大値と，その兄弟グループの適合率のEspressoからの上昇率を図~に記した．さらに図~には一次近似曲線を引き，スコアと上昇率の相関を示した．この図より，取得したフィルタパターンのスコアの最大値が低いほど上昇率が下がり，スコアが0.6以下の場合にはEspressoよりも精度が悪くなることがわかる．フィルタパターンのスコアとは，兄弟グループの共通性を表したパターンをフィルタパターンとして取得できるよう，兄弟グループのシードインスタンスを用いて計算されたものである．つまり，取得したフィルタパターンのスコアが低いということは，提案手法がフィルタパターンに必要な要素である，網羅性と平等性を持つパターンを見つけられなかったことを示唆している．網羅性と平等性を持つパターンを獲得できなかった原因は，自動車メーカーと医薬品メーカーなど共通性の少ないカテゴリを兄弟グループとしてしまったためであると考えられる．兄弟グループの選択による提案手法への影響については，今後調査していきたい．映画監督やコメディアンカテゴリは~()にあてはまる．()の場合，Espressoにおいて意味ドリフトは起こっていないにもかかわらず，提案手法はフィルタを適用し，正解インスタンスを削除してしまっている．言い換えれば，提案手法は誤りインスタンスよりも正解インスタンスを多く除去してしまっている．この原因としては，フィルタパターンはシードインスタンスによってのみ決定されるため，ブートストラッピングの反復中に新たに抽出したインスタンスによってもたらされる，兄弟グループの共通性を扱えていない可能性がある．これに対処するために，ブートストラッピングの反復中にフィルタパターンを更新することが必要であると考えられる．しかし，新たに獲得したインスタンスを用いてフィルタパターンを更新した場合，意味ドリフトを抑制する効果が失われてしまうことも考えられるため，更新は慎重に行わなければならない．フィルタパターンの更新方法については今後の課題である．</subsection>
  <section title="まとめ">本論文では，ブートストラッピングにおいて，カテゴリ間の兄弟関係を事前知識として利用する手法を提案し，兄弟関係が集合拡張に対して有用な知識であることを示した．実験では，提案手法はベースラインであるEspressoアルゴリズムと比べ，適合率を最大で4.4%向上させた．しかしながら，節において述べた通り，提案手法にはいくつかの副作用もある．この副作用の原因は，共通性の少ない兄弟グループの設計と，フィルタパターンを更新しないためであると考えられる．これらの要因への対処は今後の課題である．また，本研究ではカテゴリ間の兄弟関係がカテゴリのインスタンスを収集する際に有用な情報であることを示したが，今後は，この手法を関係インスタンスの取得に拡張していきたい．すなわち，関係（例：is-president-ofやis-citizen-of）間にある含意関係や因果関係を利用して，関係インスタンスを獲得する手法を構築したい．</section>
</root>
