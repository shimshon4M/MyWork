<?xml version="1.0" ?>
<root>
  <jtitle>文体と難易度を制御可能な日本語機能表現の言い換え</jtitle>
  <jauthor>松吉俊佐藤理史</jauthor>
  <jabstract>日本語には，「にたいして」や「なければならない」に代表されるような，複数の形態素からなっているが，全体として1つの機能語のように働く複合辞が多く存在する．われわれは，機能語と複合辞を合わせて機能表現と呼ぶ．本論文では，形態階層構造と意味階層構造を持つ機能表現辞書を用いることにより，文体と難易度を制御しつつ，日本語機能表現を言い換える手法を提案する．ほとんどの機能表現は，多くの形態的異形を持ち，それぞれの異形は，その文体として，常体，敬体，口語体，堅い文体のいずれかをとる．1つの文章においては，原則として，一貫して1つの文体を使い続けなければならないため，機能表現を言い換える際には，文体を制御する必要がある．また，文章読解支援などの応用においては，難易度の制御は必須である．実装した言い換えシステムは，オープンテストにおいて，入力文節の79%(496/628)に対して，適切な代替表現を生成した．</jabstract>
  <jkeywords>言い換え，複合語表現，複合辞，文体，難易度</jkeywords>
  <section title="はじめに">言い換えとは，ある言語表現を意味が等価な別の言語表現に変換する処理のことである．自然言語処理においては，言い換えはさまざまな応用をもっており，例えば，情報検索，機械翻訳，文章作成支援，文章読解支援などに応用されることが期待されている．日本語表現の言い換えは，これまで多くの研究者によって研究されてきたInui2004．これらの研究のほとんどは，内容語や複合語に関するものであり，例えば，複合名詞の言い換えに関する研究Sato1999,Kimura2002や動詞句の言い換えに関する研究Kaji2004,Furihata2004などがある．日本語の表現は，内容的・機能的という観点から，おおきく2つに分類できる．さらに，「表現を構成する語の数」という観点を加えると，表~のように分類できる．ここで，複合辞とは，「にたいして」や「なければならない」のように，複数の語から構成されているが，全体として1つの機能語のように働く表現のことである．われわれは，機能的というカテゴリーに属する機能語と複合辞を合わせて機能表現と呼ぶ．内容表現の言い換えに関する研究に比べて，機能表現の言い換えに関する研究は著しく少ない．ほとんどすべての文および文節には，1つ以上の機能表現が含まれているのであるから，日本語表現を幅広く言い換えるためには，図~に示されるように，内容表現だけでなく，機能表現も言い換えることが重要である．このような理由により，本論文では，機能表現の言い換えに焦点をあてる．日本語の機能表現が持つ主な特徴は，各々の機能表現が多くの形態的異形を持っているということである．それぞれの異形は，常体，敬体，口語体，堅い文体という4つの文体のいずれかをとる．例えば，「なければならない」の異形には，「なくてはならない」，「なければなりません」，「なけりゃならない」，「ねばならん」などがあり，これら4つの表現の文体はすべて異なっている．これらの表現の文体は，順に，常体，敬体，口語体，堅い文体である．機能表現を言い換えるシステムは，言い換え先の機能表現の文体を制御できることが求められる．なぜならば，1つの文章においては，原則として，一貫して1つの文体を使い続けなければならないからである．例えば，文体が常体である文章においては，「なければなりません」や「にたいしまして」などの敬体の表現や，「なけりゃならない」や「とは言ったって」などの口語体の表現を使うことはできない．しかしながら，先行研究において提案されているいずれの機能表現言い換えシステムも，言い換え先の機能表現の文体を制御できる機構を持っていない．機能表現言い換えシステムが機能表現fを異なる機能表現f^に言い換える場合，潜在的にはf^のすべての異形を生成できることが望まれる．なぜならば，この要請を満たすシステムは，文章作成支援などの応用において，多数のさまざまな言い換え候補を利用者に提示することができるからである．このようなシステムは，例えば，「見てくれるか」という入力に対して，「てもらえる」を含む言い換え候補として「見てもらえるか」だけでなく，「見てもらえないか」，「見てもらえませんか」，「見てはもらえないでしょうか」など，多くの興味深い言い換え候補を出力することができる．しかしながら，先行研究における機能表現言い換えシステムは，体系的に異形を扱っていないため，上記の要請を満たしていない．文章読解支援や文章作成支援などの応用においては，機能表現を言い換えるときに，言い換え先の機能表現の難易度（理解しやすさ）を制御できることが求められる．なぜならば，機能表現は，文の構造や意味を決定する重要な要素であるからである．文中に知らない機能表現が用いられていた場合，おそらく，読者は，その文の意味を正確に理解することができないだろう．難しい機能表現をやさしい機能表現へ言い換えることができれば，読者がその機能表現を知っており，文の意味を正しく理解することができることが期待される．先行研究において，機能表現の難易度を考慮したものは，土屋らの研究Tsuchiya2004と本田らの研究Honda2007のみである．土屋らは，機能表現をやさしく言い換えるための規則を半自動的に生成する手法と，その規則に基づいて機能表現を言い換えるシステムを提案している．本田らは，意味的に等価な機能表現の各々のクラスに対して，それぞれ1つの代表表現を定義することにより，機能表現を分かりやすい表現に言い換える手法を提案している．機能表現をやさしく言い換える場合，読者にふさわしい難易度の表現に言い換えることが望ましい．なぜならば，よりやさしい機能表現（典型的には，助詞）は，複数の意味を持っている傾向があるからである．必要以上にやさしく言い換えた場合，生成されたテキストが意味的に曖昧になってしまうおそれがある．これらの先行研究において提案されている言い換えシステムは，例えば，日本語初級者用や日本語中級者用などといった，難易度指定に応じて言い換えを行なうことはできない．機能表現を，文体指定や難易度指定を満たす，意味的に等価な機能表現に言い換える処理は，次の2つの変換の組み合わせによって実現することができる．機能表現を意味的に等価な機能表現に変換する機能表現をその異形に変換する前者において，難易度指定を満たす機能表現のみを言い換え候補に採用し，後者において，文体指定を満たす異形のみを言い換え候補に採用すれば，目的の言い換えを達成することができる．本論文では，形態階層構造と意味階層構造を持つ機能表現辞書を用いることにより，文体と難易度を制御しつつ，日本語機能表現を言い換える手法を提案する．前者の階層構造は，各々の機能表現に対して，すべての異形のリストを提供する．それぞれの異形には，文体の情報が記述されている．このリストは，上記の(2)の変換に必要である．後者の階層構造は，機能表現の意味的等価クラスを提供する．クラス内のそれぞれの機能表現には，難易度が付与されている．この意味的等価クラスは，上記の(1)の変換に必要である．本論文は，以下のように構成される．まず，第2章で，形態階層構造と意味階層構造を持つ機能表現辞書について説明する．次に，第3章で，本論文で提案する機能表現の言い換え手法を述べる．第4章で，実装した機能表現言い換えシステムについて説明し，続く第5章において，その評価を行なう．第6章で，関連研究について述べ，最後に，第7章でまとめを述べる．</section>
  <section title="2つの階層構造を持つ機能表現辞書"/>
  <subsection title="形態階層構造">日本語の機能表現が持つ主な特徴の1つは，個々の機能表現に対して，多くの異形が存在することである．例えば，「なければならない」に対して，「なくてはならない」，「なくてはならず」，「なければなりません」，「なけりゃならない」，「なければならぬ」，「ねばならん」など，多くの異形が存在する．このような異形をつくり出す過程は，次の7カテゴリーに分類することができるMatsuyoshi2007．松吉らは，これらの言語現象による機能表現の異形を階層構造を用いて分類し，機能表現辞書を編纂したMatsuyoshi2007．本論文では，機能表現の形態階層構造として，彼らの階層構造を採用する．形態階層構造の概要を表~に示す．この階層構造は9つの階層を持つ．L^3からL^9の階層が，上で列挙した異形のカテゴリーのそれぞれに対応する．これらの階層の上に，見出しレベルとしてL^1，語義を区別した見出しレベルとしてL^2が定義されている．形態階層構造の各階層における機能表現の数を，表~の「表現数」の欄に示す．見出し語に相当するL^1の機能表現の数は341であり，出現形に相当するL^9の機能表現の数は16,801である．機能表現の出現形（L^9の機能表現）には，階層構造における位置を表す機能表現IDが付与されている．この機能表現IDは9つの部分からなる．IDの各部分は，階層構造のそれぞれの階層における階層IDである．それぞれの出現形に付与された機能表現IDから，階層構造におけるその出現形の位置や，その上位の階層の機能表現（例えば，L^2の機能表現）を容易に知ることができる．機能表現ID以外に，機能表現の出現形には，文体や左接続・右接続（隣に接続可能な形態素）などの情報も記述されている．本論文では，機能表現を言い換えるにあたり，これらの情報を利用する．</subsection>
  <subsection title="意味階層構造">現在，誰もが言い換えに利用することができる，日本語機能表現の意味的等価クラスの集合は存在しない．機能表現に関する文献や辞書Morita1989,Tomomatsu1996,dosj,Matsuyoshi2007に記述されている意味的等価クラスは，分類の粒度が粗いので，言い換えに直接利用することはできない．一方，自然言語処理において，言い換えのために定義された機能表現の意味的等価クラスの集合Tanabe2001,Shudo2004が存在するが，これらは一般公開されていない．言い換えのための機能表現の意味的等価クラスとして，われわれは，形態階層構造におけるL^2の機能表現435表現に対して，3つの階層を持つ意味階層構造を作成した．この階層構造の作成にあたっては，「日本語表現文型」Morita1989における機能表現に関する説明文と用例を参考にし，言い換え可能性の観点から，L^2の機能表現集合にあらかじめ定義されていた89の意味的等価クラスMatsuyoshi2007を見直し，その再編成を行なった．主に，次の2つのことを行なった．下位区分同じ意味的等価クラスに属する複数の機能表現を，言い換え可能性の観点からいくつかのグループにまとめ，元のクラスに下位クラスを定義した．例えば，松吉らの機能表現辞書Matsuyoshi2007において，〈推量〉という意味的等価クラスには，次の15の機能表現が属している．これらの表現はすべて，推量や推定を意味する機能表現である．しかしながら，それらの間の言い換え可能性は一様ではない．例えば，「かもしれない」と「かもわからない」は，ほとんどすべての文脈において言い換え可能であると思われるが，その一方で，「かもしれない」と「にちがいない」は，これらが言い換え可能な文脈は先の2つの表現よりも限られると思われる．他の表現対に対しても同様の考察を行ない，〈推量〉という意味的等価クラスを，図~のように下位区分した．下位クラス化属している機能表現の数が少数である意味的等価クラスを，その上位の意味を表す意味的等価クラスの下位クラスとして再定義した．これは，前者に属する機能表現に対して，それが言い換え可能な機能表現の数を増やすためである．例えば，松吉らの機能表現辞書において，〈最中〉という意味的等価クラスには，1つの機能表現「つつある」しか属していないので，この機能表現に対して，それと言い換え可能な（L^2の）機能表現を得ることはできない．一方，「つつある」は，〈継続〉という意味的等価クラスに属する「ている」や「ていく」などの機能表現と，多くの文脈において言い換え可能である．そこで，〈最中〉という意味的等価クラスを，〈継続〉という意味的等価クラスの下位クラスとして再定義した．これにより，上位のクラスを用いた場合，「つつある」に対して，言い換え可能な機能表現として，「ている」や「ていく」などの表現を提示することができる．このような再編成を経て，最終的に3階層の意味階層構造を構築した．意味階層構造の大半において，各階層の1つの意味的等価クラスに属する機能表現は，表~の「1つのクラスに属する機能表現」の欄に示す性質を持っている．各階層における意味的等価クラスの数とそれらに付与したクラスIDの形式を，それぞれ，表~の「クラス数」と「クラスID」の欄に示す．最も上位の階層(Top)における意味的等価クラスの数は45であり，最も下位の階層(Bottom)における意味的等価クラスの数は199である．一般に，1つの意味的等価クラスには，異なる難易度を持つ複数の機能表現が属している．例えば，ある意味的等価クラスには，「とどうじに」や「たとたんに」のようなやさしい機能表現から，「やいなや」や「がはやいか」のような難しい機能表現まで，さまざまな難易度の機能表現が属している．形態階層構造のL^2の機能表現には，「日本語能力試験出題基準」nouryokuの級に基づいた難易度が付与されているMatsuyoshi2007．この難易度は，A1，A2，B，C，Fの5段階であり，A1が一番やさしい．本論文では，難易度指定に応じた機能表現の言い換えを実現するために，この情報を利用する．</subsection>
  <subsection title="指定を満たすすべての出現形の列挙">形態階層構造と意味階層構造を持つ機能表現辞書を用いると，与えられた機能表現の出現形に対して，文体指定と難易度指定を満たす，意味的に等価な機能表現のすべての出現形を列挙することができる．この手続きは，次のとおりである．形態階層構造において，与えられた出現形の上位のL^2の機能表現を見つける意味階層構造において，その機能表現を含む意味的等価クラスを見つけ，そこに属する機能表現の集合を得るその集合から，難易度指定を満たさない機能表現を排除する形態階層構造に基づき，集合内の各機能表現に対して，そのすべての異形（出現形）を列挙する得られた出現形のリストの中から，文体指定を満たさない出現形を排除する上の(2)の集合には，与えられた出現形の異形を出力するために，その上位のL^2の機能表現も含まれる．計算機上では，上記の手続きは，出現形を表す機能表現IDと意味的等価クラスを表すクラスIDを用いて実行される．例として，「や否や」と意味的に等価な機能表現の出現形のうち，A1，A2，Bのいずれかの難易度を持つものを列挙する．まず，形態階層構造において，出現形「や否や」の上位のL^2の機能表現『やいなや』を見つける．次に，意味階層構造において，『やいなや』を含む意味的等価クラスを見つける．このクラスに属する機能表現の集合は，次のとおりである．この集合から，設定された難易度指定を満たさない『そばから』，『なり』，『やいなや』，『がはやいか』，『や』を排除する（難易度は，それぞれ，C，C，C，F，F）．最後に，形態階層構造に基づき，残った『とどうじに』，『とすぐに』，『たとたんに』のすべての出現形計20表現を，次のように列挙する．</subsection>
  <section title="本論文で提案する機能表現の言い換え手法"/>
  <subsection title="入力表現の単位">本論文では，言い換え元の入力表現の単位として，文節を採用する．その理由は，文節は，機能表現を含む最も基本的な文構成単位であるからである．本論文で扱う文節は，いわゆる形式文節ではなく，機能表現を考慮して拡張された文節であり，以下のように定義する．c_iを内容語，f_jを機能表現とおく．このとき，文節を次のように定式化する．=c_1c_2c_mf_1f_2f_neqnarray文節内のc_1c_2c_mを文節の内容語部，f_1f_2f_nを文節の機能語部と呼ぶ．例えば，「決定せざるをえないので」は，1つの文節である．このとき，c_1=「決定」，c_2=「せ」，f_1=「ざるをえない」，f_2=「ので」であり，内容語部は「決定せ」，機能語部は「ざるをえないので」である．本論文では，入力文節の機能語部に存在する機能表現を言い換えることにより，入力文節に対する代替表現を生成する．</subsection>
  <subsection title="予備調査: 人間による機能表現の言い換え">機能語部の機能表現の言い換えは，原理的に，次の5種類の言い換えの組み合わせによって達成される（以下，文節例において，内容語部と機能語部の境界，および，機能表現と機能表現の境界に``／''を挿入する）．機能表現の言い換えを定式化するにあたり，予備調査として，人間が機能表現を言い換える場合，これらの5種類の言い換えがどのように用いられるのか調査した．調査方法としては，作業者に文節のリストを与え，文節の機能語部を自由に言い換えてもらった．作業者には次の3つのことを指示した．機能語部を言い換えてください．内容語は言い換えないでください思い付くまま，自由に言い換えてください．やさしく言い換えなければならない，短くしなければならないといった制約はありません1つの文節に対して複数の代替表現を思い付いた場合，そのすべてを記述してください．どうしても代替表現が思い浮かばない文節に対しては，代替表現を記述しなくても構いません文節リストとしては，「日本語能力試験出題基準」nouryokuにおける``〈機能語〉の類''のリストに付記されている用例を用いた．``〈機能語〉の類''のリストの一部を表~に示す．この文献には，269項目の``〈機能語〉の類''が収録されている．この調査では，これらのうち，日本語機能表現辞書Matsuyoshi2007にも収録されている140項目を対象とした．``〈機能語〉の類''のリストにおいては，各``〈機能語〉の類''に対して，1つ以上の用例が記述されている．本論文における言い換え元の入力表現の単位は，文節であるので，節単位や文単位の用例に対しては，そこから文節単位の用例を人手で抽出した．``〈機能語〉の類''140項目に対する用例のうち，日本語機能表現辞書に収録されている機能表現の用例であるとわれわれが判断した238の用例を，言い換え元の文節リストとして用いた．作業者は，238の文節のうち226の文節に対して，410の代替表現を作成した．これらの代替表現が適切であるかどうかを，作業者とは異なる2人の判定者が独立に判定した．適切さの判定基準は，「言い換え元の文節と作業者が作成した表現が，ある文脈において置換可能であるならば，後者は，代替表現として適切であると判定する」と定めた．判定結果の分割表を表~に示す．表の「」の欄に，判定者が適切であると判定した代替表現の数を，「」の欄に，判定者が適切でないと判定した代替表現の数を示す．この表から，作業者が作成した表現の86%(353/410)が，2人の判定者に，代替表現として適切であると判定されたことが分かる．作業者が作成し，2人の判定者が適切であると判定した353の代替表現が，上記の5種類の言い換えのどのような組み合わせによって実現されているか分析した．分析結果を表~に示す．この表から，353の代替表現のうち，その61%(215/353)が，``11''のみで実現されたことが分かる．したがって，機能表現を類義表現に置換するという``11''は，人間が行なう機能表現の言い換えの過半数をカバーすると言うことができる．</subsection>
  <subsection title="機能表現の言い換えの定式化">前節の調査結果に基づき，本研究が対象とする言い換えの入出力を，次のように定めた．入力は1つの文節であり，出力は，入力文節に対する代替表現である．：文節&amp;=c_1c_2c_m-1c_mf_1f_2f_n：代替表現&amp;=c_1c_2c_m-1c_m^wf_1^f_2^f_n^alignここで，c_m^は，内容語c_mかもしくはそれを活用させた語であり，f_j^は，機能表現f_jと意味的に等価な機能表現である．wは，空文字列か，もしくは，c_m^とf_1^を適切に接続するために挿入される語である．本研究では，入力文節の機能語部に存在する各々の機能表現を，それと意味的に等価な機能表現に置換することにより，入力文節に対する代替表現を生成する．一般に，機能表現f_1の左接続と機能表現f_1^の左接続は，たとえそれらが意味的に等価であったとしても異なる．例えば，「や否や」と「たとたん」は意味的に等価であるが，前者の左接続は動詞の基本形であるのに対し，後者の左接続は動詞の連用タ接続である．同様に，「にあたって」と「際に」は，同じ〈状況〉という意味を持っているが，前者の左接続は動詞の基本形と名詞であるのに対し，後者の左接続は動詞の基本形とタ形および助詞「の」である．このような場合，f_1をf_1^に置換した後，c_mとf_1^を適切に接続する必要がある．内容語と機能表現の接続には次の4種類があり，それぞれに応じて異なる手続きを行なう．機能表現f_j^と機能表現f_j+1^の接続の可否は，それらが単純接続可能であるかどうかにより判定し，前者の活用形の変更は行なわない．その理由は，節で説明した方法によって，すべての活用形が展開された形で，意味的に等価な機能表現の出現形のリストが与えられるからである．f_j^とf_j+1^が単純接続可能でない場合，これらを含む代替表現候補を棄却する．例えば，「なければならない」と「にちがいない」は単純接続可能である．一方，「なければならなく」と「にちがいない」は，単純接続可能ではないので，これらを含む代替表現候補を棄却する．単純な置換と語の挿入を組み合わせた，本論文で提案する言い換え手法は，表~における「11のみ」のすべてと，「1N（と11）」の22%(15/68)をカバーする．したがって，この言い換え手法は，理論上，表~の65%(230/353)をカバーする．</subsection>
  <section title="機能表現言い換えシステム">前章で述べた手法により，文体と難易度を制御しつつ，機能表現を言い換えるシステムを実装した．このシステムの入力は文節（と文体指定・難易度指定）であり，出力は，代替表現の順位付きリストである．代替表現を生成するにあたり，このシステムは，章で説明した機能表現辞書を用いる．実装した言い換えシステムの全体像を図~に示す．このシステムは，次の3つのモジュールからなる．文節解析言い換え生成順位付け</section>
  <subsection title="文節解析">文節解析モジュールは，与えられた文節を，式()に示されるように内容語と機能表現の列に分割する．日本語機能表現を検出する手法は，これまでにいくつか提案されており，例えば，半自動的に作成した規則に基づく手法Tsuchiya2003bや機械学習に基づくチャンキング手法Uchimoto2003,Tsuchiya2007などがある．しかしながら，これらの手法が検出対象としている機能表現とその異形の数は，限られているため，本研究では，これらの手法を文節解析に利用することはできない．別の手法として，既存の形態素解析器の辞書に約17,000の機能表現の出現形を追加し，機械学習により種々のコストを決定することが考えられる．しかしながら，現在のところ，これらすべての出現形に対してタグ付けを行なった大規模なコーパスは存在しないので，この手法は実行可能ではない．本システムでは，これらの手法とは異なる方法を用いて，与えられた文節を内容語と機能表現の列に分割する．このシステムの文節解析モジュールは，2種類の解析器を用いる．1つめの解析器は，文節の機能語部の解析に特化した解析器（以下，機能語部解析器）である．この解析器は，辞書エントリーとして約17,000の機能表現の出現形のみを持つ形態素解析器MeCabで実装されている．実装においては，機能表現間の接続は，節で述べた，機能表現辞書に記述されている接続条件を用いず，すべての組み合わせが可能であるとし，連接コストはすべて1と定めた．その理由は，機能表現辞書の接続条件は，解析に用いるには少し厳しすぎるのではないかと考えたからである．なお，単語コストはすべて0と定めた．この機能語部解析器は，機能語部をなす文字列を機能表現の列に分割することができる．その一方で，文字列に，内容語と解析されるべき要素が含まれている場合，文字列の分割に失敗する．与えられた文字列から機能語部を抽出するために，文節解析モジュールは，2つめの解析器として，IPA辞書を組み込んだ通常のMeCabを用いる．以下に，文節解析の手順を述べる．まず，通常のMeCabを用いて，入力文節を形態素列m_1m_2m_kに分割する．次に，m_1を内容語部，m_2m_3m_kを機能語部であると仮定する．機能語部解析器が，m_2m_3m_kの表層形をまとめた文字列を機能表現の列f_1f_2f_nに分割することができたならば，文節解析モジュールは，解析結果として，c_1f_1f_2f_nを出力する．ここで，c_1=m_1である．機能語部解析器が分割に失敗した場合，m_1m_2を内容語部，m_3m_4m_kを機能語部であると仮定する．機能語部解析器が，m_3m_4m_kの表層形をまとめた文字列を機能表現の列f_1f_2f_nに分割することができたならば，文節解析モジュールは，解析結果として，c_1c_2f_1f_2f_nを出力する．ここで，c_1=m_1，c_2=m_2である．以下同様に，機能語部解析器が分割に成功するまで，この手続きを続ける．例として，文節「決定せざるをえないので」を解析する．まず，この文節は，通常のMeCabにより，「決定／せ／ざる／を／え／ない／ので」と，7つの形態素に分割される．次に，「決定」を内容語部，「せ／ざる／を／え／ない／ので」を機能語部と仮定する．機能語部解析器は，文字列「せざるをえないので」の分割に失敗するので，今度は，「決定／せ」を内容語部，「ざる／を／え／ない／ので」を機能語部と仮定する．この場合，機能語部解析器は，文字列「ざるをえないので」の分割に成功し，この文字列を「ざるをえない」と「ので」に分割する．これにより，解析結果として，c_1=「決定」，c_2=「せ」，f_1=「ざるをえない」，f_2=「ので」が出力される．内容語の場合と同様に，2つ以上の意味を持つ機能表現も存在する．例えば，「によって」は，次の3つの意味を持つ．機能語部解析器が分割した機能語部に，複数の意味を持つ機能表現が存在した場合，文節解析モジュールは，それらに対応する複数の解析結果を出力する．例えば，機能語部解析器が分割した機能語部に，2つの意味（と）を持つ機能表現f_jが存在した場合，文節解析モジュールは，次の2つの解析結果を出力するとf_j^()は，	機能表現IDを用いて，	次のように区別する:	f_j^()=「ために(0731Q.1xx.74n01)」，	f_j^()=「ために(0732Q.1xx.74n01)」	（前者は〈理由〉，後者は〈目的〉の意味を持つ）．．</subsection>
  <subsection title="言い換え生成">言い換え生成モジュールは，入力文節の解析結果c_1c_2c_mf_1f_2f_nを受け取り，文体指定と難易度指定を満たす代替表現のリストを生成する．まず，言い換え生成モジュールは，節で述べた方法を用いて，f_1と意味的に等価であり，かつ，文体指定と難易度指定を満たす機能表現の出現形f_1^を得る．次に，節で述べた方法により，f_1^をc_1c_2c_mに接続させ，c_1c_2c_m-1c_m^wf_1^を構築する．今度は，f_2に対して同様のことを行ない，f_2^を得てc_1c_2c_m-1c_m^wf_1^f_2^を構築する．以下，同様にこの過程を続け，最終的に，入力文節の代替表現として，c_1c_2c_m-1c_m^wf_1^f_2^f_n^を構築する．各々のf_jに対して，節で述べた方法によって実際に得られるのは，類義表現のリストである．言い換え生成モジュールは，1jnに対して，これらのすべての組み合わせを試行し，接続し得ない2つの隣り合う要素を含む代替表現候補を棄却することによって，代替表現のリストを生成する．難易度指定が厳しすぎるなどの理由により，代替表現が1つも生成されない場合，言い換え生成モジュールは，上位の階層の意味的等価クラスを用いて代替表現のリストを生成する．機能語部の機能表現に意味的曖昧性があり，2つ以上の解析結果が存在する場合，言い換え生成モジュールは，各解析結果に対して独立に代替表現を生成し，最後に，それらを1つのリストにまとめて出力する．</subsection>
  <subsection title="順位付け">機能表現の言い換えにおいて，実際の応用を考慮した場合，出力される代替表現のリストに，なんらかの尺度に基づく順位が付いていることが望ましい．なぜならば，機能表現には数多くの異形が存在するため，代替表現が数百も出力されることがあるからである．順位付けモジュールは，生成された代替表現のリストを，コーパス中の頻度に基づくスコアにより順位付けする．コーパス中の頻度を利用する理由は，コーパスによく現れる機能表現は，より標準的で一般に使われているものだと考えることができるからである．しかしながら，現在のところ，約17,000の機能表現の出現形に対してタグ付けを行なった大規模なコーパスは存在しないので，コーパス中の機能表現の頻度を直接利用することはできない．そこで，本研究では，コーパス中の機能表現の頻度の近似値として，コーパスから単純な文字列照合によって得られる，「機能表現を構成する文字列」の出現回数を用いる．スコア関数としては，代替表現に含まれる各機能表現の構成文字列の出現回数の積を用いる．入力された代替表現のリストに，構成文字列が全く同じ代替表現が複数存在する場合，それらの表現には同じスコアが付くので，順位付けモジュールは，それらを1つにまとめて出力する．</subsection>
  <subsection title="出力例">入力文節「見てくれるか」に対する，言い換えシステムの出力を表~に示す．i欄に指定なしの場合の順位を，j欄に「敬体のみ」という文体指定を行なった場合の順位を示す．入力文節「聞くや否や」に対する，言い換えシステムの出力を表~に示す．i欄に指定なしの場合の順位を，j欄に「A1，A2，Bのいずれかの難易度」という難易度指定を行なった場合の順位を示す．これらの出力結果より，提案システムが，入力文節に対して適切な代替表現を生成できること，および，文体指定や難易度指定に従って，その出力を制御できることが分かる．</subsection>
  <section title="評価">実装した機能表現言い換えシステムを評価する観点として，次の4点が考えられる．出力された表現は入力文節と意味的に等価であるか出力された表現は文体指定を満たすか出力された表現は難易度指定を満たすか機能表現fを異なる機能表現f^に言い換える場合，f^のすべての異形を生成することができるか本システムの言い換え能力は，節に示した，出現形の列挙能力によって規定されている．この列挙手続きは，辞書に記述されている情報に基づいているため，最終的に，上記の4点の可否は，辞書に記述されている情報の正しさに依存する．すなわち，上記の(1)から(4)は，それぞれ，節で述べた意味的等価クラスは妥当か，機能表現の出現形に付与されている文体情報は正しいか，L^2の機能表現に付与されている難易度情報は正しいか，形態階層構造はすべての異形を網羅しているか，という問題に帰着される．機能表現の出現形が4つの文体のうちいずれをとるかは，日本語の文体についての知識があれば，容易に判断できる．また，L^2の機能表現に付与されている難易度は，「日本語能力試験出題基準」nouryokuの級（難易度）に基づいている．異形の網羅性については，すでに，松吉らの研究Matsuyoshi2007によって定量的に評価されている．これらの理由により，辞書に記述されている(2)から(4)の情報の信頼性は高いと考えられるため，実験的に評価する必要はないと判断した．一方，節で述べた意味的等価クラスは，これまでの文献と著者らの直観に基づくものであり，その言い換えにおける妥当性は検証されていない．そこで，本章では，言い換えシステムが生成する代替表現の評価を行ない，意味的等価クラスの妥当性を検証する．</section>
  <subsection title="評価方法">言い換えシステムの出力の評価にあたっては，実際の応用として文章作成支援を想定した．文章作成支援においては，システムは，入力表現に対して，少数の良い代替表現を出力することが期待される．なぜならば，代替表現が順位付けされずに数百も出力された場合，システムの利用者は困惑してしまうからである．本論文では，言い換えシステムの出力の上位5位までに，適切な代替表現が含まれているかどうかという観点から，評価を行なった．言い換えシステムが生成した表現の評価は，次の3段階で行なった．一般に，ある表現が別の表現と置換可能であるかどうかを客観的に判定することは難しい．なぜならば，それらが置換可能である文脈を想像することができるかどうかは，判定者の言語経験によるところが大きいからである．特に，機能表現の言い換えにおいては，機能表現の用法についての知識が不十分であるために，入力文節と言い換えシステムが生成した表現が置換可能である文脈を想像することができず，後者を適切な代替表現ではないと判定してしまうことが少なくない．それゆえに，機能表現の置換可能性の評価にあたっては，機能表現を解説した文献に基づくことが望ましい．このような理由により，本評価においては，1人の判定者が，複数の機能表現に関する文献Morita1989,Jamasi1998,dosjを参照しながら，本システムが生成した表現の評価を行なった．節で述べた方法をそのまま用いた場合，機能語部の機能表現が，すべて，入力文節における機能表現と同じ，もしくはその異形であるという代替表現も出力される．例えば，入力文節「決定せ／ざるをえない／ので」に対して，「ざるをえない」をその表記に関する異形である「ざるを得ない」に置換しただけの表現「決定せ／ざるを得ない／ので」も，1つの代替表現として出力される．しかしながら，文章作成支援の観点からは，これは望ましくない．なぜならば，システムの利用者が求めるものは，このような，表記を少し変えただけの表現ではなく，入力文節に使われている機能表現とは異なる機能表現を用いた代替表現であると思われるからである．このような理由により，本評価では，言い換えシステムが出力する代替表現は，その機能語部の少なくとも1つの機能表現が，入力文節における対応する機能表現と全く異なる機能表現でなくてはならないという条件を設定した．すなわち，式()によって定式化される代替表現において，f_j^がf_jと異なるL^1-L^2IDを持つようなjが，必ず1つは存在する．本評価では，クローズドテストの入力文節リストとして，節で予備調査に使用した文節リストを用いた．この文節リストは，節で述べた意味的等価クラスの調整にも用いた．オープンテストにおいては，入力文節リストとして，「どんな時どう使う日本語表現文型500」Tomomatsu1996の用例を用いた．この文献においては，各機能表現に対して平均4つの用例が記載されている．例として，「について」に対する用例を表~に示す．この文献には，機能表現と，呼応などの表現文型が，491項目収録されている．本評価では，これらのうち，日本語機能表現辞書Matsuyoshi2007にも収録されている機能表現184項目を対象とした．本論文における言い換え元の入力表現の単位は文節であるので，文単位の用例からは，文節単位の用例を人手で抽出した．機能表現184項目に対する用例のうち，日本語機能表現辞書に収録されている機能表現の用例であるとわれわれが判断した628の用例を，入力の文節リストとして用いた．本論文の言い換えシステムは，代替表現を順位付けする際にコーパスを利用する．このコーパスとしては，毎日新聞コーパス1991--2005年版（15年分，約2,100万文，約1.5ギガバイト）を用いた．</subsection>
  <subsection title="結果">評価結果として，言い換えシステムの出力の上位n位までに，少なくとも1つの適切な代替表現（「○」と判定された表現）が含まれていた入力文節の数を表~に示す．表の「人手解析」の欄に，入力文節を人手で解析したとき，すなわち，入力文節が正しく分割され，すべての機能表現の意味的曖昧性が解消されたときの評価結果を示す．表のすべての行において，値は，「1位--3位」でほぼ飽和している．よって，以下では，「1位--3位」における結果について議論する．表~から，本論文の言い換えシステムは，クローズドテストにおいて入力文節の88%(210/238)，オープンテストにおいて入力文節の79%(496/628)に対して，適切な代替表現を生成することができたことが分かる．言い換えシステムが生成した適切な代替表現の例を，その順位とともに表~に示す．この表の「入力文節」と「代替表現」の欄において，機能表現の言い換えが行なわれた箇所に下線を引いた．これらの結果から，われわれは，本システムの性能は，文章作成支援という観点からみて十分に高いと考える．以下，言い換えシステムの誤り分析を行なう．言い換えシステムの出力を詳細に分析した結果を表~に示す．クローズドテストにおける入力文節の7%(16/238)とオープンテストにおける入力文節の7%(41/628)に対しては，``11''と少数の語の挿入のみでは代替表現を生成できないことが分かった．これらの入力文節を適切に言い換えるためには，``1N''，``N1''，``MN''が必要である．これらの入力文節とそれらに対して期待される代替表現の例を表~に示す．上記の7%という値は，``11''と少数の語の挿入に基づいて言い換えを行なう本システムの性能の上限を規定する．入力文節の解析誤りは，クローズドテストにおいて3%(8/238)，オープンテストにおいて3%(21/628)であった．解析誤りの例を以下に示す．進ん／だ／ことに／より（「により」が正しく認識されなかった）邪魔さ／れ／た／おかげで（受身を表す接尾辞「れ」が，〈可能〉の意味を持つ機能表現「れ」と解析された）ひら／がな／さえ（通常のMeCabによって，「ひらがな」が誤って分割された）一方，入力文節の1%（2/238，クローズドテスト）と4%（23/628，オープンテスト）に対して，その機能語部に意味的に曖昧な機能表現が含まれていたため，適切な代替表現が上位に出力されなかった．例えば，「こと」は，〈当為〉，〈感嘆〉，〈名詞化〉という3つの意味を持つ．「提出する／こと」の「こと」は，〈当為〉の意味を持つ機能表現であるが，この文節に対して，〈名詞化〉の意味を持つ「の」を含む「提出する／の」や，〈感嘆〉の意味を持つ「わ」を含む「提出する／わ」などの表現が上位に出力された．「人／によって／は」や「賛成する／にしても」に対しても，同様の現象が観察された．表~の「適切な代替表現」の欄における，システムが解析を行なった時の値と人手解析時の値の差から，人手で入力文節を解析した場合，上記のような入力文節に対しても，適切な代替表現を上位に出力することができたことが分かる．したがって，解析誤りおよび意味的曖昧性に起因する性能の低下は，本システムの文節解析モジュールの改善とともに減少することが期待される．オープンテストにおいて，意味的等価クラスの不備により，適切な代替表現が生成されなかった入力文節は，全体の3%(19/628)であった．例えば，「悲しみ／の／あまり」に対して，適切な代替表現が生成されなかった．「悲しみ／の／あまり」に対する適切な代替表現として，「悲しみ／の／せいで」が考えられるが，意味階層構造のどの階層においても，「あまり」と「せいで」が同じ意味的等価クラスに属することがなかったため，この言い換えは実現されなかった．意味的等価クラスの不備に起因する問題は少数であったので，節で述べた意味的等価クラスは妥当なものであったと言える．接続条件が厳しすぎたため，オープンテストにおける入力文節の2%(16/628)に対して，適切な代替表現が生成されなかった．例えば，「は」と「とくれば」の接続は可能であると辞書に記述されていなかったため，「地域／は／というと」に対して，「地域／は／とくれば」が生成されなかった．今後，接続条件を見直す必要がある．残りの誤りは，コーパスにおいて，適切な代替表現に存在する機能表現の構成文字列の出現回数が相対的に少ないことに起因するものである．この問題を解決するためには，現在使用しているスコア関数の見直しや，機能表現のすべての出現形に対してタグ付けを行なったコーパスの整備が必要であると思われる．</subsection>
  <section title="関連研究">乾らは，語彙・構文的言い換えを，次の6つに分類したInui2004．節間の言い換え節内の言い換え内容語の複合表現の言い換え機能語／モダリティの言い換え内容語句の言い換え慣用表現の言い換え本研究は，機能表現の言い換えに焦点をあてているので，上記の(4)機能語／モダリティの言い換えと，(1)節間の言い換えの一部である「接続表現の言い換え」に分類される．自然言語処理において，日本語機能表現の言い換えに関する研究は少ない．飯田らIida2001は，機能表現の解説文や例文から，279個の言い換え規則を人手で作成している．土屋らTsuchiya2004は，機能表現を含む文とその機能表現を言い換えた文の対のデータを作成し，そこから642個の言い換え規則を半自動的に生成している．これらの研究で作成された言い換え規則は，ある機能表現と別の機能表現が言い換え可能であることを示す個別的なものである．このような個別的な規則の集合を用いる手法では，数多く存在する機能表現の異形を言い換えるために，膨大な量の言い換え規則を作成しなければならない．TanabeらTanabe2001，ShudoらShudo2004，本田らHonda2007は，「なければならない」や「てもよい」など，助動詞型機能表現に対して約150の意味的等価クラスを定義し，意味的等価クラス間における論理的類似性規則と語用論的類似性規則に基いて機能表現を言い換える手法を提案している．彼らの研究が対象としている機能表現は，助動詞型機能表現のみであり，「にあたって」や「からすると」のような格助詞型機能表現や，「にもかかわらず」や「や否や」のような接続助詞型機能表現などは扱っていない．これらの研究において提案されている機能表現言い換えシステムは，言い換え先の機能表現の文体や難易度を制御できる機構を持っていない．くわえて，これらのシステムは，体系的に機能表現の異形を扱っていないため，機能表現fを異なる機能表現f^に言い換える場合，潜在的にはf^のすべての異形を生成することができることは保証されていない．一方，われわれが提案する機能表現言い換えシステムは，形態階層構造と意味階層構造を持つ機能表現辞書を用いることにより，文体と難易度を制御しつつ，機能表現を言い換えることができる．そして，このシステムは，与えられた機能表現の出現形に対して，意味的に等価な機能表現のすべての出現形を列挙することができる．このシステムの言い換え対象は，表~に示されるように，助動詞型機能表現だけでなく，すべての型の機能表現である．伊佐治らIsaji2005は，解析後に機能表現を標準的な表現（代表表記）に言い換えることができる日本語の文節構造解析システムibukiCを提案している．例えば，このシステムは，「でしょう」を「だろう」に，「からすると」を「からすれば」に，「に違いない」を「にちがいない」に言い換える．しかしながら，この機構は十分であるとは言えず，「にたいしまして」を「にたいして」に，「なければならない」の異形である「なけりゃならない」，「ねばならない」を「なければならない」に言い換えない．一方，われわれの言い換えシステムは，形態階層構造と文体などの情報を利用することにより，体系的に機能表現を代表表記に言い換えることができる．</section>
  <section title="おわりに">本論文では，形態階層構造と意味階層構造を持つ機能表現辞書を用いることにより，文体と難易度を制御しつつ，日本語機能表現を言い換える手法を提案した．実装した言い換えシステムは，与えられた機能表現の出現形に対して，文体指定と難易度指定を満たす，意味的に等価な機能表現のすべての出現形を列挙することができる．このシステムは，オープンテストにおいて，入力文節の79%(496/628)に対して，適切な代替表現を生成した．Tanabeらが作成した，意味的等価クラス間における類似性規則は，そのほとんどが，``1N''，``N1''，``MN''であるTanabe2001．これらの類似性規則を取り入れることにより，本論文で提案した言い換えシステムは，より多様な機能表現の言い換えを実現することができると考えられる．その一方で，内容表現の言い換え手法と本論文で述べた言い換え手法を組み合わせることにより，日本語表現の幅広い言い換えを実現することも重要であり，われわれの今後の課題である．[1]document</section>
</root>
