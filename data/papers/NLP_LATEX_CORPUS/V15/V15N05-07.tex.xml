<?xml version="1.0" ?>
<root>
  <jtitle>TypeAny:言語判別を用いた多言語入力システム</jtitle>
  <jauthor>江原遥田中久美子</jauthor>
  <jabstract>近年，国際化に伴い，多くの言語を頻繁に切り替えて入力する機会が増えている．既存のテキスト入力システムにおいては，言語が切り替わるたびに，ユーザーが手動で，テキスト入力ソフトウェア(IME)を切り替えなければならない点が，ユーザーにとって負担になっていた．この問題を解決するために，本論文では，多言語を入力する際にユーザーの負担を軽減するシステム，</jabstract>
  <jkeywords>テキスト入力システム，多言語，言語判別，PPM,隠れマルコフモデル</jkeywords>
  <section title="はじめに">近年，国際化の流れの中で，多くの言語を頻繁に切り替えて入力することが多くなってきている．例えば，自然言語処理の分野では，``namedentity''や``chunking''といった英語の表現が，そのままの形で日本語文中に出現することも多い．このように同一内に複数の言語が混在するを，本論文では「多言語」と呼ぶ．言語入力には，ユーザーが入力したキー列を，その言語での文字列に変換するために，inputmethodengine(IME)と呼ばれるソフトウェアが欠かせない．例えば，日本語のローマ字入力のIMEは，ユーザが``tagengo''というキー列を入力した時，これを``多言語''という文字列に変換する役割を担う．IMEは，日本語や中国語など，漢字への変換に限定されたものとして捉えられることも多いが，本論文では，以後，単純に，キー列から文字列への変換を担うソフトウェアという意味で用いる．従来は，入力する言語を切り替えるたびに，このIMEをユーザが手動で切り替えていた．しかし，これでは，言語を切り替える際のユーザの負担が大きく，特に言語を切り替え忘れた時に打ち直しの問題が生じていた．そこで，本論文では，の切り替えを自動化してユーザーの負担を軽減する，という多言語入力システムを提案する．このシステムは，ユーザーのキー入力とを仲介し，ユーザーが入力しているキー列から言語を自動的に判別して，を切り替える．これによって，の切り替えによるユーザーの負担が，大幅に減少すると見込まれる．</section>
  <section title="関連研究">多言語を入力する際に必要なキー入力は，以下のように分類できる．この章では，関連研究をこの分類に沿って述べる．本文の文字列に対応する入力に対する操作を切り替えるための操作(1)は，本文の文字列に対応する入力である．例えば，本文が``多言語''であれば，日本語のローマ字入力では，``tagengo''がこれに当たる．1つの言語に対応するIMEは，入力方式やキーボード配列の違いによって，複数存在する場合もある．例えば，日本語には前述のローマ字入力の他に「かな入力」もある．日本語のかな入力のIMEでは，``多言語''に対応する(1)のキー列は``q:@yb@''であり，ローマ字入力の場合とは異なっている．日本語に限らず，英語でも，QwertyやDvorakといったキーボード配列の違いによって，複数のがある．ただし，本論文は，入力方式やキーボード配列の違いについて論じることが目的ではないので，以後，各言語について標準的と思われる入力方式やキーボード配列を1つに定め，「日本語のIME」のように呼ぶものとする．(2)の操作は，仮名漢字変換ソフトウェアに対する変換候補選択などの操作に相当する．例えば，上記の``多言語''の例であれば，(1)だけでは，``多言語''のほかに``他言語''という選択肢も存在する．このとき，両者から``多言語''を選び出すための入力が，(2)である．予測入力を行う場合の，キー入力から候補を予測した変換候補を選択する操作も，(2)に相当する．(1)と(2)は，単言語で構成される文書を入力する際にも必要となるので，ユーザーインターフェースや自然言語処理の分野で詳細な研究がなされており，にまとめられている．(3)の操作は，を切り替える操作である．本論文では，以後この操作を「IME切り替え操作」と呼ぶ．例えば，英語と日本語を切り替える際の``Alt+半角''などのキー操作が(3)に相当する．IME切り替え操作は，主に，多言語の入力時に言語を切り替える際に発生する．sec:introductionで述べたように，このIME切り替え操作を，キー列からユーザーが入力している言語を判別することで，自動化するのが本論文の主旨である．(3)の操作量を直接扱った既存研究は少ない．著者らが調査した範囲では，論文が公開されているものとしては，が該当するのみである．この論文では，ピンインと英語が混じったキー列を正しく変換するタスクが述べられている．しかし，この機能はあくまで中国語入力の一環として述べられているにすぎず，本論文で扱うように，言語の種類や数を変更することは考慮されていない．論文の形でなく，フリーソフトウェアでは，PUNTOswitcherというロシア語圏のソフトウェアが，ロシア語と英語の間の切り替えの目的で2001年より開発されている．当該ウェブサイトの情報によれば，このソフトウェアは150万件のダウンロードがあり，一定の成功を収めていると思われる．また，KeyboardNinjaというソフトウェアも作成されている．KeyboardNinjaは，ロシア語，英語，フランス語，ドイツ語，イタリア語，スペイン語，ウクライナ語の間での切り替えを行うソフトウェアである．これらのソフトウェアの用いているアルゴリズムや性能評価については，著者らの知る範囲では公開されていない．一方，本研究は，の言語判別問題としてとらえることも可能である．このの言語判別問題は，次のように分類することが可能である．ある単言語のが与えられ，そのの言語を判別する問題多言語のが与えられ，その中の部分が何語であるかを判別する問題(1)の問題については，OCRを多言語に対応させることを主な目的とした，の研究が基礎的である．この論文では，ニュースグループへの投稿文書という長いテキストを対象に，文字ベースのN-gramの頻度を用いて文書の言語を判別している．また，では，やはりECIコーパスという長いテキストを対象に，KL情報量を用いて文書の言語を判別している．どちらの論文でも，言語によって判別精度に差があることと，平均して90%を超える高い精度が達成できることを報告している．一方，本研究との関連がより深いものは，(2)の問題である．(2)は，(1)を拡張した問題になっているうえ，多くの場合(1)より短い部分から言語を判別しなければならないため，(1)より難しい．以下，代表的な(2)に関する研究を2つ挙げる．は，小さいサンプルを対象とした言語判別問題に機械学習を用い，高い判別精度で解けることを報告している．しかし，この研究は，一般の文書からのサンプルを対象に2言語の間の判別を行うことを目的とし，インドで使用されている言語や文字に特化した素性を用いて判別精度の向上を報告するものである．本研究は，入力中のキー列を対象に3言語以上の間の判別も扱い，言語の種類に特に制限は設けていない点で，目的も手法も異なる．は，ドイツ語中に混在する英語を判別する方法について論じている．この論文では，中に混在する他の言語を発見するタスクを，foreigninclusiondetection(FID)と呼び，音声合成(Texttospeech)の分野で研究されてきたことを紹介している,．近年Alexは，FIDを構文解析の前処理として使用することで，構文解析の精度が向上させられることを示している.このFIDのように，他の処理の前処理として言語判別を使用する場合は，高い精度が求められるため，対象言語について大規模なコーパスが入手可能であることが前提となる．一方，本論文の目的では，対象言語の大規模なコーパスが手に入るとは限らないため，FIDの手法をそのまま適用することは困難である．以上の関連研究を踏まえて，次のsec:premodelで，設計方針を立てる．</section>
  <section title="準備と設計方針">に必要な機能を特定するために，fig:toyotaに，日本語，英語，中国語の3言語による，多言語の例を挙げて説明する．中国語の下には，ピンインを表記した．既存の手法では，fig:toyotaの文章を入力するためには，日本語から英語への切り替えと戻す操作で2回，日本語から中国語への切り替えと戻す操作が2対あるので4回，合計6回のIME切り替え操作が必要となる．このようなIME切り替え操作は，文字種が違う言語間だけでなく，同じアルファベットを使う英語やフランス語の間でも，アクセント記号付きの文字を入力する場合に必要になる．一方，では，キー列から言語を判別し，IMEを自動的に切り替える．例えばfig:toyotaでは，``bi-ruha,''を日本語，``beer''を英語，``pijiu''を中国語といったように言語を判別してユーザーに提示する．言語判別が間違っていれば，ユーザーが必要に応じて言語を訂正する．このことから，大きく分けて次の2つの機能が必要であることがわかる．キー列から言語を判別する機能言語判別の結果をユーザーに提示し，訂正情報を受け取とるユーザーインターフェース(1)についてはsec:modelで，(2)についてはsec:designで扱う．一般に，を入力するときには，多くの言語で，を区切るためのを仮定することが可能である．例えば，スペースを用いた分かち書きが，その典型的な例として挙げられ，この場合には，スペースキーをとして採用することが可能である．日本語や中国語では，通常，分かち書きは行わないが，漢字に変換する際にスペースキーを打鍵しているので，やはりスペースキーをとして使用することが可能である．そこで，では，から次のまでに挟まれるキー列を「トークン」と定義する．トークンを単位として入力を行い，トークンの属すべき言語を判別する．例えば，fig:toyotaにおけるトークンとしては，``bi-ruha,''，``beer''，``pijiu''が挙げられる．トークンは単語とは限らず，連文節変換を用いる場合などは，単語よりも長い単位となる場合もある．トークンによっては，そもそも，その属すべき言語が曖昧である場合がある．例えば，``sushi''というトークンは，英語としての``sushi''にも日本語の``寿司''に対する入力にもとらえることが可能である．借用語の多くにこのような曖昧性がある．また，ヨーロッパの多くの言語で使用されるアクセント記号はしばしば省かれることがあり，この場合にも曖昧性が生じる場合がある．例えば，``fur''は通常は英単語であるが，``fur''というドイツ語のウムラウト記号が省かれた形としても，使用されることがあり，英語とドイツ語の間で曖昧性が生じる．ただし，このような曖昧性は，実用上は必ずしも問題とならない場合もある．ユーザーは，例え言語判別に失敗していても，最終的に入力したトークンが正しい文字列に変換されていれば問題とは認識しないと考えられる．例えば，上記の後者の例である``fur''は，英語とドイツ語の間で曖昧性があるものの，どちらに判別されたとしても，最終的には``fur''に変換されるため，問題を生じない．一方，上記の前者の例である``sushi''では，英語と判別された場合は``sushi''と変換され，日本語と判別された場合は``寿司''などに変換されるため，ユーザーの観点からは問題を生じる．以上のように，この曖昧性が問題となるか否かを判定することは，個々の言語に対する具体的な知識を必要とするため難しい．そこで本論文では，sec:evaluationで示すように，単純に言語判別の精度を用いて評価を行った．トークンの属すべき言語は，事前に用意する学習コーパスが多くなるほど明確に判別することが可能になるが，その分，が対応可能な言語は限られてくる．は入力システムであるため，多くの言語に対応可能であることが望ましいと考えた．そこで，より多くの言語に対応を優先する設計方針を立て，言語判別をsec:modelで述べるように設計した．また，その言語判別を用いるユーザーインターフェースをsec:designで述べるように設計した．</section>
  <section title="言語判別"/>
  <subsection title="言語判別モデル">言語判別の確率モデルには，隠れマルコフモデル(HMM)を用いた．隠れ状態を言語として，隠れている言語からトークンが記号列として観測されるとする．ここでの目的は，P(l_1^m,t_1^m)を最大にするようなl_1^mを求めることである,,t_v)を表し，v&lt;uのとき空列t^v_u=()を表す．．ただし，lLは言語集合L中の言語であり，tはトークンである．HMMでは，P(l_1^m,t_1^m)をeq:approxのようにして最大化する．l_1^m&amp;=_l_1^mLP(l_1^m,t_1^m)&amp;=_l_1^mLP(t_1^m|l_1^m)P(l_1^m)&amp;_l_1^mL(_i=1^mP(t_i|l_i))(_i=1^mP(l_i|l_i-k^i-1))aligneq:approxでは，第一項をP(t_1^m|l_1^m)_i=1^mP(t_i|l_i)のように，また，第二項をP(l_i|l_1^i-1)P(l_i|l_i-k^i-1)のように，近似した．ここで，第一項は出力確率であり，第二項は遷移確率である．</subsection>
  <subsection title="出力確率の推定">出力確率P(t_i|l_i)は，ある1つの言語l_iからトークンt_iが出力される確率である．トークンを単語とみなせば，この確率は単純に言語l_iにおける単語の出現確率であり，その推定手法は自然言語処理の分野において，よく研究されている．P(t_i|l_i)の推定するには，言語l_iのコーパスが必要となる．十分に大規模な言語l_iのコーパスを用いれば，P(t_i|l_i)は，単純にコーパス中にトークンt_iが出現した頻度で近似することが可能である．しかし，この方法は，入力可能な言語を大規模なコーパスを入手することが可能な言語に限定してしまうため，sec:designの最後で述べた，より多くの言語に対応するという方針に反する．そこで，本研究では，トークンを入力したキーの列と捉え，キー列に関するスムージングを行うことで，P(t_i|l_i)を計算する方法を採用した．まず，トークンt_iの長さを|t_i|とし，トークンt_iをキー列c_1^|t_i|=(c_1,c_2,c_3,,c_|t_i|)として捉える．すなわち，t_i=c_1^|t_i|とする．例えば，t_i=``pijiu''の場合，|t_i|=5で，t_i=c_1^5=(`p',`i',`j',`o',`u')となる．次に，このc_1^|t_i|について，最大n_maxまでのn+1-gram確率を計算することで，スムージングを行い，P(t_i|l_i)を次のように計算する．このスムージングの手法としては，さまざまなものが提案されているが，本研究では，PredictionbyPartialMatching(PPM)という手法を採用した．このPPMは，	データ圧縮の分野で最初に提案され，後に自然言語処理に応用された手法である，,．PPMは，データ圧縮の分野で提案されたため，学習を動的に行いながら判別を行うことが，可能なように設計されているという特徴がある．この特徴によって，ユーザーが誤判別を訂正した場合，瞬時にその情報を確率値にフィードバックして次の判別に利用することが可能となる．この点が，のような入力システムに適した特徴であると考えたので採用した．以下，PPMの詳細について説明する．PPMは，c_1^r-n_maxまでの頻度情報をもとに，現在の文脈c_r-n_max+1^r-1の次にキーc_rがくる確率P(c_r|c_r-n_max+1^r-1)を推定する．ここでp_n(c_r)は，次のように，長さnの文脈にキーc_rが続くn+1-gram確率を表す．X_n，x_nは，それぞれ，c_1^r-n-1中のc_r-n^r-1,c_r-n^rの頻度とする．[p_n(c_r)=x_nX_n]eq:weightsにおいて，重みw_nは，基本的には，長いn+1-gram確率を重く，短いn+1-gramを軽く重みづけるのが望ましい．ただし，重みが偏りすぎることも精度を悪化させる．PPMでは，この重みw_nを，簡単な計算で適切に設定するために，エスケープ確率e_nという概念を導入して，次のように計算する．ただし，n_contは，X_n0を満たすn_max-1以下で最大のnである．エスケープ確率e_nは，現在の文脈に一度も続かなかったキーに割り当てる確率を表す．すなわち，現在の長さnの文脈c_r-n+1^r-1に一度も続かなかった新しいキー（これを「エスケープ」と呼ぶ）が，エスケープ確率e_nで現れると考える．反対に，現在の長さnの文脈c_r-n+1^r-1に続いたことのあるキーは，エスケープ確率e_nを新しいキーに割り当てた分を減らし，単純な頻度に1-e_n倍をした確率で出現すると考える．このエスケープ確率をどのように定義するかによって，PPMは，PPMA，PPMB，PPMCのように分類される．その中でも，本研究では，基礎的かつ比較的性能が高いとされるPPMCを用いた．PPMCでは，エスケープ確率を次のように計算する．ただし，q_nは，c_1^r-n-1中の，c_r-n^r-1のあとに続くキーの異なり数である．eq:PPMCから，PPMCでは，次のキーc_rの確率P(c_r|c_r-n_max+1^r-1)は，キー列のn-gramの頻度X_nとn-gramの後に続くキーの異なり数q_nが分かれば，推定することが可能であることがわかる．n-gramの頻度とn-gramの異なり数は単純な加算によって学習中に更新することが容易であるため，PPMCは動的に学習することに適している．</subsection>
  <subsection title="遷移確率の推定">ここでは，eq:approxの第2項である，k_max-gramまでの，言語k+1-gramによる文脈を考慮した遷移確率P(l_m|l_m-k_max+1^m-1)を推定する手法について述べる．この遷移確率は，大量の多言語から学習することが可能であるが，そのような大量の多言語は，通常，入手することが難しい．ユーザーが過去に確定した言語列l_1^m-1を正解とみなし，l_1^m-1から動的に遷移確率を推定することが可能であれば，この学習データの入手の問題を回避することが可能となる．この方法は，sec:outputと同様で，学習データが少量であることを，利用中のユーザーからの情報を動的に利用して補い，精度を向上させることが狙いである．したがって，遷移確率の推定方法には，sec:outputと同様，PPMを用いた．具体的には，eq:weightsにおけるc_rをl_mと読み替えることで，遷移確率P(l_m|l_m-k_max+1^m-1)を分解して推定した．sec:outputで述べた出力確率の推定の場合との違いの一つは，遷移確率は，出力確率ほど出現位置の離れた要素に依存しない，すなわち，長距離依存性が小さいことである．これは，次のように考えれば直感的に理解することが可能である．たとえば，言語3-gramを考えた場合，英語，フランス語，日本語のトークンがこの順番で何回も出現するは，まれであると推測される．したがって，通常は，遷移確率の最大文脈長k_maxを，出力確率の最大文脈長n_maxより小さく取り，k_maxn_maxとしてよい．ただし，実用上は，これらの最大文脈長の値はある程度の大きさがあれば十分であり，これらの値を細かく調整する必要性は乏しい．その理由は，eq:weightsのように，PPMでは文脈の長さごとに文脈の重要度w_nが自動的に決定されるためである．本研究では，特別な事情がない場合はk_max=n_max=5とした．</subsection>
  <section title="ユーザーインターフェース">ここでは，前節で述べた言語を判別する手法を，ユーザーインターフェースに組み込む方法について説明する．システムの構造を，fig:systemstructureに示す．は，fig:systemstructureに示すように，ユーザーのキー入力との間に立って両者を仲介する．まず，ユーザーが入力したキー列を，クライアントが受け取り，クライアントはそのキー列をサーバーに送る．サーバーでは，サーバー内の「言語判別モジュール」がキー列からユーザーが入力しようとしている言語を判別して，対応するに送る．では，キー列を文字列に変換して，クライアントに送り返す．この中の言語判別モジュールに，前節で述べた言語判別手法を実装し，組み込んだ．フランス語やドイツ語などヨーロッパ系の言語では，キー列に対して文字列が一意に定まるので，は，単純な置き換えですむ．たとえば，ドイツ語のでは，日本語のキーボードで``@''に対応するキーを，ドイツ語の``u''に置き換えている．一方，日本語や中国語では，キー列に対して文字列が一意に定まらないので，がユーザーに候補を提示して選択してもらう必要がある．この処理には，既存のかな漢字変換／ピンイン漢字変換のシステムをそのまま用いればよい．日本語のには，Anthyを用い，中国語のには，単純なピンイン漢字変換を自作した．fig:entryflowに，を用いてfig:toyotaに示す文章の入力例を示す．各ステップにおいて，白黒反転されているところが，ユーザーが入力中の部分である．言語の判別は，反転部分のキー列に対して行われ，その結果がLocaleWindowに表示される．以下，各ステップを説明する．初期の状態では，どの言語も選択されていない．キーを押すごとに反転部分のキー列（トークン）から言語が判別され，LocaleWindowに表示される．``bi-ruha,''の``b''を打鍵した時点では，英語と判別されていることがわかる．しかし，``bi-ruha,''まで打鍵すると，正しく日本語と判別される．現在のトークンは日本語と判別されているので，デリミタとなるスペースキーを打鍵すると，日本語のIMEを通じて日本語の文字列への変換が行われる．日本語のように，キー列文字列への変換候補が複数ある場合は，さらにスペースキーを打鍵することによって，通常のかな漢字変換を行うことが可能である．``beer''というトークンが，正しく英語と判別されている．``pijiu''というトークンが，正しく中国語と判別されている．(g)でスペースキーを打鍵すると，日本語のかな漢字変換と同様に，中国語のピンイン漢字変換が行われる．その後の``toyobare,''というトークンも，正しく日本語と判別されている．このように，を用いることで，ユーザーは，言語の誤判別が発生しない限りIME切り替え操作を行う必要がなく，ユーザーの負担は大幅に軽減される．トークンの言語を判別した結果が，ユーザーの望むものと異なる場合は，「誤判別」となる．誤判別時の処理を，fig:detectionfailを用いて説明する．言語判別の結果は常にLocaleWindowに表示されるので，誤判別の場合を含め，ユーザーはその結果を常に把握することが可能である．したがって，誤判別の場合でも，TABキーを押すことで，ユーザーはIMEを手動で簡単に切り替えることが可能である．例えば，fig:entryflowの``pijiu''は正しく中国語と判別されているが，fig:detectionfail(a)のように，間違って日本語と判別されていたと仮定する．ここで，ユーザーがTABキーを押すと，IMEがfig:detectionfail(b)のように中国語に切り替わる．における誤判別は，次の2種類に分類される．既存手法では，言語を切り替えるごとにIME切り替え操作を行わなければならなかったのに対し，では，IME切り替え操作は言語判別を失敗したときのみ必要になる．誤判別1は，が言語判別を間違えた場合であってもIME切り替え操作回数が増える原因とはならない．一方，誤判別2は，特に多言語コーパスの大半が1言語から構成されているような場合において，既存手法と比較した場合のIME切り替え操作回数を増加させてしまう可能性がある．したがって，の有効性は，言語を切り替える点での自動判別によるIME切り替え操作の減少量と，言語を切り替えるべきない点での誤判別2によるIME切り替え操作の増加量とのトレードオフによって決まる．このトレードオフについては，sec:decreaseで論じる．</section>
  <section title="評価">を2つの観点から評価した．まず，人工的に作成した多言語なコーパスを用いて，言語判別の精度を測定した．次に，実際の多言語を入力した場合の，打鍵数の減少量を測定した．</section>
  <subsection title="言語判別精度による評価実験">ここでは，言語判別の精度を測定した．言語判別の精度を測定するためには，実際に多言語を含む十分な量の正解コーパスがあることが望ましい．しかし，そのようなコーパスは，通常，入手することは難しい．そこで，本論文では，人工的に2言語から8言語の多言語コーパスを作成して，言語判別の精度を測定した．最初に，単言語のコーパスを収集した．日本語コーパスには毎日新聞2004年度版，中国語コーパスには北京大学コーパス，その他，英語，フランス語，ドイツ語，エストニア語，フィンランド語，トルコ語のコーパスには，Leipzigcorporaを用いた．各言語のは，事前にキー列に変換したは，MeCab(http://mecab.sourceforge.net/)を用いて読みに変換した．また，日本語の``し''がキー列としては``shi''にも``si''にもなるように，文字に対して複数のキー列が対応する場合は，事前に定めた確率を用いて対応するどのキー列にも文字が変換される可能性が残るようにした．．混合率による判別精度の変化をみるため，テストセットを2つ作成した．テスト1では，どの言語の出現確率も等確率であるような多項分布から生成した．テスト2では，メインとなる言語が90%を占め，残りの10%は残りの言語が均等に配分されるような多項分布から生成した．実際の多言語では，メインとなる言語が存在するので，テスト2の方がより現実的な状況に即している．出力確率と遷移確率は，sec:modelで述べたPPMCによって推定する．実際のシステムでは，どちらの確率も動的に学習されるのであるが，今は判別精度を評価することが目的であるため，事前に準備した訓練コーパスを用い，テスト中は動的な学習を行わない．sec:outputのeq:ppmにあるように，出力確率はn_max=5で学習した．また，今回は多項分布から人工的にコーパスを生成しているため，遷移確率はk_max=1とした．評価は，生成した多言語コーパス上での10回交差検定を用いた．訓練コーパスのサイズは100~Kbyte，テストデータは11~KByteとした．出力確率は事前に各言語の訓練コーパスを用いて学習し，遷移確率は約2000トークンを用いて学習した．テスト1，テスト2の両者の結果を，それぞれ，fig:graphtest1とfig:graphtest2に示す．横軸は言語数を表し，縦軸は判別精度を表す．各言語数ごとに，全ての言語の組み合わせについて言語セットを作成した．各言語セットごとに10回交差検定を用いて判別精度を測定した後，全ての言語セットについて判別精度を平均した値をプロットした．凡例中の「PPM」は遷移確率もPPMを用いて学習させた場合，「ML」は出力確率のみを用いて判別させた場合（最尤推定に相当），「Baseline」は最も頻度の高い1言語を常に正解として返す場合である．どの言語も等確率で出現するテスト1（fig:graphtest1）では，PPMとMLの精度が非常に近くなっている．これは，PPMが遷移確率を学習を通して，どの言語も等確率で出現していることを学習したためであり，遷移確率の学習を無限に行えば，理論的にはPPMの精度とMLの精度は一致すると考えられる．一方，テスト2（fig:graphtest2）では，PPMがMLより明らかに高い精度を示している．PPMは遷移確率を学習することで，主となる言語が90%を占めていることを学習する一方，MLでは遷移確率を学習しないため，このような結果となる．また，先行研究では調査がなされていない3言語以上の場合では，MLはベースラインより下がってしまうことがわかった．この結果から，各言語について少量のコーパスしか入手できない場合でも，単純にMLを使って言語を最尤推定するのではなく，遷移確率をPPMを用いて推定することによって，言語判別の精度を向上させることが可能であると考えられる．また，言語セットごとに，判別精度に差がみられることも注目に値する．例えば，綴りが似通った単語の多い英語とフランス語の両方を含む言語セットでは，他の言語セットよりも精度が落ちる傾向が見られる．実際に，テスト2で，90%が英語，5%がフランス語，5%がドイツ語であるような，ある言語セットでの判別精度は，3言語の言語セット全体の平均より低い%であった．一方，90%が英語，5%がフィンランド語，5%がトルコ語であるような，ある言語セットでの判別精度は，3言語の言語セット全体の平均より高い%であった．</subsection>
  <subsection title="IME切り替え操作回数による評価実験">次に，の実用性を評価するため，実際の多言語を入力した場合に，IME切り替え操作回数が減少する量を測定した．sec:designで述べたように，キー操作は3種に分類されるが，が関わるのはIME切り替え操作回数のみであるため，これを測定した．この実験のために，2種類の多言語をWebから取得した．各の詳細をtab:statに示す．両とも，主となる言語は英語であり，文書1では日本語が，文書2では日本語と中国語のトークンが混在している．文書2では，文書の大半98.9%が英語のトークンである点が特徴的である．各を，既存手法を用いて入力した場合と，を用いて入力した場合の，それぞれのIME切り替え操作回数を比較した．既存手法では，言語が切り替わるたびにIME切り替え操作を行わなければならない．一方，では，言語判別に失敗した場合のみIME切り替え操作を行えばよい．誤判別時に目的のIMEに切り替えるための操作は，既存手法と同じく，1回で行うことができるものとした．出力確率は，前述の評価で用いた各言語100~Kbyteのコーパスより学習させた．遷移確率については，事前の学習は行わない．すなわち，実験開始時点では，はどの言語が入力されるか分からず，各言語が一様に入力されるものと想定している．具体的には，は，この実験の開始時点で，文書1では英語と日本語を一様に，文書2では英語と日本語と中国語を一様に，ユーザが入力するものと想定している．この実験は，実際に多言語を入力する場合に，IME切り替え操作回数が減少する量を測定することが目的であるため，実験中は，出力確率も遷移確率もPPMCを用いて動的に学習されるようにした．特に遷移確率の学習も行っているため，この実験ではは，入力されているテキストにおける各言語の比率についても学習していく．考慮される文脈の長さについては，n_max=k_max=5とした．実験の結果を，tab:decreaseresultに示す．実験の初期段階では，2において，英語であるべき2中の``tofu''が日本語として判別されてしまう誤判別が起こった．この誤判別は，借用語の曖昧性が原因であり，sec:designで予想された結果である．実際，は``tofu''が英語と判別されるべきであることをPPMCを用いて学習したため，``tofu''による誤判別は実験の初期段階にとどまり，実験の後半では発生しなかった．結果として，を用いた場合，両とも，既存手法と比較して%を超えるIME切り替え操作回数の減少が認められた．特に，2でIME切り替え操作回数が減少したことは，重要な知見である．sec:designで述べたように，の有用性は，誤判別2に依存する．2は英語が98.9%と大半を占めるにも関わらず，1と比較して，誤判別2は僅かしか増加していない．この結果は，sec:designの最後で述べた懸念を払拭するものである．すなわち，入力頻度の少ない言語において，IME切り替え操作回数を増加させる誤判別2が起こった場合でも，訂正を繰り返し行うことでが学習し，以後の誤判別2を防ぐことが可能である．この実験では，文書2において最大3言語間の判別を行ったが，より多くの言語をサポートした場合でも，現実的には同様にして誤判別2を防ぐことが可能であると考えられる．以上より，これらの結果は，が既存手法と比較して有用であることを示唆している．</subsection>
  <section title="結論">は，ユーザーが入力したキー列から言語を判別して，IMEを自動的に切り替えることで，多言語入力におけるユーザーの負担を軽減するシステムである．言語判別は，隠れマルコフモデルとしてモデル化した．事前に各言語の少量の学習コーパスのみを用意し，出力確率も遷移確率も入力に伴い動的に学習させることで，多くの言語に容易に対応することを優先した．これを達成するため，PPM法を用いた．評価実験の結果，現実的な，1つの言語が90%を占める3言語からなる多言語において，%の判別精度を得た．また，実際に多言語を入力した場合，既存手法と比較してIME切り替え回数が%減少した．これらの結果より，を用いることで多言語を効率的に入力することが可能であることが示唆された．今後の課題としては，識別モデルを用いて精度を向上することや，IMEを頻繁に切り替える必要のある語学教材の作成を容易にするシステムとして語学教育分野に応用すること，携帯端末など計算機の性能に制限がある状況でも幅広く利用可能にすることなどが挙げられる．document</section>
</root>
