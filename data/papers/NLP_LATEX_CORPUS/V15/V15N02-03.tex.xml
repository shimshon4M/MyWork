<?xml version="1.0" ?>
<root>
  <jtitle>整合性尺度を用いた構造的アラインメント</jtitle>
  <jauthor>中澤敏明黒橋禎夫</jauthor>
  <jabstract>本論文では対訳文アラインメントの全体的な整合性を評価する新たな基準を提案する．この手法は係り受けタイプによる木構造上での距離や，距離スコア関数などの統計的な素性に基づいている．また依存構造木を元にしたアラインメント手法であるため，両言語間の言語構造の違いを適切に吸収することが可能である．さらに本手法により，複数見つかる対応候補の中から適切なものを選択することも可能である．日英新聞記事コーパスでのアラインメント実験により，本手法によるアラインメント精度は他の言語構造の近い言語対での精度と遜色ないことが示された．</jabstract>
  <jkeywords>機械翻訳,アラインメント,木構造,整合性,係り受け距離</jkeywords>
  <section title="はじめに">初期の機械翻訳の研究では，翻訳のルールを人手により書き下して翻訳するルールベース翻訳(RBMT)が用いられていた．計算機性能の問題もあり，しばらくはRBMTによる研究が進められてきたが，多様な言語現象を全て人手で書き下すことは事実上不可能であるし，他の言語対への汎用性が乏しいなどの欠点がある．そこで次に考案されたのが，あらかじめ与えられた対訳コーパスから翻訳知識を自動で学習し，その知識を用いて翻訳を行うコーパスベースの手法である．コーパスベースの手法で最も重要なのが，翻訳で使う知識を対訳コーパスから学習するアラインメントと呼ばれるステップである．アラインメント精度は翻訳精度を大きく左右するため，現在までにアラインメントに関する研究が数多くなされてきた．アラインメント研究の多くは，対訳文を1次元の単語列として扱うものであり，その最も基本的なモデルとして，単語レベルでのアラインメントを統計的に行うIBMモデルが広く利用されている．IBMモデルでは原言語と目的言語の単語同士の対応確率モデル(lexicon)や，語順に関するモデル(distortion)，語数を合わせるためのモデル(fertility，nullgeneration)などを統計的に学習する．この単語列アラインメント手法を基礎として，アラインメント結果からより高度な翻訳知識を学習する手法がいくつか提案されている．IBMモデルは1単語ごとでのアラインメントを行うが，KoehnらはIBMモデルによるアラインメント結果をベースとして，そこから句に相当する部分を抽出する手法を考案し，翻訳の精度をより高めた．ここでいう句とは，単語列を便宜上，句と呼んでいるだけであり，意味のまとまりを表しているわけではなく，また句の階層的関係を扱うものでもない．またChiangは単語列ではなく，同期文脈自由文法に基づいた広い範囲の翻訳パターンを学習する手法を提案した．Chiangの手法はKoehnらの手法による句対応結果からの学習を行うため，そのベースにはやはりIBMモデルがある．このような発展的な翻訳知識学習の手法は，翻訳においてある程度の文の構造を用いることにつながるが，そのベースとなるアラインメント手法であるIBMモデルは，文の構造情報は一切用いていない．このように単語列として文を扱う手法は，英語とヨーロッパ言語など言語構造に大きな違いがない言語対では精度よいアラインメント結果が得られるが，日英などのように言語構造が大きく異なる言語対に対しては不十分である．つまり言語構造が大きく異なる言語対において高精度なアラインメントを実現するためには，アラインメントにおいても各言語での文の構造を利用する必要がある．アラインメントにおいて言語構造を扱う研究は，古くは佐藤と長尾やSadlerとVendelmans，松本らによって提案されたが，当時は枠組を提案し，短い文での実証を行ったのみで，長い文，複雑な文への適用実験などは行われなかった．しかしその枠組自体は現在でも十分有効なものである．また渡辺らやMenezesとRichardsonも構造を用いたアラインメント手法を提案している．これらの研究では，比較的長く，複雑な文のアラインメントを行っている．文が長くなると，対応関係の曖昧性が必然的に増加し，これが問題となる．渡辺らは，曖昧性のない語からの木構造上での距離を尺度として曖昧性の解消を行い，MenezesとRichardsonは確率的な辞書の情報を利用し，最も確率の高い単語から順に対応付けることにより，曖昧性解消を行ったが，いずれもヒューリスティックなルールに基づいた手法であり，木構造全体を整合的に対応付けることはしていない．両言語の木構造を確率的に対応づける研究もある．このような手法は，原言語文の木構造を組み換えることにより，目的言語文の木構造を再現しようとするものであるが，構造を用いることの制約が強すぎるため，この制約をいかに緩めるかが議論の対象となる．Gildeaは原言語の任意の部分木を複製し，目的言語の木構造を再現する手法を提案し，韓国語と英語を対象とした実験でアラインメントエラーレート(AER)で0.32という高い精度を達成しており，言語構造を用いたアラインメントの有効性を示している．しかし我々は，木構造に対してこのような操作を行う必要はなく，木構造をそのままアラインメントすれば良いと考えた．我々の手法は，佐藤と長尾などによって提案された手法を踏まえつつ，ヒューリスティックなルールではなく，木構造全体を整合的に対応付けることを目的とする．本論文では，係り受け距離と距離—スコア関数を利用した，構造的木構造アラインメント手法を提案する．本手法は依存構造木を利用しているため言語構造の違いを克服することができ，さらに木構造上の距離に基づいたアラインメント全体の整合性を，言語対に独立に測ることができる．さらに構造情報を崩すことなく利用するため，豊富な翻訳知識の獲得も望める．次章では我々の機械翻訳システムのアラインメントモジュールの基本的な部分について簡単に紹介する．章では我々が提案する手法を説明する．章では提案手法の有効性を示すために行った実験の結果と結果の考察を述べ，最後に結論と今後の課題を述べる．</section>
  <section title="構造的句アラインメント">我々の機械翻訳システムは主に日英を対象としている．アラインメントは日本語，英語の構文解析器や対訳辞書などを用いて，以下のステップにより達成される．</section>
  <subsection title="依存構造解析">日本語文は形態素解析器JUMANと構文解析器KNPを用いて依存構造木に変換される．依存構造木の各ノードにはただ1つの内容語が含まれており，それに付随する助動詞や接尾辞などの機能語は同じノードに含まれる．英語文については，まずCharniakらのnlparserを用いて構文解析し，さらにヘッドを定義するルールにより依存構造木に変換する．日本語の場合と同様，各ノードは1つの内容語とそれに付随する機能語とからなる．図に木構造の例を示す．木構造のルートノードは一番左に配置されており，それぞれの句は上から下に語順どおりに配置されている．</subsection>
  <subsection title="単語/句対応の探索">日英間の単語/句対応の候補探索には，対訳辞書，Transliteration，数字のマッチング，部分文字列アラインメントなどいくつかの手がかりを利用する．</subsection>
  <subsubsection title="対訳辞書">日本語の単語と英語の単語の全ての組み合わせを対訳辞書から探し，対応候補を見つける．このとき，1語ずつではなく複合名詞などの複数語の探索も行う．また現時点では対訳辞書には確率的な情報は含まれていない．</subsubsection>
  <subsubsection title="Transliteration">日本語で形態素解析器によって人名や地名などの固有名詞と判定された語や，一般的に外来語に用いられることの多いカタカナ語に対して，英語へのtransliteration候補を自動的に生成し，これら候補と英語文に現れる単語との類似度を計算する．類似度は編集距離を元にして計算され，類似度が閾値を越える組み合わせがあった場合，それらを対応候補とする．例えば以下の例は対訳辞書では対応候補として得られないが，transliterationにより対応候補とされる．</subsubsection>
  <subsubsection title="数字のマッチング">それぞれの言語において異なる数字表現を算用数字に汎化することにより，対応候補を得る．例えば日本語の「二百六十万」と英語の``2.6million''は共に同じ数字``2600000''を表しているため，それぞれ汎化することにより対応候補とすることができる．</subsubsection>
  <subsubsection title="部分文字列アラインメント">対訳文の中には特別な言い回しや辞書に載っていない専門用語などを含んだもの，文の内容に過不足があるものなどが存在する．これまで挙げた手がかりだけでは，このような対訳文を正確にアラインメントするのに十分な対応候補を見つけることができない場合がある．このため，言語資源に依存しない統計的なアラインメント手法も併用することが必要となる．統計的手法として，我々はCromieresの手法を利用した．この手法は，対訳コーパス中の各言語の任意の部分文字列（分かち書きされている場合は単語列）の共起頻度を元にして対訳文のアラインメントを行う手法である．任意の部分文字列についてアラインメントするため形態素解析が不要な点，またSuffixArrayを用いて高速にアラインメントできる点で優れている．例えば以下の対訳文を考える．対訳辞書情報から得られる対訳候補は``言われるsaidthat''のみであり，不十分だが，Cromieresの手法を用いることにより``参院theHouseofCouncillors'',``選election'',``の社会thesocial'',``党のDemocraticParty''の各対応が得られる．</subsubsection>
  <subsection title="適切な対応候補の選択">前章で得られた対応候補の中には，曖昧性を持つ候補や，曖昧ではないが文脈上不適切な候補が含まれることがある．例えば図において，日本語の``保険''と英語の``insurance''はそれぞれ2度ずつ出現しており，組み合わせで4つの対応候補が得られることになり，曖昧性が生じる．さらに``申し立て''の訳語として``file''と``claim''の2つがみつかり，ここでも曖昧性が生じる．このため，見つかった対応候補の中から適切な候補のみを選び出す基準が必要となる．これについての詳細は章で述べる．</subsection>
  <subsection title="未対応ノードの処理">ここまでの処理により対訳文間にいくつかの対応が見つかったが，いくつかのノードが対応付けられずに残る場合がある．これらのノードは簡単なルールにより他の対応に併合する．まず日本語，英語ともに名詞句内で未対応部分があれば名詞句内の他の対応に併合し，それ以外の未対応ノードはすべて親ノードの対応に併合する．ただし，節の区切りなどの大きな区切りを越えての併合は行わない．</subsection>
  <section title="整合性尺度に基づく構造的句アラインメント">対訳文全体として整合的なアラインメントを行うために，任意の1組の対応に対して整合性スコアを定義する．最も整合的なアラインメントは整合性スコアの平均を最大とするような対応候補の組み合わせとして得られる．上式でa_iとa_jは互いに異なる任意の対応候補であり，整合性スコアは対応候補のペアに対して定義される．整合性スコアの定義については次章以降で詳しく述べる．</section>
  <subsection title="アラインメントの整合性">アラインメントの精度を左右するのは，曖昧な対応や誤った対応が含まれるたくさんの対応候補の中から，いかに正しいものを選択するかである．これを実現するために，対訳文全体を整合的に対応付けられるロバストな手法が必要である．英語とヨーロッパ言語のように言語構造の似た言語対ならば，広く研究されている統計的な手法でも高精度にアラインメントすることが可能であるが，日本語と英語では言語構造が大きくことなるため，統計的な手法での高精度なアラインメントは難しい．しかし我々のMTシステムは依存構造木をベースとした深い言語処理を行っているため，リッチな情報を利用して言語構造の違いを吸収できるようなアラインメントが可能である．我々の提案する手法を説明する前に，アラインメントの整合性とは何かを考えてみよう．図において，それぞれの三角形は各言語の木構造上の節を表しており，2つの木構造にまたがって引かれた直線の1つ1つが対応候補を表している．すべての対応候補のうちで，×印が記された候補が全体の整合性を低下させていることが見て取れる．このような不整合は視覚的には明らかである．この不整合さを定量的に評価するために，我々は一組の対応候補の木構造上での距離に注目する．図の例で×印が記された候補と他の1つの候補とに注目すると，原言語側での2つの直線の距離は遠いのに対して，目的言語側では非常に近い．句の依存情報を元にした木構造上で議論すると，このようなことが起こることは稀である．つまり，一方の言語で構造的に近い句同士が他方の言語では遠くなるようなことはほぼありえないということである．このように，あらゆる対応候補のペアの距離を適切に扱うことにより，全体的に整合的なアラインメントを得ることができると考えられる．この距離を扱うために，我々は次章で説明する整合性スコアを提案する．</subsection>
  <subsection title="整合性スコア">整合的なアラインメントを得るために，依存構造木上で整合性スコアを定義する．整合性スコアは2つ1組の対応候補に対して計算され，対応候補ペアの距離の関係が適切ならばプラス，そうでなければマイナスのスコアとなる．まず，任意の対応候補ペアa_i(p_Si,p_Ti)とa_j(p_Sj,p_Tj)に注目する．p_Siとp_Tiはそれぞれ対応候補a_iによって対応づけられている原言語，目的言語の句を表しており，p_Sjとp_Tjも同様である．原言語側の係り受け距離d_S(a_i,a_j)は，p_Siとp_Sjの間の木構造上での距離として定義され，目的言語側についても同様にd_T(a_i,a_j)が定義される．この距離を用いて整合性スコアは以下のように計算される．ここでd_Sはd_S(a_i,a_j)を省略して表記したもので，d_Tも同様である．f(d_S,d_T)は原言語側と目的言語側の距離のペアをスコアに変換する関数であり，距離—スコア関数と呼ぶ．係り受け距離と距離スコア関数については次章で詳しく述べる．対訳文全体のアラインメントの整合性は，式に表されるように，あらゆる組み合わせの対応候補ペアの整合性スコアの和として定義される．正しい対応候補は，その近くにある対応候補により支持され，プラスのスコアが与えられ，さらに全体のアラインメントの整合性に寄与する．ここで，近くにある対応候補とは，原言語側，目的言語側ともに，距離が小さい対応候補ということである．</subsection>
  <subsection title="係り受け距離">この章では，係り受け距離d_Sやd_Tの計算方法を説明する．最も単純な設定としては，すべての枝の距離を1とし，係り受け距離はあるノードから別のノードまでに通る枝の数とすることが考えられる．しかしながら，高度な言語処理技術により得られる知識を利用し，より精度の高いシステムの構築を目指すことは自然である．日本語依存構造解析器KNPおよび英語のCharniakのnlparserはそれぞれ係り受けタイプの情報を出力する．これらの情報を利用して，係り受けタイプスコアを定義する．このスコアは係り受けの強さ，つまり枝の距離を表しており，係り受けの強さが強い（区切りが弱い）ほど小さく，係り受けの強さが弱い（区切りが強い）ほど大きくなるように設定する．例えば複号名詞内の形態素の区切りなどは係り受けが強いのでスコアは小さく，逆に節の区切りなどは係り受けが弱いのでスコアは大きくなる．係り受けタイプは高々30種類程度しかないため，係り受けタイプスコアは人手により設定する．図にその一部を示す．日本語の係り受けタイプは南による分類に基づいて，構文解析器KNPが出力するものである．スコアの値は主観的に定義したものであり，正確に言語現象を反映した値ではない可能性がある．この値を自動学習により設定することは，今後の課題である．係り受けタイプスコアを実際の対訳文に適用した例を図に示す．図で各枝上のラベルが係り受けタイプを示しており，その上の数字が係り受けタイプスコアである．係り受け距離d_Sやd_Tは，あるノードから別のノードまで最短ルートでたどるときに通る枝の係り受けタイプスコアの和と定義する．例えば図でペア1の距離は，日本語側(d_S)は``保険請求の''の枝を通るので，d_S=1となり，英語側(d_T)は``insuranceanclaim''の枝を通るので，d_T=1となるため，(d_S,d_T)=(1,1)となる（図で丸で囲まれた数字のある枝を通る）．同様にペア2の距離は，日本語側はペア1と同じでd_S=1だが，英語側は``insurancewiththeoffice''，``withtheofficewillhavetofile''，``anclaimwillhavetofile''の3つの枝を通るので，枝の距離を合計してd_T=7となるため，(d_S,d_T)=(1,7)となる（図で四角で囲まれた数字のある枝を通る）．木構造を用いずに単純な単語列として見た場合，2つの``insurance''はどちらも``claim''から近いと判断されてしまうため，正しい曖昧性解消ができなくなる．このようなことは他の例でもしばしば起こりうることであり，木構造を用いることの利点がここで示される．</subsection>
  <subsection title="距離—スコア関数">距離スコア関数f(d_S,d_T)は2つの距離の組(d_S,d_T)に対して，それらの関係が適切かどうかを反映するスコアを与える．この関数を設定するために，まず実際のデータにおける現象を観測した．正解のアラインメントが付与された4万文の新聞記事対訳コーパスを用いて，距離の組の出現頻度を係数した．図に観測結果を示す（状況がとらえやすいように，別角度からの図を2つ示す）．縦軸が頻度の対数であり，2つの横軸は2つの距離にそれぞれ対応する．結果を見ると，距離が等しいペアの頻度は高く，逆に距離に差があるペアの頻度が著しく低下することがわかる．この観測結果を踏まえて，距離—スコア関数f(d_S,d_T)を人手で設定した．このとき，以下の条件を満たすようにする：d_Sとd_Tが共に小さい場合は，注目した対応候補の関係が適切であると判断できるので，プラスのスコアを与えるd_Sとd_Tが共に大きい場合（距離10以上）は，対応候補は互いに関係性を持たないと判断し，0とする．d_Sとd_Tの差が大きい場合は，対応候補の関係が不適切であると判断できるので，マイナスのスコアを与える．例えば図において，ペア1(d_S,d_T)=(1,1)にはプラスのスコアを与えるが，ペア2(d_S,d_T)=(1,7)に対してはマイナスのスコアを与える．</subsection>
  <subsection title="最適なアラインメントの探索">アラインメントの整合性は式に示したように，全ての対応候補ペアのf(d_S,d_T)の和として定義される．また最適なアラインメントは，この和を最大とするアラインメントである．しかしながら，考えうる全てのアラインメントのパターンをチェックしようとすると，組み合わせ爆発を起こすので，最適なアラインメントの探索は近似的に行う．まず，ある1つの対応候補a_iに対するスコアを以下のように定義する：これにより，全ての対応候補の1つ1つに個別にスコアが計算される．ここで，最も高いスコアとなった対応候補は正しい対応であると判断し，採用する．同時に，採用された対応と衝突している対応候補は棄却する．そして各対応候補のスコアを再計算し，採用・棄却を繰り返す．これをすべての対応候補が採用か棄却されるまで繰り返すことにより，近似的に最適なアラインメントが得られる．</subsection>
  <section title="実験と考察"/>
  <subsection title="アラインメント実験">正解のアラインメントが付与されている新聞記事の対訳コーパスからランダムに500文を選び，これを用いて日英対訳文のアラインメント実験を行なった．アラインメントの評価単位は，日本語は文字単位，英語は単語単位とした．日本語の評価単位を単語単位としなかった理由は2つある．1つは我々の出力と正解データとで形態素解析のずれがある場合があることである．もう1つは，我々の出力も正解データもアラインメントの単位は句なのだが，そもそも何を句とするかの定義が定まっていないため，句の区切りにずれがあることである．これらの理由から，評価を単純に，わかりやすくするために，日本語では文字単位で評価した．なお我々の予備実験により，評価単位を文字単位としても大きな副作用はないことが示されている．対訳辞書として，研究社の和英辞書（見出し語数36,K，抽出した対訳数214,K）と，同英和辞書（見出し語数50,K，抽出した対訳数303,K）を用いた．評価は適合率，再現率，F値により算出し，さらにAERも求めた．なお，正解データにはSure(S)アラインメントのみが付与されており，Possible(P)アラインメントはない=1-F-measureと	して計算される．．実験結果を表に示す．``baseline''はすべての枝の距離を1とし，さらに整合性スコアf=1/d_S+1/d_Tとして実験したものである．``uniformdist.''は枝の距離はすべて1だが，整合性スコアを章で定義した関数により計算した場合の結果である．``proposed''は``uniformdist.''の枝の距離を係り受け距離に変更した結果である．比較実験として，統計翻訳のフリーツールであり，その精度に定評のある``Moses''を利用したアラインメント実験も行なった．トレーニングデータとして，毎日新聞4万対訳文と読売新聞25万文を利用し，日本語文については形態素解析器JUMANで形態素に分割した．また章で述べた部分文字列アラインメントのみでのアラインメント精度を``sub-string''に示した．ここでのトレーニングデータは，Mosesと同じものを用いた（ただし，日本語の形態素分割は行っていない）．``manual''は，我々の出力を人手により修正したものであり，アラインメントの上限値と見ることができる．上限値が100にならないのは，我々の出力と正解データとのアラインメントの単位にズレがあることや，正解データ自体に誤りが含まれていることがあるためである．</subsection>
  <subsection title="考察">表より，距離スコア関数を改善することによりF値で2.7ポイントの精度向上が見られる．実際の言語現象を観測し，それを反映する関数の定義を用いることの妥当性と，その効果の高さがこの結果から示された．係り受けスコアを用いることにより，さらに約1.5ポイント精度向上したが，距離スコア改善による向上に比べると差が小さく，係り受けスコアを用いることの利点はそれほどないように見える．現在は係り受け距離は人手により設定されているが，この設定が実際の言語の特徴を十分に反映しているかどうかという点で疑問が残る．今後係り受け距離を自動学習などにより適切に設定することにより，係り受け距離を利用する効果がより顕著に表れるものと思われる．距離スコア関数の改善と，係り受けスコアの利用により，baselineより4.22ポイントの精度向上を達成した．図に改善例を示す．例では日本語の``司法''に対して，英語では``judicial''が二度出現しており，曖昧性が発生している．baselineではこの曖昧性解消に失敗しており，アラインメントが不適切だが，proposedでは正しく曖昧性解消が行われ，正しいアラインメントを得ることができた．しかしながら，日本語で``司法''という語が一度しか出てきていないため，正確には英語の``ourjudicialsystem''は未対応とするのが適切である．このような省略は逆の場合を含め，しばしば起こることであるため，適切に扱う必要がある．これについては今後検討する．我々の提案手法では依存構造を用いており，その情報に強く頼っている部分が大きい．このことは今まで述べたとおり非常に有効な手段であるが，一方で依存構造解析の失敗が容易にアラインメントの失敗につながってしまう．日本語については形態素解析(JUMAN)の精度が99%，構文解析(KNP)の精度が90%であり，高精度ではあるが失敗も10%程度は含まれることになる．英語ではこれよりさらに精度は低くなり，特に並列構造などでの解析失敗が目立つ．このため，我々が提案する整合性尺度を利用して，依存構造木自体の修正を可能にする枠組を考案する必要がある．これにより，アラインメントの精度向上が見込めるだけでなく，基礎技術である構文解析技術へのフィードバックを図ることも可能となる．``Moses''の結果は我々の結果に比べてかなり低い．これは章で述べたように，統計的な手法が言語構造の異なる言語対に対してはあまり効果が発揮できないことの表れといえる．日本語と英語では言語構造に大きな違いがあり，例えば日本語ではSOVの語順で文が構成されるが，英語ではSVOの語順で文が構成される．このような言語対に対しては，我々の手法のように言語処理リソースを用いた深い文解析が必要であると言える．``sub-string''の結果は``Moses''の結果とほぼ同じであるが，``sub-string''では形態素解析を行っていないという点を考慮すると，十分によい結果であると言える．特に適合率を見るとMosesよりも良い結果であり，このことは我々のアラインメントで利用するときには有効である．表に，関連研究で示された，日英以外の言語対におけるアラインメント精度を示す．HLT-NAACL2003（英語—フランス語と英語—ロシア語）とACL2005（英語—ロシア語）はそれぞれアラインメントに関するワークショップでの結果であり，それぞれのワークショップでの最も良い精度を記録した研究の値である．は英語と韓国語でのアラインメント精度の向上を目指したものである．また最も基本的な統計的単語アラインメントツールであるGIZA++を用いてそれぞれの言語対でアラインメントした結果も示す．すべての値はAERである．表より，英語—フランス語対でのアラインメントは最も容易であり，英語—韓国語で最も難しいといえる．これは言語構造の違いが英仏では小さいが，英韓では大きいことからくると思われる．韓国語は日本語に近いといわれており，日英と同様，アラインメントが難しい．我々の日英アラインメントの結果をこれらの他言語対での結果と比較しても，十分高精度であると言える．</subsection>
  <section title="結論と今後の課題">本論文では構造的句アラインメントの精度向上を目的とし，係り受け距離と距離—スコア関数f(d_S,d_T)を用いた新しいアラインメント手法を提案した．また対訳文全体のアラインメントの整合性を全ての対応ペアのスコアf(d_S,d_T)の和として定義し，整合性を定量的に評価する枠組を提案した．これにより，構造的句アラインメントの精度向上を達成し，基本的な統計的手法に比べておよそ30ポイント高いアラインメント精度を実現した．実験結果から，言語構造の異なる言語対であっても我々の手法は十分に高精度なアラインメントを行うことができ，関連研究での他の言語対での結果と比較しても遜色ない結果をあげた．今後我々の手法を日英以外の言語対に対しても適用し，その有効性を検証したい．また係り受け距離と距離—スコア関数は現在は人手により設定されているが，実際の言語の特徴をよりよく反映するモデルを構築し，さらに他言語において人手により設定するコストを抑えるために，単言語コーパスからパラメータを自動的に学習する手法を考案する必要がある．アラインメントの失敗例の多くは構文解析誤りによるものである．現在の枠組では構文解析結果を完全に信頼して整合性を測っているが，我々の手法が十分に洗練されたものになれば，整合性尺度に基づいて構文を修正できるような，構文解析とアラインメントが互いに柔軟に影響しあい，互いの精度向上を行えるような柔軟な枠組を作ることが今後の課題である．document</section>
</root>
