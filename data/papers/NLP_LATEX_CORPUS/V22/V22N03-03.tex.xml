<?xml version="1.0" ?>
<root>
  <jtitle>入れ子依存木の刈り込みによる単一文書要約手法</jtitle>
  <jauthor>菊池悠太平尾努高村大也奥村学永田昌明</jauthor>
  <jabstract>近年の抽出型要約の多くの手法は，原文書の情報を網羅し，かつ与えられる要約長の制約に柔軟に対応すべく，文抽出と文圧縮を併用した組み合わせ最適化問題として要約を定式化している．つまり，文書から文という文法的な単位を維持するよう単語を抽出することで要約を生成している．従来の手法は非文の生成を避けるため，構文木における単語間の関係を利用して文を圧縮しているものの，文書における大域的な文と文の間の関係，つまり談話構造には着目してこなかった．しかし，談話構造を考慮することは要約の一貫性を保つ上で非常に重要であり，文書の重要箇所の同定にも役立つ．我々は，文書を文間の依存関係，単語間の依存関係をあらわした入れ子依存木とみなし，単語重要度の和が最大となるように木を刈り込むことで要約を生成する手法を提案する．実験の結果，提案手法が要約精度を有意に向上させたことが確認できた．</jabstract>
  <jkeywords>文書要約，単一文書要約，修辞構造理論</jkeywords>
  <section title="はじめに">抽出型要約は現在の文書要約研究において最も広く用いられるアプローチである．このアプローチは，文書をある言語単位（文，節，単語など）の集合とみなし，その部分集合を選択することで要約文書を生成する．要約システムに必要とされる側面はいくつかあるが，特に重要なのが，一貫性(coherence)と情報の網羅性が高い要約を生成することと，要約長に対し柔軟に対応できることである．一貫性の高い要約とは，原文書の談話構造（あるいは論理構造）を保持した要約を指す．要約が原文書の談話構造を保持していない場合，原文書の意図と異なる解釈を誘発する文書が生成されてしまうおそれがある．すなわち，原文書と似た談話構造を持つように要約文書を生成することは，要約を生成するために重要な要素である．要約文書において談話構造を考慮するために修辞構造理論(RhetoricalStructureTheory;RST)が利用可能である．RSTは文書の大域的な談話構造を木として表現するため，RSTの木構造を損なわぬように原文書中の抽出単位を選択することで，原文書の談話構造を保持した要約文書が生成できる．従来のRSTを抽出型要約に組み込む従来の手法の問題点は，その抽出粒度にある．RSTで扱う文書中の最小単位はElementaryDiscourseUnit(EDU)と呼ばれ，おおよそ節に対応するテキストスパンである．従来手法は，抽出の単位をEDUとして要約の生成を行ってきたが，それが要約において必ずしも最適な単位であるとは限らない．また，本節で後に説明するように，それなりの長さを持ったテキストスパンを抽出単位とする場合，要約長に対する柔軟性の面でも問題が生じる．情報の網羅性は，文書要約の目的そのものでもある非常に重要な要素である．要約文書は原文書の内容を簡潔にまとめている必要があり，原文書の重要な内容を網羅していることが要求される．近年，抽出型要約において，原文書から重要な抽出単位の部分集合を選択する問題を整数計画問題(IntegerLinearProgramming;ILP)として定式化するアプローチが盛んに研究されている．抽出された部分集合が原文書の情報をなるべく被覆するような目的関数を設定し，最適化問題として解くことで，原文書の情報を網羅した要約文書の生成が可能となる．実際にこれらの手法は要約文書の情報の網羅性の指標となる自動評価手法であるROUGE(Recall-OrientedUnderstudyforGistingEvaluation)値の向上に大いに貢献してきた．RSTを要約に組み込む研究の多くはRSTで定義される修辞構造の構造木をそのまま利用したものが多かったが，Hiraoらは，RSTの談話構造木をそのまま用いることの問題点を指摘し，EDUの依存構造木(DEP-DT)に変換し，依存構造木の刈り込みにより要約を生成する木制約付きナップサック問題として要約を定式化した．ILPの導入によって，高い網羅性を持った要約の生成が可能となった一方で，要約手法が持つ要約長に対する柔軟性は，情報の網羅性と密接な関係をもつようになった．文書要約では，要約文書が満たすべき上限の長さを指定することが一般的である．抽出型要約においてよく用いられる抽出単位は文であり，生成された要約の文法性が保証されるという利点がある．しかし，高い圧縮率，すなわち原文書の長さと比較して非常に短い長さの要約文書が求められている場合，文を抽出単位とすると十分な量の情報を要約文書に含めることが出来ず，情報の網羅性が低くなってしまうという問題があった．この問題に対し，文抽出と文圧縮を組み合わせるアプローチが存在する．文圧縮とは，主に単語や句の削除により，対象となる文からより短い文を抽出する手法である．近年，こうした文圧縮技術と文抽出技術を逐次適用するのではなく，それらを同時に行うアプローチ（以降これらを同時モデルとよぶ）が盛んに研究されており，高い情報の網羅性と要約長への柔軟性を持った要約文書の生成が可能となっている．本研究の目的は，文書の談話構造に基づく，情報の網羅性と要約長への高い柔軟性を持った要約手法を開発することである．これまで，文書要約に談話構造を加える試みと，文抽出と文圧縮の同時モデルは，どちらも文書要約において重要な要素であるにもかかわらず，独立に研究されてきた．その大きな要因の一つは，両者の扱う抽出粒度の違いである．前者はEDUであり，後者の抽出粒度は文（圧縮され短くなった文も含む）である．抽出単位を文やEDUというそれなりの長さのテキストスパンにすると，ある要約長制約に対し，選択可能なテキストスパンの組合せは自ずと限られ，情報の網羅性を向上させることが困難な場合がある．我々は，文間の依存関係に基づく木構造と単語間の依存関係に基づく木構造が入れ子となった入れ子依存木を提案し，その木構造に基いて要約を生成することでこの問題に取り組む．提案手法について，図に示す例で説明する．本研究で提案する入れ子依存木は，文書を文間の依存関係で表した文間依存木で表現する．文間依存木のノードは文であり，文同士の依存関係をノード間のエッジとして表現する．各文内では，文が単語間の依存関係に基づいた単語間依存木で表現されている．単語間依存木のノードは単語であり，単語同士の依存関係をノード間のエッジとして表現する．このように，文間依存木の各ノードを単語間依存木とすることで，入れ子依存木を構築する．そして，この入れ子依存木を刈り込む，つまり単語の削除による要約生成をILPとして定式化する．生成された要約は，文間依存木という観点では必ず文の根付き部分木となっており，その部分木内の各文内，すなわち単語間依存木の観点では単語の部分木となっている．ここで，文間依存木からは必ず木全体の根ノードを含んだ根付き部分木が抽出されているのに対し，単語間依存木はそうでないものも存在することに注意されたい．従来，文圧縮を文書要約に組み込む研究では，単語間依存木の場合も必ず根付き部分木が選択されていたが，限られた長さで重要な情報のみを要約に含めることを考えると，単語の根付き部分木という制約が情報の網羅性の向上の妨げとなる可能性がある．そこで提案手法では，根付きに限らない任意の部分木を抽出するために，部分木の親を文中の任意の単語に設定できるよう拡張を加えた．提案手法をRSTDiscourseTreebankにおける要約システムの評価セットで従来の同時モデルや木制約付きナップサック問題による要約手法と比較評価したところ，文書要約の自動評価指標であるROUGEにおいて最高精度が得られることを確認した．</section>
  <section title="関連研究">現在の抽出型要約の主流である文抽出，文圧縮の同時モデルでは，与えられた文書（群）から，文を単語間依存木として表現し，その根付き部分木を刈り込む，すなわち単語を削除することで要約を生成する．また，これをILPとして定式化する研究が盛んに行われている．しかし，文から抽出する単語列を単語依存木の根付き部分木に限ると高圧縮な要約設定において情報の網羅性が低下するおそれがある．．さらに，これらの同時モデルでは文書が持つ談話構造を考慮しないため，情報の網羅性が高く自動評価指標のROUGEにおいて高い値を得ることができるが，一貫性に欠けた要約が生成されてしまうという欠点がある．また，同時モデルにおける文圧縮の手段として，文を依存構造木ではなく句構造木として表現し，その部分木を抽出する手法も提案されている．句構造木は連続した単語列の文法的な役割を階層構造として表現した木であるため，この木を刈り込む際には連続した単語列（句）を同時に削除することが多くなる．よって，依存構造木を用いた刈り込みと比較すると要約長に柔軟な刈り込みが難しい．一方，一貫性をもった要約を生成する手法としてRSTを利用した手法が提案されている．Daum'eIIIandMarcuは，RSTを利用したNoisy-channelモデルに基づく文書圧縮手法を提案した．彼らの手法は一貫性を持った要約の生成が可能であるが，情報の網羅性という観点で最適解が得られるとは限らない．また適切な確率を計算するために大量のコーパスを必要とする上に，計算量の問題で長い文書に適用できないという欠点があった．Marcuは，RSTの構造を利用してEDUの順位を決定し，ランキング上位のEDUを要約として抽出した．Uz^edaらは，Marcuの手法を含む合計6つの手法を組み合わせる手法を提案し，オリジナルの手法との比較評価を行った.節では彼らの報告にある数値も参考値として載せている．Marcuらの手法を含むEDUのランキングに基づく手法は，十分な情報の網羅性が保証されないという欠点がある．Hiraoらはこれを解決するため，EDUの依存木を構築し，その依存関係に基づいてEDUを選択する問題を木制約付きナプサック問題として定式化した．これらの手法はRSTにおけるテキストの最小単位であるEDUをそのまま抽出単位としていたが，EDUが文書要約においても適切な抽出単位であるかについては，要約長に対する柔軟性の面で疑問が残る．EDUは文よりも短いとはいえそれなりの長さを持ったテキストスパンである．そのため，要約に含める情報の組み合わせの自由度は比較的低く，かつEDUのようなテキストスパンを対象とした構文解析器がないため，文圧縮のような技術が適用できない．これに関しては節で評価実験結果をふまえて考察を行う．Hiraoらの手法は提案手法に最も強く関連している．両者の違いは，Hiraoらの手法がEDUをノードとする依存木からEDUを選択する要約手法であることに対し，提案手法は文間の依存関係と単語間の依存関係が入れ子構造を成す木から単語を選択する要約手法であるという点である．また，文重要度の決定に貢献する特徴を調べた文献でも，RSTの有効性が示されている．これまで，文書の（大域的な）談話構造を利用した要約手法について紹介したが，隣接した文同士のつながりを評価し，文の局所的な並びを最適にすることに取り組む研究も存在する．これらの方法では，修辞構造解析器を必要としないため，論理構造が明確でなく自動解析の精度が期待できない文書においては有効である．一方で，文書の大域的な談話構造を考慮した要約生成はできない可能性がある．</section>
  <section title="入れ子依存木の刈り込みによる要約文書生成">本研究の目的は，要約文書の一貫性と情報の網羅性が高く，かつ要約長に柔軟な要約手法を提案することである．要約としての一貫性と要約長への柔軟性を獲得するために文書を入れ子依存木として表現し，入れ子依存木から要約文書を生成する問題を整数計画問題として定式化することで高い情報の網羅性を持った要約生成を行う．本節では，入れ子依存木の構築についての詳細と，ILPでの定式化について説明する．</section>
  <subsection title="修辞構造理論">修辞構造理論(RhetoricalStructureTheory;RST)は，文書の談話構造を表現するために提案された理論である．文書をEDUに分割し，連続したEDU同士（あるいは，複数のEDUをつなぎあわせたテキストスパン）を修辞関係で関連付けることで，談話構造木を構築する．構築される木は，終端ノードがEDU，非終端ノードが子ノード間の修辞関係をラベルに持つ木構造で表現される．図に，談話構造木の例を示す．図において二つの非終端ノードの間に書かれているラベルがそのノード間の修辞関係である．具体的には例示，補足，背景などの関係により，テキストスパン同士がどのような関係にあるかを表現する．今回用いたコーパスでは合計で89種類の修辞関係が存在した．また，修辞関係と共に各テキストスパンには核(Nuclear)か衛星(Satellite)のいずれかのラベルが付与される．核はその修辞関係において中心的な役割を担い，衛星は補助的な役割を持つ．例えば補足という修辞関係では，補足される方のテキストスパンが核であり，その内容を具体的に補足したテキストスパンが衛星となる．図においては，各非終端ノードのNとSがそれぞれ核と衛星を表している．なお，図ののように，複数の核からなる多核(multinucleus)という性質を持った修辞関係も存在する．</subsection>
  <subsection title="入れ子依存木の構築">HiraoらはRSTの木構造を変換することで依存構造に基づくDEP-DTを構築した．DEP-DTは，EDU間の依存関係を直接表現しており，この依存木を刈り込むことで一貫性を保った要約が生成できる．図に，図の木構造から変換されたDEP-DTと本研究で用いる文間依存木を示す．Hiraoらの用いたDEP-DTは，EDUをノードとするものであったが，本研究では文間の関係をとらえた同時モデルのため，これを文をノードとした依存木へと変換する．具体的には，同じ文に属するEDU集合をまとめ，文内の親となっているEDUの依存先を，その文の依存先として採用する．依存先のEDUは他の文に属しているため，この変換規則により，文間の依存関係を持った木構造（文間依存木）を取得することができる．次に文間依存木の各ノードとなる文に対し依存構造解析を行い，単語間の依存構造（単語間依存木）を獲得する．以上の処理により，文書が文の係り受け木，各文内では単語の係り受け木により構成された入れ子依存木を構築する．本研究では，この入れ子依存木から不要な単語を刈り込むことで要約文書を生成する．</subsection>
  <subsection title="整数計画問題による定式化">入れ子依存木からの単語の削除による要約文書の生成は，整数計画問題として定式化できる．具体的には，ある目的関数のもと，文間依存木の根付き部分木，根付き部分木中の各文は単語間依存木の（任意の）部分木となるように単語を選択することで要約を生成する．提案手法は次の整数計画問題で定式化できる．max.&amp;_i^n_j^m_iw_ijz_ijs.t.&amp;_i^n_j^m_iz_ijL;&amp;&amp;x_iz_ij;&amp;i,j&amp;x_parent(i)x_i;&amp;i&amp;z_parent(i,j)+r_ijz_ij;&amp;i,j&amp;r_ij+z_parent(i,j)1;&amp;i,j&amp;_j=0^m_ir_ij=x_i;&amp;i&amp;r_ijz_ij;&amp;i,j&amp;_jR_c(i)r_ij=0;&amp;i&amp;r_iroot(i)=z_iroot(i);&amp;i&amp;_j=0^m_iz_ijmin(,m_i)x_i;&amp;i&amp;_jsub(i)z_ijx_i;&amp;i&amp;_jobj(i)z_ijx_i;&amp;i&amp;x_i0,1;&amp;i&amp;z_ij0,1;&amp;i,j&amp;r_i0,1;&amp;ieqnarraynは対象とする原文書に含まれる文数であり，m_iは文iの単語数である．w_ijは単語ij（i番目の文におけるj番目の単語）の重みである．x_iは，文iを要約に含めるときに1となる決定変数であり，z_ijは，単語ijを要約に含めるときに1となる決定変数である．目的関数は，要約に含まれた単語の重みの総和であり，この関数を最大にするように単語を選択する．式()は，要約として選択される単語数がL以下であることを保証するための制約式である．式()は要約に含まれていない文中の単語を要約に含めてしまうことを防ぐための制約式である．式()は文間依存木から文を選択する時に，その木構造を保つことを保証する．これは文間依存木からは必ず根を含む根付き部分木が選択されることを意味する．parent(i)は，文間依存木において文iの親となる文のインデックスを返す関数である．式()から式()には決定変数r_ijが含まれている．r_ijは，単語ijを根とした部分木を要約文書に含める場合に1となる．式()は，単語間依存木から単語を選ぶ場合，その木構造を保つことを保証する．ただし，単語間依存木の根以外の単語ijを根として部分木を抽出する場合は，その単語ijには必ず親となる単語parent(i,j)が存在する．その状況ではz_ijが1のままz_parent(i,j)を0にすることが許容されなければならず，それを可能とするのが左辺第二項のr_ijである．なお，parent(i,j)は，文iに対応する単語間依存木において，単語ijの親となる単語のインデックスを返す関数である．ただし，このままでは，z_parent(i,j)とr_ijのどちらも1である場合も許容されてしまうため，2つの変数が同時に1となることを制限するための制約式()を追加する．同様に，このままではr_ijのみが1となっている場合も許容されてしまう．r_ijが1である場合はその単語ijは必ず要約に含まれなければならないため，制約式()を追加することで対処する．本研究では文iが要約に含まれる場合(x_i=1)は，そこから抽出される部分木は高々一つであるとしている．そこで，式()により，一つの文から複数の部分木（の根）が生じることを制限している．また，文iにおける単語間依存木の根に相当する単語(root(i))に関しては，根付き部分木を抽出する場合，すなわちr_root(i)が1であるときのみ要約に含めることを保証する必要があり，そのため制約式()を追加している．冒頭で述べた通り，本研究では単語間依存木から部分木を抽出する際は，根となり得るのは文中の動詞と，単語間依存木全体の根となる単語に限っている．そこで，それ以外の単語が根となることを防ぐことを保証するため，制約式()を追加する．ここで，R_c(i)は文i中で根の候補となる単語，すなわち動詞のインデックス集合を返す関数である．式()は，文（に対応する単語間依存木の部分木）を要約に含めるための最低の単語数を規定するための制約式である．これは，単語の削除により木を刈り込むという手法の性質上，極端に短く刈ってしまうと非文になる可能性が高くなることを防ぐ目的がある．また，要約を最適化問題としてモデル化しているので，目的関数を最大化するために要約長の限界まで単語を選択しようとして，刈り込みを無制限に許容すると，極端な例では1単語からなる部分木を選択してしまうため，それを防ぐための制約である．式()は，部分木を抽出する際は必ず一つ以上の主語を含むことを保証する制約である．同様に式()は，目的語を一つ以上含むことを保証する制約である．ここで，sub(i)とobj(i)は，それぞれ文i中の単語のうち係り受けラベルが主語，目的語である単語のインデックス集合を返す関数である．提案手法の文圧縮が単語間依存木の刈り込みに基づいている以上，その操作により非文が生成されてしまう可能性がある．ここで，非文となる部分木の生成を避けるための二種類の追加的な制約を導入する．一つ目の制約式は単語対に対するものである：式()は．単語ikと単語ilは必ず同時に要約に含まれることを保証する．これは，片方だけを要約に含めてしまう場合に非文となってしまうような組に対して定義される．具体的には，係り受けタグがPMOD,VCである単語とその親の単語，否定詞とその親の単語，係り受けタグがSUBあるいはOBJである単語とその親となっている動詞，形容詞の比較級(JJR)あるいは最上級(JJS)とその親の単語，冠詞とその親の単語，``to''とその親の単語である．二つ目の制約式は単語列に対するものである：式()は単語の集合に対し，集合中のいずれかの単語を要約に含めるとき，集合中の他の全ての単語も要約に含めることを保証する制約である．具体的には，固有名詞列（品詞タグがPRP%,WP%あるいはPOSのいずれかである単語列）や，所有格とその係り先の単語，その間に含まれる全ての単語列である．ここで，s(i,j)は，単語ijと，例に上げた関係にある単語インデックスの集合を返す関数である．</subsection>
  <section title="評価実験"/>
  <subsection title="実験設定">提案手法の有効性を示すために評価実験を行った．実験にはRSTDiscourseTreebank(RST-DTB)に含まれる要約評価用のテストセットを用いた．RST-DTBはPennTreebankコーパスの一部の文書（WallStreetJournalから収集された385記事）からなるコーパスであり，RSTに基づく木構造が人手で付与されている．さらにその内30記事について，人手で作成された要約文書（参照要約）が存在しており，それらの文書を評価用テストセットとした．実験に用いたすべての文書は，PennTokenizerによりトークンに区切った．要約システムの入力となる要約長は，参照要約の有するトークン数とした．テストセットに含まれる30記事の参照要約には，平均して原文書の25%程度の長さのlong要約と，平均して原文書の10%程度の長さのshort要約の二種類が存在する．本実験では両方のテストセットについて先行研究との比較を行う．評価尺度としてはROUGE(Recall-OrientedUnderstudyforGistingEvaluation)を用いる．抽出粒度の妥当性について検証するため，比較手法としてEDUを単位とした木制約付きナップサック問題による要約手法と，文を単位とする木制約付きナップサック問題による要約手法を用意した．また，単一文書要約において強力なベースラインとなるLEAD法との比較も行った．LEAD法は，要約長に達するまで文書の冒頭から抽出単位を選択していくことで要約文書を生成する手法である．本稿ではEDUを抽出単位とするLEAD_EDUと，文を抽出単位とするLEAD_sntとの比較を行う．さらに，提案手法において文（単語間依存木）から部分木を抽出する際に根付き部分木に制限する手法（根付き部分木抽出）も用意し，任意の部分木を抽出対象とする提案手法（任意部分木抽出）との比較を行った．本実験に用いたすべての文間依存木は，RST-DTBで人手付与されたRST構造を利用しており談話構造解析器は利用していない．考察において，談話構造解析器を用いた追加実験を行い，精度の変化について考察する．また，単語依存木はSuzukiらの提案した依存構造解析手法を用いて構築した．なお，本実験では，単語の重要度w_ijとして以下を用いた：tf_ijは文書における単語w_ijの単語頻度であり，depth(i)は，文書の文間依存木における文x_iの根からの深さである．また，制約()におけるは8とした．</subsection>
  <subsection title="結果と考察"/>
  <subsubsection title="ROUGEによる比較">表に，各手法によるROUGE-1,2値を示す．まず，short要約，long要約セット双方において，提案手法である任意部分木抽出と根付き部分木抽出の間にROUGE値の顕著な差はみられなかった．これについては節において，両手法が抽出した実際の部分木を例に定性的な考察を行う．以下では，任意部分木を提案手法とし，他の手法との比較を行う．また，表の下3行はUz^edaらによる比較実験の結果から一部の数値を引用している．ここで，Marcu_ours(0.432)とMarcuetal.(0.440)は，どちらもの手法による結果を示している．前者は我々による再実装の数値であり，後者はにおいて報告されていた数値である．数値が異なるのはトークナイゼーションなどの前処理の違いによるものであると考えられるが，Uz^edaらの文献に前処理の詳細がないため，完全な比較とはならないことに注意されたい．とはいえ，両者の数値に大きな差異はないことから，ほぼ同じ実験条件での数値であると判断した．まず，short要約セットのstopwordを除去した条件（最も左のカラム）において，提案手法の評価値はホルム法による多重比較の結果，他の全ての手法を有意に上回っていることを確認した．個別の手法と比較すると，文選択手法すなわち文圧縮を一切行わない手法と比較すると，提案手法が大幅に上回っている事がわかる．これは，文をそのまま抽出する場合は，今回の要約設定（平均圧縮率が約10%）では十分に情報を網羅できないことを示している．次に，EDU選択手法と比較しても提案手法が上回っている．EDU選択は文選択を有意に上回っていることから，文よりも細かいEDUを抽出粒度とすることで，要約文書の情報の網羅性を高めることができている．しかし，EDUという予め決められた長さのテキストスパンを抽出する手法よりも，部分木という可変長のテキストスパンを抽出できる提案手法の方がROUGE値は上回っており，その有効性がわかる．LEAD法は，報道記事の単一文書要約問題において非常に強力なベースラインである．これは，報道記事ではしばしば記事の冒頭でその記事全体の小さなまとめが書かれる傾向にあるためである．今回の実験では抽出単位の異なる二種類のLEAD法を用いたが，いずれも低い数値となった．これは要約対象となっている文書が，単純な報道記事ではなく，エッセイや社説によって構成されているためであり，冒頭に重要なまとめが記載されているわけではないことが原因である．一方，long要約セットでは，提案手法とEDU選択手法との間に顕著な差は見られなかった．これは，25%という圧縮率が比較的緩く，いずれの手法，抽出単位でもある程度の情報が網羅できるために大きな差が生まれなかったためである．ただし，文を抽出単位とした手法（文選択およびLEAD_snt）のROUGEスコアは低いことから，情報網羅性の向上のためには，文よりも小さいテキストスパンを抽出することが重要であるとわかる．以上の結果から，提案手法のような要約長に柔軟な要約手法は，short要約セットのように比較的圧縮率の高い設定において有効であることがわかる．</subsubsection>
  <subsubsection title="修辞構造の自動解析による精度の変化">表の実験結果は，人手で与えられたRSTに基づく修辞構造を用いていた．提案手法を任意の文書に適用する場合，文書の修辞構造を自動で解析する解析器が必須である．しかし，修辞構造の自動解析は難しいタスクの一つであり，人手で付与された談話構造を使用したときと比較して精度が劣化してしまうおそれがある．そこで本節では，既存の修辞構造解析器を用いて自動で解析した修辞構造を利用した場合の精度の変化を調べる．今回の実験では自動解析器として，サポートベクターマシンに基づく高い精度を持った解析器であるHILDAを用いた．表に実験結果を示す．_HILDAと付いている行が，自動解析に基づく依存木を使用した場合の結果である．結果から，いずれの手法も人手で作成された修辞構造を用いたものよりROUGE値が劣化していることがわかる．short要約セットの場合は，提案手法の方が劣化が大きい．これは，提案手法がEDU単位の依存構造を文単位に変更しているためである．HILDAを始めとする自動解析器は，ボトムアップに修辞構造木を組み上げていくため，それを用いて得た修辞構造木を談話依存構造へと変換すると，距離が近いEDU間の依存関係は比較的高い精度で予測できるが，遠い依存関係の予測精度は低い．このため，遠距離の依存関係である文間の依存関係の同定に失敗し，提案手法のROUGEが大きく劣化したと考える．実際，依存先の正解率~を計算すると，EDU単位で0.590，文単位で0.324となった．しかしながら，short要約セットにおいては，減少幅は大きいものの依然として提案手法の精度が，今回比較したどの手法の数値よりも高いことから，提案手法の有効性がわかる．long要約セットにおいては，EDU選択手法のROUGE値の減少はほとんど見られなかった．節で述べた通り，long要約セットは低い圧縮率であるため比較的多くの情報を要約に含めることができる．文単位の依存関係においても，正解率自体は低くとも選択できる文数が増えるため，short要約セットよりもROUGE値の劣化が抑えられている．すなわち，short要約セットのように圧縮率の厳しい設定では，より高い精度で抽出単位の依存先を推定する必要がある．</subsubsection>
  <subsubsection title="単一文書要約における重要箇所同定">前節で，提案手法の有効性をROUGE値によって確認した．本節では，談話構造，すなわち文間依存木の情報が文書中の重要箇所同定に有効かという点について考察を行う．現在，文書要約において主流な問題設定は，同じトピックについて書かれた文書の集合からひとつの要約文書を生成する，複数文書要約である．冒頭で説明した文抽出と文圧縮を組み合わせる手法も全て複数文書要約に取り組んでいるのに対して，今回我々が行った実験は，一つの文書に対し一つの要約文書を生成する単一文書要約問題である．単一文書要約は複数文書要約と比較して，要約文書に含めるべき文書の重要部分の同定が難しい．なぜならば複数文書要約では文書集合全体として重要な話題は文書横断的に出現するため，その性質を利用できるが，単一の文書においてそのような情報は利用できないためである．対象とする文書が報道記事である場合は，冒頭部分に記事全体の要約が書かれやすいという強力な基準があるが，そうでない場合に重要な部分を同定することは困難である．今回我々が用いた単一文書要約の評価セットは，報道記事ではなく社説やエッセイのような文書で構成されているため重要部分の同定が難しい．これは表におけるLEAD手法のROUGE値からも確認できる．文間依存木の情報が文書の重要箇所同定に与える影響について検証するため，提案手法（自動解析含む）の単語重要度からdepth^2を取り除いたもの，すなわち単語の重要度が単にその文書における出現頻度で決まる場合と，文間依存木の情報を一切用いない従来の同時モデルについても同様に実験を行い比較した．表に，それぞれの結果を示す．提案手法の単語重要度から文間依存木の情報（依存木の根からの深さ）を除いた場合に十分なROUGEスコアが得られないことから，文書の談話構造が単一文書要約における重要箇所の同定に寄与していることがわかる．なお，同時モデルと異なり，木構造の制約という形で文間依存木の情報は用いていることに注意されたい．同時モデルの結果を見ると，文抽出と文圧縮の同時最適化のみでは，本評価セットで有効に機能しないことがわかる．重要文の同定・抽出が困難であるならば，複数文書要約において盛んに取り組まれている文抽出と文圧縮の同時最適化を適用することも困難となり，要約長に柔軟な要約文書の生成も困難となる．本研究の結果は単一文書における重要部分の同定に対するひとつの手がかりとして，文書の談話構造が有効である可能性を示唆しているといえる．</subsubsection>
  <subsubsection title="異なる部分木抽出手法の定性評価">ここまで，ROUGEの観点から評価実験の結果についての考察を進めてきた．本節では，単語間依存木からその部分木を抽出する方法として，任意の部分木を抽出することの有用性を，例を示して考察する．図に，任意部分木抽出手法と根付き部分木抽出手法が共通して要約文書に含めた文と，そこから抽出した部分木に対応する二つの文を示す．なお，これはshort要約セットにおける例である．ここで，は依存構造解析器が単語間依存木の根であると出力した語であり，[]は要約システムが部分木の根として選んだ語である．任意部分木抽出においては，例に示したいずれの文も解析器の根以外の単語を根として部分木を抽出している．例に見るように，目的節やthat節の内容の方が重要な情報を持つことが多いため，その部分のみを抽出することは，限られた長さで重要な情報のみ要約に含める上で有用であり，今回の実験ではこうした事例が少なかったこともありROUGEスコアで大きな差がでなかったが，特に圧縮率の高い設定では有効であろう．</subsubsection>
  <subsubsection title="抽出粒度と要約文書の文数の関係">EDUはRSTにおける談話構造の基本単位であるが，抽出型要約の抽出単位として適切とは限らない．図に，ある文とその文を構成するEDUの例を示す．図のように，EDUはおおよそ節に対応する文よりも細かな単位である．抽出単位が文よりも細かいEDUであることは，EDU抽出は，文圧縮を逐次適用した要約手法として考えることができる．つまり，EDU抽出による要約は多くの文を事前に圧縮しつつ抽出していることに相当する．このように文よりも小さな断片を組み合わせて要約を生成すると，文を組み合わせる場合よりも長さ制約をちょうど満たすように要約を生成することができる可能性が高い．よって，ROUGE値も上昇する傾向にある．しかし，EDUは文よりも短いため，たとえ一貫性があろうともそれを読んだ読者が違和感を覚えてしまうだろう．抽出型要約において，文書中の多くの文から細かな断片を集めることで情報の断片化された要約の生成につながっているかどうかのは，要約文書に含まれる抽出単位集合の元となる文の数が，その一つの指標となる．言い換えると，生成された要約を構成する文の数が，参照要約すなわち人間によって生成された要約に近い方が，自然で読みやすい要約になっていると考えられる．そこで本節では各手法が生成した要約文書に含まれる原文書の文数を比較した．比較に用いた手法は提案手法である任意部分木抽出の他に，文選択とEDU選択である．文選択は原文書中の文の数，EDU選択は原文書中のEDUに対応する文の数，部分木選択は，部分木に対応する文の数である．なお，参照要約は人間が自由に生成した要約であるため，必ずしも原文書の文とは対応していないことに注意されたい．short要約セットにおいて各選択手法が選択した文について箱ひげ図を図に示す．各々の箱の上辺と下辺は，それぞれその手法が選択した文数の第一四分位点，第三四分位点を表しており，箱の中の線は中央値を表している．箱の上下に伸びる線（ひげ）の先は，それぞれ最大値，最小値を表し，ひげよりも外側に見られる+印は，外れ値である．図を見ると，EDU選択手法が最も多くの文を用いて要約を生成していることがわかる．一方で文選択手法は，比較手法の中では最も参照要約の文に近いが，節で示した通り情報の網羅性という点で十分な要約を作成できない．部分木抽出は文選択とEDU選択の間で，両者のように実際に抽出されるテキストスパンの長さを固定せずに要約システムが柔軟に各文から抽出する部分木を選択することができる．それにより情報の網羅性と要約としての自然さを両立出来ている．なお，部分木抽出手法の平均文数は4.73であり，中央値は4文であった．これに対し，EDU選択の平均文数は5.77で中央値は5文であった．これは提案手法の方が有意に少ない文を用いて要約を生成していることを示している．自動解析を利用した場合も同様の傾向であるため詳細は割愛する．同様に，long要約セットについて図に示す．圧縮率が低くなった場合も全体の傾向としてはshort要約セットとの大きな差異はない．全体的にばらつき（箱の縦の長さ）が大きくなっているが，これは参照要約自体の長さのばらつきがshort要約セットよりも大きいことが原因である．</subsubsection>
  <section title="まとめ">本研究では，単語間の依存構造解析に基づく単語間依存木と，RSTに基づく文間依存木から入れ子依存木を構築し，そこから要約文書に含める単語を選択する要約生成問題をILPとして定式化した．提案手法はEDUの依存木の刈り込み手法に比べ，過剰に文を区切ることなくROUGEを向上させることが確認できた．また，単語の依存木からその部分木を抽出する方法として，構文解析器が出力した根にこだわらない任意部分木抽出手法について，その有用性を定性的に分析した．さらに，人手で作成された修辞構造以外に，修辞構造解析器で推定された修辞構造も用いて，その精度への影響を確かめた．提案手法の抱える課題は，任意の文書に対して適用する際に修辞構造の自動解析を利用しており，その精度の与える影響が大きいという点である．今回はEDU単位の修辞構造解析結果を文単位の依存関係に変換して利用したが，はじめからEDU単位の依存関係を獲得する研究も存在する．これらを踏まえ，今後はより良い文間依存木の獲得方法を検討していく．今回はRSTから得られる情報のうち文間の依存関係のみに着目したが，各文内におけるEDU間の関係や修辞構造のラベルを考慮して文圧縮や文抽出を行うことが可能であり，今後取り組むべき課題として興味深い．今後は，他のコーパスの文書や，複数文書要約においても提案手法を適用することを考えている．document</section>
</root>
