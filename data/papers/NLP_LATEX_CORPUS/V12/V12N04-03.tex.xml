<?xml version="1.0" ?>
<root>
  <title>構造化された言語資料に対する全文検索システムの設計と実現</title>
  <author>山口昌也田中牧郎</author>
  <jabstract>本論文では，構造化された言語資料の検索・閲覧を指向した全文検索システムである『ひまわり』の設計，および，その実現方法を示す。ここで言う「構造化された言語資料」とは，コーパスや辞書のように，言語に関する調査，研究などに利用することを目的として，一定の構造で記述された資料一般を指す。『ひまわり』は，言語資料の構造化形式の多様性と利用目的の多様性に対応した設計がなされている。構造化形式の多様性については，言語資料がXMLで構造化されていることを想定して，XML文書に対する全文検索機能を実現した。全文検索に付け加えて，マークアップされている情報の抽出や抽出された情報に基づく検索結果の制約を行うことも可能である。また，SuffixArrayなどの索引を用いて，検索の高速化を図っている。一方，言語資料に適した検索式と閲覧形式を柔軟に定義できるようにすることにより，利用目的の多様性に対処した。閲覧形式は，KWIC表示機能を備えた表形式での閲覧を基本とし，ルビなどの通常のテキストでは表現できない表示形式や音声，画像に対しては，XSL変換などを介して外部閲覧システムにデータを受け渡す方法を用いる。多様性に対する『ひまわり』の有効性を検証するために，『分類語彙表』，および，『日本語話し言葉コーパス』に『ひまわり』を適用し，定性的な評価を行うとともに，検索速度測定による定量的な評価を行った。</jabstract>
  <jkeywords>全文検索，構造化言語資料，XML,KWIC,SuffixArray</jkeywords>
  <section title="はじめに">本論文では，構造化された言語資料の検索・閲覧を指向した全文検索システムである『ひまわり』の設計，および，その実現方法を示す。ここで言う「構造化された言語資料」とは，コーパスや辞書のように，言語に関する調査，研究などに利用することを目的として，一定の構造で記述された資料一般を指す。近年，さまざまな言語資料を計算機で利用できるようになってきた。例えば，新聞，雑誌，文学作品などのテキストデータベース(例：『毎日新聞テキストデータベース』mainichi)やコーパス(例：『京都大学テキストコーパス』kyodai_corpus，『太陽コーパス』tanaka2001)，シソーラスなどの辞書的なデータ(例：『分類語彙表』bunrui)がある。また，音声情報や画像情報などのテキスト以外の情報をも含有するコーパス(例：『日本語話し言葉コーパス』maekawa2004など)も現れている。言語資料には，書名や著者名などの書誌情報や，形態素情報，構文情報といった言語学的な情報が付与されており，言語に関する調査，研究における有力な基礎資料としての役割が期待されている。このような言語資料に対して検索を行うには，二つの「多様性」に対応する必要があると考える。一つは，構造化形式の多様性である。構造化された言語資料は，一般的に固有の形式を持つことが多い。したがって，検索システムは，検索の高速性を維持しつつ，多様な形式を解釈し，言語資料に付与されている書誌情報や，形態素情報や構文情報などの言語学的情報を抽出したり，検索条件として利用したりできる必要がある。もう一つの多様性は，利用目的の多様性である。ここで言う「利用目的の多様性」とは，検索対象の言語資料の種類や利用目的の違いにより，資料に適した検索条件や閲覧形式，さらには検索時に抽出する情報が異なってくることを指す。例えば，辞書を検索する場合は，見出し語や代表表記に対して検索を行い，単一の語の単位で情報を閲覧するのが一般的である。一方，新聞記事の場合は，記事本文やタイトルに含まれる文字列をキーとして，発行年などを制約条件としつつ検索し，前後文脈や記事全体を閲覧するのが一般的であろう。このように，言語資料を対象とした検索システムは，言語資料の性質と利用目的にあった検索式や閲覧形式を柔軟に定義できる必要がある。以上のような背景のもと，構造化された言語資料に対する全文検索システム『ひまわり』の設計と実現を行う。構造化形式の多様性に対しては，現在，広範に利用されているマークアップ言語であるXMLで記述された言語資料を検索対象と想定し，XML文書に対する全文検索機能を実現する。この際，検索対象とすることのできるXML文書の形式は，XML文書全体の構造で規定するのではなく，検索対象の文字列とそれに対して付与されている情報との文書構造上の関係により規定する。また，検索の高速化を図るため，SuffixArray方式など，いくつかの索引を利用する。次に，利用目的の多様性に関しては，検索式と閲覧方式を柔軟に設定できるよう設計する。まず，検索式を柔軟に設定するために，言語資料の検索にとって必要な要素を，検索対象の文字列とそれに対して付与されている情報との構造上の関係に基づいて選定する。一方，閲覧形式については，KWIC表示機能を備えた表形式での閲覧を基本とする。それに付け加えて，フォントサイズやフォント種，文字色などの表示スタイルの変更や音声，画像の閲覧に対応するために，外部の閲覧システムへデータを受け渡す方法を用いる。本論文の構成は，次のようになっている。まず，2節では，『ひまわり』を設計する上で前提となる条件を述べる。3節では，システムの全体的な構造と各部の説明を行う。4節では，言語資料の構造に対する検討を元にした検索方式について詳説する。5節では，『分類語彙表』と『日本語話し言葉コーパス』に本システムを適用し，言語資料と利用目的の多様性に対応できるか定性的に検証するとともに，検索速度の面から定量的な評価も行う。6節で関連研究と本研究とを比較することにより，本研究の位置づけと有用性を確認し，最後に，7節でまとめを行う。</section>
  <section title="前提条件">前節で述べたように，言語資料の構造上の多様性と，利用目的の多様性に対応したシステムを構築するという目的があるが，この目的に先立って，次の四つの前提条件を設けた。対象とする利用者本システムは，構造化された言語資料に関する知識を持たない利用者(エンドユーザ)を想定して設計する。この際問題となるのは，構造化された言語資料を検索，閲覧するには，まず，言語資料に付与されている情報の意味や，構造化の方法を理解しなければならないということである。この問題を解決するために，本システムでは，エンドユーザでも使用できるよう，検索対象の構造化テキストに適した検索式や閲覧形式をあらかじめ設定しておき，簡便な操作で検索できるようにする。実際に設定するのは，本システムを同梱して言語資料を配布する目的を持った利用者(言語資料の作成者)とする。これによりエンドユーザが直接利用できる検索式や閲覧は限定されるが，本システムでは，エンドユーザが容易に言語資料を使用できる，ということを優先して考える。利用形態本システムは，検索と閲覧を主体とした利用形態を想定する。別の言葉で言えば，言語資料を閲覧して，その場で，試行錯誤を伴う分析を行う利用形態である。言語研究における利用例としては，分析対象の語が，どの年代に多く出現するか，また，用法，出現する文脈はどのようなものかを把握するために，さまざまな条件で検索，閲覧を繰り返し，分析に生かすという利用形態が挙げられる。ただし，統計的な分析など，検索結果に対してさらなる分析を行う場合も考えられる。そのための手段として，検索結果を外部のソフトウェアへ受け渡す仕組みも用意する。任意の文字列に対する高速な全文検索言語資料を検索するということから，任意の文字列に対する全文検索は必須の条件とする。また，すでに述べたように，本システムでは検索と閲覧を繰り返す利用形態を想定している。そこで，利用者の思考を妨げないために，検索の高速性も重視する。動作環境本システムの動作環境としては，広範な計算機環境で，かつ，単独の計算機上で動作するものとする。「単独の計算機上」とは，検索用のサーバを用意することなく，利用者が使っている計算機上で検索できることを意味する。このような動作環境を前提とした理由は，作成した言語資料を配布する際に，本システムを同梱することを考えたからである。</section>
  <section title="システムの概要"/>
  <subsection title="構造">『ひまわり』のシステム構造を図に示す。図の上部が言語資料に関連するファイル群で，下部が『ひまわり』本体(ただし，点線の四角は外部システム)である。実線の矢印はデータの流れを，点線の矢印はデータの参照を表す。『ひまわり』はJava言語で記述され，WindowsXP,Windows2000,Windows98，DebianGNU/Linux3.0上で動作することが確認されている。『ひまわり』は，大きくわけて，次の三つの部分からなる。検索条件入力用インターフェイス検索エンジン検索結果閲覧部大まかな処理の流れとしては，まず，「検索条件入力用インターフェイス」により利用者が検索条件を指定し，その条件を元に「検索エンジン」が言語資料ファイルを検索する。そして，検索結果を「検索結果閲覧部」で表示する。『ひまわり』により，『太陽コーパス』を参照されたし。から文字列「研究」を検索した結果を図に示す。このあとの節では，言語資料について説明した後，システム各部の機能を図，と対応づけて説明していくことにする。</subsection>
  <subsection title="言語資料">図の上部に示したとおり，『ひまわり』は複数の言語資料ファイルを一つの言語資料集合として扱う。個々の言語資料には，検索を高速化するための索引ファイルが付与されている。言語資料ファイルの文字コードは，UTF-16である。1回の検索処理で検索対象となるのは，一つの言語資料集合であり，複数の言語資料をまとめて検索することができる。検索対象とする言語資料集合は，検索前に利用者が指定する。それぞれの言語資料集合は，「設定ファイル」を持つ。設定ファイルには，言語資料集合を構成する言語資料ファイルやその索引ファイルに関する記述のほか，(利用者が利用可能な)検索条件，検索結果として抽出する情報，閲覧時の表示スタイルの指定など，『ひまわり』を言語資料に適合させるための設定が定義されている。設定ファイルは，基本的に言語資料の作成者が定義することを想定している。</subsection>
  <subsection title="検索条件入力用インターフェイス">「検索条件入力用インターフェイス」は，利用者が指定した検索条件を「検索エンジン」に渡す役割を果たす。検索条件は，全文検索の対象とする文字列と検索結果の制約条件からなる。これらは，図(上部)のGUIを使って入力することができる。全文検索対象の文字列については，XML文書中のどの要素の文字列を検索するかをメニュー形式で指定することができる(図では，検索対象の文字列は，「本文」となっている)。制約条件は，図で表示されている，「年」，「号」，「題名」など検索された文字列に付随する情報に対する制約条件であり，検索結果を絞り込むために利用する。このように，検索条件の指定は言語資料自身に対する知識を必要としない方法を用いている。これは，節の「対象とする利用者」に示した前提条件を反映したものである。つまり，エンドユーザには言語資料自身に対する知識を必要としないインターフェイスを提供し，より詳細な検索条件の設定，例えば，XML文書中のどの部分を検索できるようにするのか，どの付随情報を検索結果に含めるのか，どのような制約条件を設定可能とするかは，言語資料作成者が設定ファイルに対して行うことを想定している。検索条件については，節で詳しく説明する。なお，検索文字列を入力する際は，検索もれを防止するために，「字体変換」機能yamaguchi2002を利用することができる。「字体変換」機能は，入力された検索文字列に対して，旧字，異体字など別字体の候補を提示する機能である。例えば，検索文字列を「国語」として字体変換を行うと，候補として「國語」を提示することができる。この機能は，『太陽コーパス』に収録されている総合雑誌『太陽』など，現代と異なる字体を含んだ言語資料の検索を想定して付加されている。</subsection>
  <subsection title="検索エンジン">「検索エンジン」は，「検索条件入力用インターフェイス」で入力された検索条件を元に，言語資料ファイルを検索し，「検索結果閲覧部」，もしくは，「外部閲覧システム」に検索結果を渡す役割を果たす。検索エンジンは，全文検索のほか，検索された文字列に付随する情報の抽出を行う。この際，高速化を図るため，索引ファイルを参照する。詳しくは，節を参照のこと。</subsection>
  <subsection title="検索結果閲覧部と外部閲覧システム">検索結果閲覧部では，検索結果をKWIC付きの表形式で表示する。図では，検索対象となった「研究」が「キー」欄に表示され，その両側に前後文脈が表示される。検索結果には，この他にも，検索された文字列に付随する情報として，「年」，「号」，「題名」，「著者」欄が含まれる。どの付随情報を検索結果として表示するかは，言語資料の作成者が『ひまわり』の設定ファイルにあらかじめ記述しておく。検索結果閲覧部は，検索結果の表示の他に，次の機能を持つ。検索結果に対する簡易な分析機能(ソート，検索結果の絞込みなど)検索結果の外部プログラムへの出力ここでは，検索結果の外部プログラムへの出力について詳しく説明する。簡易な分析機能については，yamaguchi2002を参照されたい。外部プログラムへ検索結果を出力する方法は，図に示したとおり，(a)テキストファイルへの出力，(b)クリップボードへの出力，(c)外部閲覧システムへの出力の三つある。まず，このうち，(a),(b)は，検索結果に対してさらなる分析を行うことを目的として，統計処理ソフトウェアや表計算ソフトウェアに検索結果を渡す手段を提供するものである。(a)は，検索結果をタブ区切りのテキスト形式でファイルに出力するもの，(b)は，検索結果閲覧部の表形式の閲覧画面から利用者が選択した範囲のデータをクリップボードに転送するものである。(b)で転送されるデータも，タブ区切りのテキストデータである。一方，(c)は言語資料の利用目的の多様性に対応するために，二つの方法で言語資料を外部閲覧システムに渡す。一つは，XML文書の一部をXSL変換を介して，外部閲覧システムに渡す方法である。主として，HTMLブラウザに出力することを想定する。表示形式は，CSS(CascadingStyleSheet)で指定する。XSL変換用のXSLTスタイルシートとCSSは，言語資料集合に付随する設定ファイルの中で指定する。HTMLブラウザを用いているので，言語資料ファイル外の画像を表示できるほか，縦書きやルビの表示，フォントサイズ，フォントの種類，文字色の変更など，言語資料に合わせてさまざまな表現形式を用いることができる。図中のHTMLブラウザは，この機能の利用例である。この例では，検索結果の文字列を含む(雑誌『太陽』の)「記事」要素全体を表示している。表示する際には，CSSの適用により，タイトルのフォントを大きくしたり，著者名を右寄せで表示するなどしている。言語資料を外部閲覧システムに渡す，もう一つの方法は，検索結果の特定の行，列を引数として，外部プログラムを実行する方法である。この機能を利用することにより，音声，画像ファイルなど言語資料外にあるデータ(図中央下)を参照することが可能である。実際に，『太陽コーパス』への適用においては，検索結果の「著者」欄の値を引数として，著者データベースを検索し，その情報を閲覧することができるようになっている。</subsection>
  <section title="検索方式">本節では，図に示した「検索エンジン」で用いる検索方式について詳しく説明する。</section>
  <subsection title="検索処理の流れ">『ひまわり』は，全文検索システムであり，検索処理の基本は，XMLで構造化された言語資料から指定された文字列を検索することである。これに付け加えて，言語資料に対してマークアップされたさまざまな情報を抽出するとともに，抽出された情報に対して制約を適用し，検索結果を絞り込む。検索処理の大まかな流れは，次のとおりである。指定された要素中の文字列(以後，「検索対象文字列」と表記)を全文検索検索された文字列(以後，「検索結果文字列」と表記)に付随する情報(以後，「付随情報」と表記)を抽出抽出された付随情報に対して，指定された制約条件を適用し，検索結果を制約上記の処理の流れを説明するために，次のようなXML文書を検索することを考える。検索対象文字列は「記事」要素中の「普及」，制約条件は「記事」要素の「著者」属性が「山田太郎」であるものとする。このとき，まず，「記事」要素に対して，全文検索を実行する。検索対象文字列の「普及」が検索されたら，その「記事」要素の「著者」属性値を取得し，制約値である「山田太郎」と一致するかチェックする。上記のXML文書の1行目は，制約値と一致し，検索結果として返される。一方，2行目は，「著者」属性値が「佐藤一朗」なので，検索結果から排除される。なお，検索結果には，検索結果文字列の他に，付随情報である「著者」属性値も含まれる。以上が，検索処理の基本的な流れであるが，『ひまわり』では検索処理を高速化するために，3種類の索引を用いている。そのうちの二つは，要素内容，および，要素属性に対する索引である。これらは，全文検索のための索引として用いられる。索引づけの方法は，SuffixArray方式に基づくものであり，検索手法は二分木検索を利用する。もう一つの索引は，要素に対する索引で，付随情報の参照のために使用される。索引として用いるのは，要素の開始・終了位置である。検索手法としては，検索文字列の位置情報をキーとして二分木検索を行う。索引については，この後の節で詳しく述べる。</subsection>
  <subsection title="言語資料の検索に必要な付随情報の参照に対する考察">前節で示したように，本システムは，全文検索により検索結果文字列を得るだけでなく，その付随情報を二次的に参照する。付随情報は，検索結果の一部であり，検索結果を制約するためにも用いられる。したがって，付随情報を参照する能力が検索式の記述力を左右するとともに，本システムで扱うことのできる文書構造を規定することを意味する。そこで，本節では，まず，言語資料の検索において，どのような付随情報を参照することが必要なのかを考察する。ここでは，図のように，XML文書を木構造で表現し，その上で議論することにする。木構造の中で，各ノードがXML文書における要素を表し，ノードの文字は要素名を表す。下位ノードは，上位ノードを構成する要素とする。最上位ノード(root)はXML文書全体を表す。検索結果文字列は，strとする。要素Tは，全文検索を行った時に検索対象とした要素である。なお，『ひまわり』では，要素属性を検索対象文字列とすることもありうるが，その場合は，この後の節で示すように，要素属性を当該要素の要素内容全体として処理するので，図のstrと同様に考えて差し支えない。本論文では，この木構造の中で，検索結果文字列strを起点として，上位階層要素，兄弟要素，前後要素の三つに着目する。この後の節では，この三つの要素それぞれについて，言語資料における構造化との関連を示して，その必要性を明確にする。</subsection>
  <subsubsection title="上位階層要素/属性値">上位階層要素は，検索結果文字列strを要素内容として持つ要素である。図では，長方形で囲われた要素T,C,A,rootがstrに対する上位階層要素に相当する。上位階層要素のタグは，strに対する直接的な付与情報なので，上位階層要素/属性値の参照は必須である。言語資料における具体的な要素例としては，ルビや品詞のように文字や語に付与されるものから，記事，章，節というように文章の論理構造に付与されるものまでさまざまなものが考えられる。これらの例から明らかなとおり，strの親要素だけでなく，任意の階層の上位要素を参照する必要がある。上位階層要素の例を次に示す。これは，文字列「五月雨の季節」を「記事」，「形態素」，ruby(ルビ)要素で記述したものである。&lt;記事著者=&quot;山田太郎&quot;タイトル=&quot;さみだれ&quot;&gt;&lt;形態素品詞=&quot;名詞&quot;&gt;&lt;rubyvalue=&quot;さみだれ&quot;&gt;五月雨&lt;/ruby&gt;&lt;/形態素&gt;&lt;形態素品詞=&quot;助詞&quot;&gt;の&lt;/形態素&gt;&lt;形態素品詞=&quot;名詞&quot;&gt;季節&lt;/形態素&gt;&lt;/記事&gt;verbatim例えば，検索結果文字列「五月雨」に対する記事情報を得ようとする場合，上位階層要素である「記事」要素を参照として，「著者」属性と「タイトル」属性を得ることになる。同様に，「五月雨」に対するルビや品詞情報を得る場合は，それぞれruby要素，「形態素」要素を参照する。以上の例を見ればわかるとおり，上位階層要素の参照は，要素自体というよりも，要素属性値を参照することが多い。要素自体を参照するのは，検索結果文字列をより広い範囲で参照する場合である。その例として挙げられるのは，上のXML文書に対して，「季節」を全文検索して，そこから記事全体を外部閲覧システム(図参照)で閲覧する場合である。</subsubsection>
  <subsubsection title="兄弟要素/属性値">ここで言う兄弟要素とは，検索文字列strの親要素に対して兄弟関係にある要素のことを指す。図の検索結果文字列strに対しては，G,H要素が兄弟要素に相当する。同一の親を持つ要素の参照は，辞書の項目のように，一つの項目を複数の要素で記述したデータを参照するのに必要となる。次の例は，「辞書項目」要素を「見出し」，「表記」，「品詞」，「語義説明」要素で表現したものである(語義説明は，三省堂『大辞林』第2版の見出し「さみだれ」から引用)。&lt;辞書項目&gt;&lt;見出し&gt;さみだれ&lt;/見出し&gt;&lt;表記&gt;五月雨&lt;/表記&gt;&lt;品詞&gt;名詞&lt;/品詞&gt;&lt;語義説明&gt;〔「さ」はさつき，「みだれ」は水垂(みだれ)の意という〕(1)陰暦五月頃に降り続く雨。つゆ。梅雨(ばいう)。長雨(ながめ)。うのはなくたし。［季］夏。《—をあつめて早し最上川/芭蕉》(2)継続しないで，少しずつ繰り返すことのたとえ。「—スト」&lt;/語義説明&gt;&lt;/辞書項目&gt;verbatimこのXML文書の「見出し」要素を検索した時，辞書の検索結果としては，見出しを検索結果として示すだけでなく，その表記や品詞などの付随情報を同時に示すのが一般的だろう。このような付随情報を参照するためには，「見出し」要素に対する兄弟要素である「表記」，「品詞」，「語義説明」要素を参照できなければならない。</subsubsection>
  <subsubsection title="前後要素/属性値">前後要素とは，検索文字列の親要素と同一の要素名を持つ要素で，前出，後出する要素のことを指す。図の検索結果文字列strに対しては，要素Eの兄弟要素のT要素と，要素Iの兄弟要素の二つのT要素が前後要素に相当する。兄弟要素と違って，共通する親要素を持つ必要はない。前後要素は，連続した要素の関係を考慮して検索を行う場合に必要になる。その例として，特定の形態素列を検索する状況が挙げられる。次の例は，文字列「今日のテーマは」に対して，「形態素」タグを付与したものである。&lt;形態素品詞=&quot;名詞&quot;&gt;今日&lt;/形態素&gt;&lt;形態素品詞=&quot;助詞&quot;&gt;の&lt;/形態素&gt;&lt;形態素品詞=&quot;名詞&quot;&gt;テーマ&lt;/形態素&gt;&lt;形態素品詞=&quot;助詞&quot;&gt;は&lt;/形態素&gt;verbatimこのような形態素列に対して，「今日」に後続する形態素を参照することを考えると，「形態素」要素である「今日」に後続する「形態素」要素を参照することになる。これ以外にも，名詞，助詞，名詞といった特定の品詞列を検索する場合もあるだろう。この場合，検索対象文字列を「名詞」として，「形態素」要素の品詞属性に対して全文検索を行い，その後続する二つの「形態素」要素の属性値を参照することが必要になる。</subsubsection>
  <subsubsection title="参照可能な付随情報">以上のことから，本システムにおいて参照することのできる付随情報を次のように定める。これらは，『ひまわり』が検索対象とすることのできるXML文書の構造を規定する。strを包含する任意の要素，および，その属性値。なお，当該要素が入れ子構造になる場合は，直近の要素を優先して参照するものとする。strの親要素の兄弟要素，および，その属性値。なお，参照する際は，同一の要素が複数存在する場合を考慮して，参照方向(親要素の前後)を指定するものとする。strの親要素と同一の要素名を持つ前後n番目の要素，および，その属性値(nは任意の整数)</subsubsection>
  <subsection title="検索対象文字列の全文検索">この節では，検索対象文字列の全文検索について説明する。この処理は，節で示した検索処理の流れのうち，(1)に相当する。</subsection>
  <subsubsection title="Suffix Array に基づく全文検索">検索対象文字列の検索対象としては，要素内容と要素属性があるが，いずれに対する検索も，SuffixArray方式の索引を用いた二分木検索を行うyamasita2000。SuffixArrayを索引として用いた検索では，検索対象文字列をキーとし，結果として検索結果文字列の先頭の位置を取得することができる。索引づけは，検索対象のn個の文字すべてに対して行う。つまり，要素内容の場合は，要素内容中のタグを除くすべての文字データであり，要素属性の場合は，すべての要素属性値である。索引の量は，文字データ数nに比例する。検索の時間計算量は，索引を二分木検索するので，O(n)となる。検索対象文字列は，正規表現クラスに依存する。詳細は，://java.sun.com/j2se/1.4/ja/docs/ja/api/java/util/regex/Pattern.htmlを参照のこと。で記述する。全文検索を実行する際には，検索対象の要素，もしくは，要素属性を特定しておく。ただし，正規表現の指定には制限があり，検索文字列の中に，1文字以上のリテラルを含んでいる必要がある」は1文字のリテラル「国」を含むので，検索文字列として指定できるが，任意の2文字の文字列を表現する「..」は，いずれもリテラルではないので，検索文字列としては指定できない。。SuffixArray自体については，yamasita2000を参照のこととし，この後の，節では，要素内容，要素属性ごとに，文字列の照合方法を説明することにする。</subsubsection>
  <subsubsection title="文字列の照合(要素内容の場合)">要素内容に対する全文検索における文字列の照合は，要素内容中のタグを除いた文字データと検索対象文字列とを照合する。照合する方法には，検索対象の要素の範囲を限定しないで照合する方法と，要素の範囲内で照合する方法の二つがあり，適宜使い分けることができる。なお，照合する際には，否定条件での照合も可能である。要素の範囲に限定しない方法形態素に対するマークアップを行った場合，各要素内容の文字列は，連続的に解釈される。要素の範囲に限定しない照合方法は，こういった連続的に解釈可能な要素を全文検索する時に用いる。次のXML文書は，「文」，「形態素」の二つの要素で構造化を行ったXML文書である。&lt;文&gt;&lt;形態素&gt;東京&lt;/形態素&gt;&lt;形態素&gt;タワー&lt;/形態素&gt;&lt;形態素&gt;へ&lt;/形態素&gt;&lt;形態素&gt;行く&lt;/形態素&gt;&lt;/文&gt;&lt;文&gt;&lt;形態素&gt;時々&lt;/形態素&gt;&lt;形態素&gt;雨&lt;/形態素&gt;&lt;形態素&gt;が&lt;/形態素&gt;&lt;/文&gt;verbatimこのXML文書の「形態素」要素に対して，「東京タワー」を検索した場合，「文」，「形態素」タグは無視されて，照合は成功する。ただし，場合によっては，過度な照合が行われてしまう場合がある。過度な照合を防ぐための手段として，照合する範囲を限定する要素を設定することができる。例えば，上のXML文書に対して，「行く時」を全文検索すると，照合が成功してしまうが，「文」要素を範囲限定のための要素とすれば，照合するのを防ぐことができる。以上は，リテラルだけからなる有限長の検索対象文字列の照合であるが，正規表現で検索対象文字列を指定した場合，検索対象文字列が無限長の文字列となる可能性がある。『ひまわり』では，照合対象となる文字列の最大文字列長を制限した上で照合を行う。具体的には，正規表現中のリテラル部分(利用者が検索対象文字列入力時に指定する)の前後文字列長を制限している。この最大前後文字列長は，利用者が設定することができる。例えば，最大前後文字列長が5文字のとき，正規表現「+東京.*+」「東京」に0文字以上の任意の文字が後続する文字列に対しては，「東京」の前後5文字が照合の範囲となり，文字列「東京タワーへ行」との照合が成功することになる。要素の範囲を限定する方法形態素列の照合と異なり，各要素の要素内容に連続性のない言語資料もある。その代表的な例は，辞書である。もう一度，「さみだれ」の辞書項目を元に説明する。&lt;辞書項目&gt;&lt;見出し&gt;さみだれ&lt;/見出し&gt;&lt;表記&gt;五月雨&lt;/表記&gt;&lt;品詞&gt;名詞&lt;/品詞&gt;&lt;/辞書項目&gt;verbatimこのXML文書において，「見出し」要素と「表記」要素の要素内容に連続性はない。そこで，要素範囲を限定した照合では，検索対象文字列と指定された要素の要素内容全体とを照合する。「見出し」要素に対して全文検索を行った場合，要素内容である「さみだれ」と検索対象文字列とを照合する。なお，部分文字列と照合させる場合は，「+さみ.*+」などのように，正規表現を用いる。</subsubsection>
  <subsubsection title="文字列の照合(要素属性の場合)">要素属性に対する全文検索における文字列の照合は，要素内容の照合における「要素の範囲を限定する方法」と同様に，属性値全体で照合を行う。検索対象文字列の指定も，リテラルを1文字以上含むという，制限付きの正規表現である。全文検索の結果としては，要素属性値の他に，当該要素の要素内容も含まれるものとする。付随情報の参照は，この要素内容を起点に行われる。</subsubsection>
  <subsection title="付随情報の参照と制約">この節では，付随情報の参照と，検索条件における付随情報の制約について説明する。これらの処理は，節で示した検索処理の流れのうち，(2),(3)に相当する。</subsection>
  <subsubsection title="付随情報の参照">付随情報の参照には，全文検索の場合と同様，索引を用いる。節で示したいずれの付随情報についても，「要素に対する索引」を使用する。要素に対する索引とは，参照対象となる要素の開始位置と終了位置の組を開始位置でソートしたものである。参照する際には，検索結果文字列の位置をキーとし，結果として当該要素の開始位置と終了位置を得る。索引の量は，要素数をnとすると，2nである。検索処理の時間計算量は，二分木検索を使用するので，O(n)である。次に，各付随情報ごとに，参照方法を示す。上位階層要素，および，その属性値索引づけは，全文検索時に検索対象とした要素(以後，「検索対象要素」と表記)を含む上位階層要素のうち，参照が必要になる要素に対して行う。図では，root,A,C,T要素が相当する。当該要素の参照には，検索結果文字列の位置をキーとして，参照する要素の範囲(開始・終了位置)を検索し，その結果から要素を参照する。一方，属性値の参照には，検索された範囲の開始位置から，検索対象の属性を線形検索する。以後，兄弟要素，前後要素ともに，その属性値を得るときは，同様の方法を用いる。兄弟要素，および，その属性値兄弟要素の参照に必要な索引づけは，検索対象要素に対して行う。図では，T要素が相当する。兄弟要素の参照には，検索結果文字列の位置をキーとして，検索対象要素の範囲を取得する。そして，その前後の要素を線形検索することにより，兄弟要素を参照する。前後要素，および，その属性値前後要素の参照に必要な索引づけも，検索対象要素に対して行う。前後要素を参照するには，まず，検索結果文字列の位置をキーとして，検索対象要素の索引を検索する。すでに述べたように，索引は要素の開始位置をキーとして，昇順にソートされている。検索対象要素に対して，n番目(nが負値の場合，前の要素を表すこととする)の要素を参照するには，検索された索引に対して，n番目の索引を検索すればよい。</subsubsection>
  <subsubsection title="付随情報の制約">抽出された付随情報は，検索結果を制約する条件として利用できる。付随情報に対する制約条件は，正規表現で記述する。この際，否定条件を指定することもできる。文字列の照合は，全文検索の場合と同様，タグを排除した後に行う。</subsubsection>
  <section title="評価">本節では，言語資料の構造化形式と利用目的の多様性に対する『ひまわり』の有効性を検証するために，実際の言語資料である『分類語彙表』と『日本語話し言葉コーパス』に『ひまわり』を適用し，定性的に評価する。さらに，4種類の言語資料に対する検索速度を測定することにより，『ひまわり』を定量的に評価する。</section>
  <subsection title="言語資料への適用"/>
  <subsubsection title="『分類語彙表』">まず，日本語のシソーラスである『分類語彙表(増補改訂版)』bunruiに本システムを適用する。図の左が『分類語彙表』の元のデータ(分類番号1.5010「体の類/自然/自然/光」の一部とその上位階層の分類項目)で，右がXMLで構造化した結果である。bunrui_goi_hyo,c,s,l,e要素は，それぞれ『分類語彙表』全体，分類項目，項目内の段落番号，項目内の小段落番号，表記を表す要素である。e要素には，表記に対する「見出し」属性を，c要素には「分類番号」，「概念パス」属性(当該の分類項目に至るまでの分類項目の並び)を付けている。図のXML文書を検索対象とするために，『ひまわり』の検索対象文字列，付随情報，および，閲覧形式を次のように設定した。図は，「光」を表記に含む語を検索した結果である。「表記」欄が，検索結果文字列で，その左右に同一分類項目の語が列挙される。この三つの欄の他に，検索対象文字列として設定した「見出し」欄，付随情報として設定した「概念パス」や「分類番号」欄などが表示される。『ひまわり』のウィンドウに重ねて表示されているのは，外部閲覧システムのHTMLブラウザであり，検索結果文字列をダブルクリックすると起動される。この例では，検索結果文字列「微光」を含む分類項目全体を表示している。検索結果文字列は，利用者が発見しやすいように，赤色で表示される。HTMLブラウザには，検索対象文字列を含むc要素が渡され，図に示したようにXSL変換とCSSファイルが適用された後にその結果が表示される。このように，『ひまわり』は，(1)『分類語彙表』の見出し，および，表記を対象に全文検索できる，(2)書籍版とほぼ同等の形式で閲覧することができることを示した。これにより，『ひまわり』は『分類語彙表』を検索・閲覧するシステムとして適応していると考えられる。</subsubsection>
  <subsubsection title="『日本語話し言葉コーパス』">次に，『日本語話し言葉コーパス』に対して，『ひまわり』を適用する。『日本語話し言葉コーパス』は，学会講演などの独話を主体としたコーパスである。音声データの他に，音声データの転記テキストに形態論情報，分節音などの言語情報が付与されたXML形式のデータが提供される。詳しくは，maekawa2004を参照されたい。ここでは，コーパス全データのうち，人手で形態論情報を付与された転記テキスト(396講演，約102万短単位)を適用対象とする。図(上)が，転記テキストである。転記テキストは，200[ms]以上のポーズ位置で「転記基本単位」に分割される。転記基本単位の始まりは，数字で始まる行で表される。左から，転記基本単位の通し番号，開始時刻，終了時刻，話者ID(LまたはR)を意味する。発話の転記には，漢字仮名混じりで表記された基本形と，発音を可能な限り正確にカタカナで表記した発音形がある。下の転記テキストでは，+&amp;+の左右がそれぞれ基本形，発音形が併記されている。また，各転記基本単位内は，文節単位で改行されている。図(上)の転記テキストに形態論情報を付与し，XML形式で表現したのが，図(下)の「XML文書への変換結果」である。今回は，全転記テキストを一つの言語資料ファイルにまとめて検索することとした。kdb,su,p,t要素は，それぞれ，一つの転記テキスト全体，形態論情報(短単位)，文節の区切り，転記基本単位の区切りを表す。図のXML文書を検索対象とするために，『ひまわり』の検索対象文字列，付随情報，および，閲覧形式を次のように設定した。図は，su要素内容中の文字列「について」を検索した結果である。検索結果には，検索結果文字列のほか，付随情報として，検索結果文字列の品詞，後続する2短単位(「基本形1，2」欄)とその品詞(「品詞1，2」欄)，講演IDなどが含まれる。検索結果文字列の「について」は，短単位で「に/つい/て」のように分割されるが，文字列の照合は，「要素範囲の限定なし」で行っているので，「について」全体が検索結果文字列となる。「品詞」欄には，検索結果文字列の先頭の文字列「に」の品詞である「助詞」が入っている。短単位での分割位置がわかっている場合は，文字列の照合をsu要素の範囲に限定して行えば，より厳密な検索ができる。このように，短単位の知識がなくても検索することが可能であると同時に，より詳細な制約を与えて，検索結果を絞り込むこともできる。図右下のHTMLブラウザの画面は，講演全体を表示したものである。短単位の区切りは，`/'で表記している。また，短単位にカーソルを合わせると，当該短単位の品詞などの情報が図のように表示されるようになっている。図右上のウィンドウは，音声再生用の外部プログラムであり，言語資料外のデータを参照する例として示した。再生時には，付随情報である講演ID，開始時刻，終了時刻を外部プログラムに渡し，当該の部分の音声を再生できるようにしている。以上で示したように，『ひまわり』は，『日本語話し言葉コーパス』の言語資料の構造化形式に適応して，形態論情報を検索に有効に利用することが可能である。さらに，音声データの参照，および，転記テキスト単位での形態素列の閲覧など，言語資料に適した閲覧を実現している。</subsubsection>
  <subsection title="検索速度の測定">『ひまわり』の検索時間を測定し，定量的に評価する。検索の対象は，表に示した，『太陽コーパス』，『毎日新聞テキストデータベース』(2002年，1年分)，『分類語彙表』，CSJ(『日本語話し言葉コーパス』)の四つの言語資料である。検索対象の文字列は，『分類語彙表』が長さ2文字，それ以外の言語資料は長さ4文字の文字列をそれぞれの資料から100個ランダムに抽出し，表の検索対象要素に対して全文検索を行った。検索結果に含まれる付随情報は，『分類語彙表』と『日本語話し言葉コーパス』(CSJ)は，前節で示した付随情報を，『太陽コーパス』と毎日新聞に対しては，書誌情報にあたる情報を付随情報として抽出した。測定に使用した計算機は，CPUPentium42.5GHz,メモリ1GB，OSLinux2.4.26(Debian/GNULinuxver.3.0r2)，JRE(JavaRuntimeEnvironment)ver.1.4.2_04である。測定結果として，表に，平均検索時間，ファイルサイズ，総文字数，平均検索結果数を示す。ファイルサイズとは，言語資料ファイルのサイズ(タグを含む。encodingはUTF-16)であり，総文字数とは，検索対象要素中の文字データの総数(索引づけされた文字データ数でもある)である。この結果を見ればわかるとおり，307.2〜1114[ms]で検索されており，実用的な速度で検索できることが確認できた。このうち，最も検索時間がかかったのがCSJである。CSJの平均検索結果数を見ると，『太陽コーパス』と同程度であり，総文字数は『太陽コーパス』の約1/7であるにもかかわらず，検索時間は約3.6倍である。この原因は，形態論的情報に関連する付与情報が多く，全文検索時の文字列の照合に時間がかかるためだと考えられる。CSJの付与情報が『太陽コーパス』と比べて多いことは，CSJのファイルサイズが『太陽コーパス』の約4倍であることを見ればわかる。</subsection>
  <section title="関連研究との比較">言語資料の検索を目的としたシステムは，コンコーダンサをはじめとして多くのシステムが提案されている。ここでは，言語資料の構造化形式と利用目的の二つの多様性の面から，『ひまわり』と既存システムとの比較を行う。言語資料の構造化形式の多様性へのアプローチとしては，(1)検索システムの汎用性を高める方法，(2)言語資料の形式を統一する方法，(3)タグを含めてテキストとして扱う方法，(4)多様性には対応せず，特定の言語資料に特化する方法，といったアプローチがある。従来のコンコーダンサは，(3)と(4)のアプローチが多い。例えば，(4)のアプローチの例としては，BritishNationalCorpusに付属するSARABNCが挙げられる。(3)の例としては，WordSmithやTeaなどがある。このうち，(3)は非常に広範な資料を検索対象とすることができるが，検索対象文字列ですべての検索条件を記述する必要があるため，利用者に言語資料の構造化に関する知識が必要となる。さらに，マークアップされている情報を検索条件として利用することや，それを検索結果として抽出することが困難である。(2)の例としては，電子出版用の共通フォーマットであるEPWINGに対応したソフトウェア群が挙げられる。EPWINGは，辞書検索をはじめとして広く利用されている。この方法は，類似した構造を持った言語資料を統一する場合には有効であるが，構造が大きく違う場合は，一つの形式に統一するのが困難である。(1)の手法を取るシステムとしては，XMLデータベースや関係データベースを利用した方法が提案されている(例：『茶器』matumoto2004)。これらに対して，本システムは，構造化の形式をXML文書と定め，XML文書に対する，索引つきの全文検索を実現している。検索対象のXML文書は，言語資料の検索にとって必要な付随情報と検索結果文字列とのXML文書構造上の関係を規定される。これにより，タグセットを限定したり，言語資料全体の構造を規定することなく，言語資料の多様性に対応することを可能にしている。さらに，構造化形式の多様性に対応しつつ，付随情報の抽出や付随情報による検索結果の制約も可能である。次に，利用目的の多様性への対応方法の面から比較する。まず，検索式の記述能力の面について考える。『ひまわり』は，エンドユーザと言語資料の作成者をユーザとして想定し，検索式の記述能力を維持しながら，言語資料に対する知識を持たないエンドユーザでも検索を行えるようにしている。ただし，検索式の記述能力自体は，XMLデータベースや関係データベースが優れている。例えば，XML文書の一部を参照する規格であるXPathは，節で示した要素をすべて参照することができる。しかし，現在のところ，導入コストの高さや導入・運用のための技術が必要とされることを考慮すると，コーパスに同梱して，エンドユーザに配布するという前提条件にはそぐわない。一方，閲覧形式の点では，KWIC形式で結果を表示する手法が多くのシステムで採用されている。しかし，資料に付随する情報は，閲覧時に十分考慮されていない。それに対して，本システムでは，KWICを含んだ表形式での表示が基本となっており，KWICとともに付随情報を利用してさまざまな分析が可能になる(例：用例を年代順に並べる。同一著者の用例をまとめるなど)。また，テキストとして表示できない音声や画像などのデータを参照する手段も備えている。</section>
  <section title="おわりに">本論文では，構造化された言語資料に対する全文検索システム『ひまわり』の設計と実現について述べた。『ひまわり』の特徴は，言語資料の構造化形式と利用目的の多様性に対応するように設計したところにある。構造化形式の多様性については，構造化の形式をXMLとし，その上で，索引つきの全文検索機能を実現した。この際，検索対象とすることのできるXML文書の形式を，XML文書全体の構造で規定するのではなく，検索対象の文字列とそれに対して付与されている情報との文書構造上の関係により規定した。これにより，幅広い構造化形式への適用を可能にした。また，利用目的の多様性に対しては，柔軟な検索条件と閲覧形式を利用者が定義可能とすることにより実現した。この際，エンドユーザと言語資料の作成者を想定し，言語資料の作成者が言語資料に適した検索条件と閲覧形式を定義することにより，言語資料に関する知識を持たないエンドユーザでも検索システムを利用できるようにした。『ひまわり』に対する評価は，二つの方法で行った。まず，『分類語彙表』，『日本語話し言葉コーパス』に『ひまわり』を適用し，言語資料の多様性へ対応できることを示した。さらに，四つの言語資料において，『ひまわり』の平均検索速度を計測し，実用的な速度で検索結果を得られることを確認した。なお，『ひまわり』は，独立行政法人国立国語研究所のWebページにおいて，一般に公開している。document</section>
</root>
