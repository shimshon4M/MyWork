<?xml version="1.0" ?>
<root>
  <title>大規模日本語文法の開発</title>
  <author>野呂智哉橋本泰一徳永健伸田中穂積</author>
  <jabstract>構文解析において，多様な言語現象を扱うためには大規模な文法が必要となるが，一般に人手で文法を開発することは困難である．一方，大規模な構文構造付きコーパスから様々な統計情報を取り出し，自然言語処理に利用する研究が多くの成果をあげてきており，構文構造付きコーパスの整備が進んでいる．このコーパスから大規模な文脈自由文法(CFG，以下，文法と略す)を抽出することが考えられる．ところが，コーパスから抽出した文法をそのまま用いた構文解析では多数の解析結果(曖昧性)を作り出すことが避けられないことが問題であり，それが解析精度の悪化や解析時間，使用メモリ量の増大の要因ともなる．効率的な構文解析を行うためには，曖昧性を増大させる要因を分析し，構文解析の段階では曖昧性を極力抑えるよう文法やコーパスを変更する必要がある．本論文では，構文解析で出力される曖昧性を極力抑えた文法を開発するための具体的な方針を提案し，その有効性を実験により明らかにしている．</jabstract>
  <jkeywords>大規模日本語文法，構文構造付きコーパス，構文解析</jkeywords>
  <section title="はじめに">近年，情報化が進むにつれて，大量の電子テキストが流通するようになった．これを有効活用するために，情報検索や情報抽出，機械翻訳など，計算機で自然言語を処理する技術の重要性が増している．この自然言語処理技術は様々な知識を必要とするが，その中で構文解析の際に最もよく用いられるものは文脈自由文法(CFG，以下，文法と略す)である．ところが，人手で作成した大規模な文法は，作成者の想定する言語現象にどうしても``もれ''があるため，網羅性に欠けるという問題がある．一方，最近では，コーパスから抽出した統計情報を用いて自然言語を解析するコーパスベースの研究が成果をあげており，それに伴い，(電子)コーパスの整備が進んでいる．このコーパスから文法を自動的に抽出する研究もあり，文法作成者に大きな負担をかけることなく，コーパス内に出現する多様な言語現象を扱える大規模な文法を作成することが可能である．しかし，コーパスから抽出した文法には問題がある．それは，コーパスから抽出した文法で構文解析を行うと，一般に，膨大な量の構文解析結果(曖昧性)が出力されることである．その要因については後述するが，これが，解析精度の低下や解析時間，使用メモリ量の増大の要因となる．コーパスから抽出した大規模文法がこれまで実用に供されなかった最大の理由はここにある．コーパスには意味を考慮した構文構造が付与されていることが普通であり，そのコーパスから抽出した文法で構文解析を行うと，意味解釈に応じた異なる構文解析結果が多数生成される．しかし，意味情報を用いない構文解析の段階では，意味的に妥当な少数の構文構造に絞り込めず，可能な構文構造を全て列挙せざるを得ない．我々は，構文解析結果(構文木)に沿って意味解析を進める構文主導意味解析(SyntaxDirectedSemanticAnalysis,SDSA)を想定し，構文解析の段階で生じる曖昧性を極力抑え，次の意味解析の段階で意味的に妥当な意味構造を抽出するという2段階の解析手法を採用する(図)．0本論文では，構文解析の段階の曖昧性を極力抑え，その後の意味解析の段階にも有効な構文構造を生成する大規模日本語文法について検討する．0そこで，我々は，既存の構文構造付きコーパスを出発点とし，以下の手順で文法を作成することを試みている(図)．既存の構文構造付きコーパスから文法を抽出する構文解析結果の曖昧性を増大させる要因を分析する分析結果をもとに構文構造付きコーパスの変更方針を作成する変更方針に従ってコーパスを変更し，そこから新しい文法を再抽出する(2)〜(4)を繰り返すただし，文法の抽出は，Charniakによる``tree-bankgrammar''の抽出方法と同様の方法をとる．上述の文法作成手順では，構文構造付きコーパスの変更に重点が置かれ，文法の作成，変更というより，むしろコーパスの作成，変更のように思われるかもしれない．しかし，実際の変更過程では，抽出した文法を変更し，それをコーパス中の構文構造に反映させる方法をとっている．文法の変更をコーパスにまで反映させるのは，PCFGモデル等の確率モデルによる学習の際に訓練データとして必要であるからであり，文法の作成，変更とコーパスの作成，変更は同時に扱うべき問題である．つまり，「曖昧性を抑えた構文構造を出力するように文法を変更する」ことと，「コーパスに付与されている構文構造を曖昧性を抑えたものに変更する」ことは，結局のところ，同じことであると考えている．その結果，検討前の文法と比較して，出力される解析木の数を10^12オーダから10^5オーダまで大幅に減少させることが可能になった．さらに，この文法から得た解析結果に対して，意味情報をまったく用いず，確率一般化LRモデル(PGLRモデル)によるスコア付け1位の解析木の文の正解率は約60%であった．一方，スコア付け1位の解析木に対し，機械的な方法で文節の係り受けの精度を測定したところ，意味情報を用いなくても，89.6%という高い係り受け精度が得られた．意味情報を本格的に利用することで，さらなる精度向上が図れるという見通しを得ている．以下に本論文の構成を述べる．第節では，コーパスから文法を抽出する主な研究を二つ紹介する．第節では，我々が大規模日本語文法を作成する際の手順について述べる．第節では，コーパスから抽出した文法が，構文解析において膨大な量の曖昧性を出力する要因を考察する．第節では，構文解析結果の曖昧性の削減を考慮した具体的な文法とコーパスの変更方針を述べ，第節，第節では，変更したコーパスから抽出した文法の有効性を実験により明らかにする．最後に，第節で本研究を総括し今後の課題を述べる．</section>
  <section title="関連研究とその問題点">本節では，文法をコーパスから抽出する主な類似研究を紹介する．英語の大規模な構文構造付きコーパスとしてPennTreebankコーパスがある．Charniakはこのコーパスから``tree-bankgrammar''と呼ばれるCFGを抽出し，人手で作成した文法との比較を行っている．tree-bankgrammarは，各中間ノードについて，そのラベルを左辺に，子ノードのラベルを右辺に持つCFG規則を獲得することで抽出できる(図)．これまで，コーパスから抽出した文法では，構文解析はうまくいかないと言われていたが，人手で作成した文法との比較実験の結果，特に単語数の多い長い文では，コーパスから自動抽出した文法の解析精度が良くなることを示し，それまでの一般的な見識が誤りであることを明らかにしている．一方，日本語では，PennTreebankコーパスのような大規模な構文構造付きコーパスが存在しない．大規模なコーパスとしてEDRコーパスと京大コーパスがある．しかし，EDRコーパスは括弧付きコーパスであり，付与されている構文木の内部ノードにラベルが付いていない．京大コーパスは，二つの文節間の依存関係が付与されているだけで，文節内の構造は付与されていないので，tree-bankgrammarのようなCFGは抽出できない．白井らはEDRコーパスからのCFGの自動抽出を試みている．構文木の内部ノードにラベルが付与されていないので，各内部ノードに対して適当なラベル(非終端記号)を付与する方法を提案している．しかし，日本語，英語いずれの場合にも，構文構造付きコーパスから抽出した大規模なCFGで構文解析を行うと，膨大な数の構文解析結果が出力される．この問題に対し，Charniakは，コーパス中の出現頻度の低い文法規則を削除し，確率文脈自由文法(PCFG)で得られる生成確率に基づく最良優先解析(best-firstparsing)を行い，解析途中で曖昧性を抑えている．これは，出現頻度の低い文法規則は構文解析における曖昧性を増大させるだけで，解析精度にほとんど影響を与えないという仮定に基づいている．しかし，詳細は後述するが，出現頻度の低い文法規則だけが構文解析結果の曖昧性を増大させるわけではない．労力は要するが，構文解析における曖昧性を増大させる要因を人手で分析する必要があると我々は考えている．白井らは，構文解析結果の曖昧性を増大させる要因を分析し，多数の曖昧性を作り出す文法規則を機械的に変更することで，曖昧性の削減を図っている．しかし，機械的な変更だけで曖昧性を削減することには限界があり，人手による変更も必要になる．人手による変更が必要となる例を以下に挙げる．00例えば，白井らは助詞を形態素ごとに細分化することで曖昧性を抑えている．しかし，格助詞，終助詞，並列助詞など機能による細分化も曖昧性の削減には必要である．EDRコーパス中の助詞に付与されている品詞はすべて``助詞''であり，機能による細分化は人手を要する．さらに，括弧付きコーパスであるEDRコーパスからCFGを抽出するために，内部ノードに付与するラベルを機械的に推定している．しかし，抽出される文法規則が人間の直観に合わない場合がある．例えば，「変化/し/まし/た/か」という単語列をカバーするノードのラベルを考えると(スラッシュは単語区切りを示す)，白井らのアルゴリズムでは，右端の「か」が助詞であるため，``後置詞句''となり，次のCFG規則が得られる．[~~~~~~~~]しかし，直観的には，後置詞句ではなく動詞句の方が適切である．後者は曖昧性の増減と直接は関係のないことである．しかし，人間が見て妥当なCFGを作成するためには，機械的に内部ノードのラベルを推定するのではなく，(PennTreebankコーパスのような)構文構造付きコーパスを用意し，そこから文法を抽出すべきであると考えている．</section>
  <section title="大規模日本語文法の作成手順">我々は，既存の構文構造付きコーパスを出発点とし，以下の手順で文法を作成することを試みている(図)．既存の構文構造付きコーパスから文法を抽出する構文解析結果の曖昧性を増大させる要因を分析する分析結果をもとに構文構造付きコーパスの変更方針を作成する変更方針に従ってコーパスを変更し，そこから新しい文法を再抽出する(2)〜(4)を繰り返す文法の抽出は，Charniakによるtree-bankgrammarの抽出方法と同様の方法をとる．出発点として使用した構文構造付きコーパスの概要については，付録節で述べる．上述の文法作成手順では，変更対象が構文構造付きコーパスであり，文法はコーパスから抽出されるだけであるため，「文法の作成」という表現に違和感を感じるかもしれない．しかし，既存のコーパスから抽出した文法は，コーパス作成者の意図に反し，きわめて多数の構文解析結果を出力する．そのため，コーパスの作成は，そこから抽出した文法による構文解析結果を考慮しながら行うことが望ましい．換言すれば，文法の作成，変更とコーパスの作成，変更は並行して進める必要があると考えている．このようにして作成したコーパスは，PCFGモデル等の確率モデルによる学習の際に，訓練データとしても利用できる．</section>
  <section title="構文解析結果の曖昧性を増大させる要因">繰り返し述べたように，大規模な構文構造付きコーパスから抽出したCFGをそのまま利用して構文解析を行うと，多数の曖昧性を生じる．曖昧性が増大すると，解析に必要な時間，メモリ量が増大するだけでなく，その中から構文的に正しいものを選択することが困難になる．この問題を解決するためには，曖昧性を増大させる要因を分析しなければならない．曖昧性を増大させる要因は，以下の4種類に大別できる．要因1と2は，コーパスの誤りであるため，訂正すべきもとのして，以下の考察から除外する．一方，要因3と4はコーパスの誤りではない．要因3の解決には，どの構文情報が必要であるかを考察し，その情報を非終端記号に追加し，細分化する．要因4の解決には，意味情報を利用しない限り解決が困難な曖昧性を包含した単一の構文構造をコーパスに付与し，CFGを再抽出する．すなわち，再抽出したCFGによる構文解析結果では，要因4による曖昧性を区別しない．こうすることで，構文解析結果の曖昧性を抑えられるだけでなく，意味解析で解消すべき曖昧性の所在が明らかになる．次節では，我々の具体的な変更方針について述べる．</section>
  <section title="文法，コーパスの変更方針">要因3の曖昧性はすべて除外することが理想である．EisnerやKomagataは，CategorialCombinatoryGrammar(CCG)について，解析器側を変更することによってこの曖昧性を完全に除外し，一つの意味解釈に対して一つの解析木を出力する(exactlyonesyntacticstructurepersemanticreading)手法を提案している．本研究ではCFGを使用し，解析器に変更を加えるのではなく，文法とコーパスそのものを変更しながら，この曖昧性を抑える．さらに，我々は，要因4の曖昧性を包含した単一の構造を生成する(意味的情報は利用しないことを前提とした)，構文解析のための大規模日本語文法の構築を目的としている．しかし，この方針によって，出力される構文解析木の数を抑えることは，その後の意味解析を困難にすることもあり得る．そのため，構文解析時には包含された曖昧性を意味解析で解消することを念頭に置きながら，要因4の曖昧性のうち，どれを単一の構文構造で表現し，構文解析結果の曖昧性を抑えるかを詳細に検討する必要がある．我々が使用しているコーパスには，以下のような不備や欠点があった．用言の活用形に関する情報の欠落(要因3)複合名詞内の構造の曖昧性(要因4)連用修飾句，連体修飾句の係り先の曖昧性(要因4)並列構造の曖昧性(要因4)これらについて，具体的に変更方針を述べる．</section>
  <subsection title="用言の活用形に関する情報の欠落">用言の活用形の情報が欠落しているためにそれが連体修飾句になるか連用修飾句になるかで曖昧になることを，第節で，要因3の曖昧性の例として挙げた．実際，我々が使用しているコーパスで，この問題があった．これを解決するために，用言等の語尾や助動詞の活用形に関する情報を構文構造に引き継ぐように変更する(図)．ただし，未然形，連用形等すべての活用形を付与するのではなく，その語が末尾に現れることで連用修飾句，または連体修飾句になり得る場合にのみ，それぞれ「連用」，「連体」というラベルを追加する．これは，活用形の情報を付与する目的が，その用言が連用修飾句になり得るものか，連体修飾句になり得るものかを区別するためであり，それ以外の情報は必要ないからである．</subsection>
  <subsection title="複合名詞内の構造の曖昧性">複合名詞内の構造の曖昧性を構文解析で解消することは困難であり，この曖昧性を構文解析結果の違いとして出力すべきではないと考えている．白井らも，この曖昧性を構文解析結果の違いとして出力しないよう文法を変更している．我々もその方針に倣い，複合名詞については，語構成に関係なく右下がりの構造に統一する(図)．</subsection>
  <subsection title="連用修飾句，連体修飾句の係り先の曖昧性">次に，連用修飾句，連体修飾句の係り先の曖昧性の扱いを検討する．我々は，連用修飾関係の曖昧性は従来通り別の構造として区別し(すなわち，構造は変更しない)，連体修飾関係を表す構造を，複合名詞の場合と同様，意味に関係なく同一の構造にする(図)．つまり，連用修飾関係の曖昧性は構文解析結果の曖昧性として残し，連体修飾関係の曖昧性は構文解析の段階では出さず，後の意味解析でこの曖昧性を解消することになる．上述の方針に決定した理由は二つある．一つは，連用修飾関係を表す構造を意味に関係なく同一の構造にすることは，構文解析後の意味解析を困難にすることになるからである．例えば，「欧米/諸国/は/日本/の/流通/制度/の/改善/を/求めている」という単文を考える．ただし，スラッシュは単語区切りを表す(「求めている」は動詞語幹，助動詞語幹，語尾に分割されるが，簡単のため，ここでは1語として表記する)．この文に対してボトムアップに(意味的に正しい)構文構造を付与すると，次の手順になる．「欧米諸国」，「流通制度」のそれぞれを一つの複合名詞にまとめる(図の破線で囲まれた部分)．「日本の」と「流通制度」，そして「(日本の)流通制度の」と「改善」のそれぞれを一つの連体修飾関係にまとめる(図の細い実線で囲まれた部分)．「(日本の流通制度の)改善を」と「求めている」，「欧米諸国は」と「(日本の流通制度の改善を)求めている」の二つの連用修飾関係をまとめる(図の太い実線で囲まれた部分)．このように考えると，単文では，連用修飾関係を表すレベルが連体修飾を表すレベルより上にある．複文や重文は，この単文を組み合わせることで構成される．上位レベルである連用修飾関係を表す構造を意味に関係なく同一構造にすることは，複文や重文を構成する単文のまとまりを破壊することになり，文全体の構造がとらえにくくなる．その結果，構文解析後の意味解析が困難になる．下位レベルである連体修飾関係を表す構造を，意味に関係なく同一構造にし，連用修飾関係を表す構造は従来通り別の構造として区別することで，その後の意味解析を困難にせずに，構文解析の段階の曖昧性を抑えられると考えている．もう一つの理由は，連用修飾句の係り先の曖昧性の解消は，連体修飾句の係り先の曖昧性の解消に比べて，構文解析での解決が容易であるからである．連用修飾句の係り先は，助詞と動詞の関係，副詞と助動詞の関係等を利用することで，決定できる可能性があるのに対し，連体修飾句の係り先は，連用修飾句の場合に比べて，品詞レベルでの解決が難しい．そこで，品詞レベルでの解決が比較的容易な連用修飾関係を表す構造は従来通りとし，連体修飾関係を表す構造は，意味に関係なく同一構造にすべきであると，我々は考えている．ただし，連体修飾句の係り先の曖昧性が，大別して2種類あることに注意したい．連用修飾句の範囲を変えないもの連用修飾句の範囲を変えるもの図にそれぞれの例を示す．太い実線で囲まれた句は連用修飾句を，細い実線で囲まれた句は連体修飾句を，破線で囲まれた句は動詞を，網掛けの長方形で囲まれた句は連体修飾を受ける名詞を，矢印の始点は修飾関係の係り元を，終点は係り先を表す．「新しい環境への適応能力を調べる」の場合，連体修飾句「新しい」が「環境」に係る場合でも「適応能力」に係る場合でも，動詞「調べる」に係る連用修飾句は「新しい環境への適応能力を」であることには変わりはない(図(a)，(b))．ところが，「百年の歴史を持つ祭り」では，連体修飾句「百年の」が「歴史」に係る場合の動詞「持つ」に係る連用修飾句は「百年の歴史を」であるのに対し，「百年の」が「祭り」に係る場合も考えられないこともない．後者の場合は，「歴史を」のみが「持つ」に係る連用修飾句となる(図(c)，(d))．我々は，連用修飾句の範囲と係り先は従来のまま変更せず，そこから抽出した文法は，その曖昧性を構文解析の段階に出力することにしている．その方針に合わせ，連用修飾句の範囲を変えない場合に限り，連体修飾関係を表す構造を同一の構造に統一する(すなわち，「新しい環境への適応能力を調べる」の場合は図(b)の構造に変更し，「百年の歴史を持つ祭り」の場合は図(c)の構造のままにしておく)．</subsection>
  <subsection title="並列構造の曖昧性">並列構造の曖昧性の解消には意味的情報が必要であり，係り受け解析において並列構造を含む文の正解率は，含まない文に比べて低くなる．予備実験によると，並列構造を含む文の正解率は，含まない文の正解率の半分程度しかない．文の正解率を全体的に上げるためには，並列構造の曖昧性について検討する必要がある．KNPでは，先に並列関係にある部分を決定し，次にその内部の構造を分析するアプローチを採用している．しかし，我々は，並列関係にあるかどうかの判定は構文解析に先立って行わず，その後の意味解析の段階で行うこととする．言い換えると，注目している二つの部分が並列関係にあるかどうかの曖昧性は，構文解析の段階では区別しない．日本語には，並列名詞句，並列述語句，並列助詞句の3種類の並列構造がある．我々は，これらの構造を以下の方針で変更する．以上をまとめると，我々の文法とコーパスの変更方針は以下のようになる．0複合名詞内の構造の曖昧性，連用修飾句の範囲を変えない連体修飾句の係り先の曖昧性はタイプ3の曖昧性とし，構文解析の段階では一つの構文構造を出力する．連用修飾句の係り先の曖昧性，連用修飾句の範囲を変える連体修飾句の係り先の曖昧性はタイプ1の曖昧性とし，構文解析の段階で係り受け構造を反映した異なる構造を出力する．並列構造の曖昧性はタイプ3の曖昧性とし，二つの句が並列関係にあるか否かの曖昧性は，構文解析の段階では一つの構文構造を出力する．複合名詞内の構造，連用修飾句の範囲を変えない連体修飾句の係り受け関係の構造は，語構成や意味に関係なく同一の構造にする．連用修飾句の係り受け関係の構造，連用修飾句の範囲を変える連体修飾句の係り受け関係の構造は，従来通りの構造にする．ただし，用言のとる表層格の情報は無視する．二つの句が並列関係にあるか否かの判定は構文解析の段階では行わず，並列関係にあるか否かで構造の区別はしない．以上の方針に従って構築した文法を使用し，「道路の両側には水を流すための溝が掘ってあります」という文を構文解析すると，図に示す4個の構文構造が生成される．ただし，実線で囲まれた句は連用修飾句を，破線で囲まれた句は動詞を，矢印の始点は連用修飾関係の係り元を，終点は係り先を表す．これら4個の構文構造は，連用修飾句の範囲とその係り先の違いを表し，この中から一つの構文構造を選択することは，連用修飾句の範囲とその係り先を決定することを意味する．一方，連体修飾句の係り先は，各構文構造が持つ意味的曖昧性の中から一つの意味解釈を生成することによって決定する．例えば，構文構造(b)では連体修飾句「道路の両側には水を流す」が「ため」に係るか「溝」に係るかを決定し，構文構造(c)では連体修飾句「道路の」と「両側には水を流す」が，それぞれ「ため」に係るか「溝」に係るかを決定する．一方，構文構造(b)では，「道路の」が「ため」や「溝」に係る可能性は，動詞「流す」を連用修飾する「道路の両側には」という句の範囲を変えることになるので考慮する必要はない．</subsection>
  <section title="評価実験">前節で述べた方針によるコーパスへの構文構造の付与の有用性を確認するため，コーパスから抽出した文法を用いて，以下の2点について評価実験を行った．構文解析結果の曖昧性がどの程度抑えられているかどの程度の構文解析精度が得られるか(1)の評価実験は本研究の目的そのものであるが，曖昧性が抑えられていても，解析精度が低ければ問題であるので，(2)の評価実験も必要である．</section>
  <subsection title="文法，コーパスの構文構造の変更">まず，付録節で述べたコーパス8911文(平均20形態素)に対し，我々の方針に従って構文構造付きコーパス作成支援ツールで構文構造を変更した．具体的には，以下の手順で変更を行っている．我々の変更方針に従って文法を人手で変更．MSLRパーザでコーパス中の文を構文解析し，構文解析結果の集合(統語圧縮共有森，packed-sharedforest)を獲得．コーパス作成支援ツールで，構文解析結果の集合を絞り込み，最終的に1つの正しい構文構造を選択．手順(3)で使用するコーパス支援ツールは，解析結果を1つずつ表示させながら正しい構文構造を選択するためのものではなく，非終端記号名や特定の句の係り先を，正しい構文構造が満たすべき制約として，作業者が順々に与え，それを満たさない候補を排除しながら正しい構文構造を残すためのものである．制約は，構文構造が曖昧な箇所(制約の教示を必要とする非終端記号や係り受け)をマウスで選択し，表示される選択肢から正しい候補を選択することで与える．作業は，100文をラベル付けするのに約3時間かかり，4人でこの約9000文をラベル付けするのに約1ヶ月かかった．</subsection>
  <subsection title="構文解析結果の曖昧性の変化">変更前，変更後のコーパス全8911文からそれぞれ文法を抽出し(以降，変更前，変更後のコーパスから抽出した文法を，それぞれ「変更前の文法」，「変更後の文法」と呼ぶ)，MSLRパーザで構文解析を行った．変更前，変更後の文法による構文解析結果の数を表に示す．我々のコーパスの変更方針により，文法規則数は約250個増加しているが，構文解析結果の数は10^12オーダから10^5オーダに減少した．白井らの手法では，EDRコーパス約188,000文から抽出した文法で1文あたり10^9オーダの解析木が出力される．文法抽出に使用した文の数に大きな差があるため公平な比較にはならないが，白井らの文法に比べて曖昧性が減少している主な要因として，以下の3つが考えられる．</subsection>
  <subsection title="構文解析精度の変化">構文解析結果を確率一般化LR(PGLR)モデルでランク付けし，解析精度を調べた．ただし，8911文を10分割し，一つを評価用，残りをPGLRモデルの学習用とし，10分割交差検定で評価を行った．文法は全8911文から抽出したもの(G_)と，学習用データのみから抽出したもの(G_)の2通りを用意した．図，図に，上位1位から100位以内の解析結果についての文の正解率を示す．ただし，文の正解率は以下のように定義される．[=]ここで，「正しい木」とは，コーパスの構文構造と完全に一致する解析木を指す．また，文法G_の被覆率，再現率を表に示す．ただし，被覆率，再現率は以下のように定義する．[=-][=]従来の研究では，評価尺度として括弧付けの再現率や適合率など部分的な構造の正しさを示すものを使用することが多い．しかし，我々は，構文解析結果の集合から尤もらしい解析結果をいくつか選択し，それらに対して意味解析を行うことを前提としているので，構文解析の段階では，意図した構文構造と完全に一致していることが望ましい．構文構造の部分的な正しさを示す括弧付けの再現率や適合率よりも，上述の文の正解率の方が条件が厳しいが，重要な尺度であると考えている．PGLRモデルによる生成確率の上位100位以内の解析結果について見てみると，変更前，変更後の文法による文の正解率は，文法G_ではそれぞれ88.45%，98.62%となり，文法G_ではそれぞれ86.23%，94.66%となり，変更後の文法の方が8〜10%高くなっている．またG_，G_どちらの場合でも，変更後の文法で，変更前の文法による上位100位以内の文の正解率に達するには，上位10位以内の解析結果を考慮するだけで十分であり，我々のコーパスの変更方針が有効であることが分かる．表より，我々の文法G_の被覆率は97%以上であり，広範囲の文の解析が可能であることが分かる．一方，被覆率，再現率ともに，我々の方針による変更によって1%程度低くなり，解析不能なものが変更前に比べて1%程度多く生じる．これは，構文解析結果の曖昧性を抑えるために非終端記号を細分化したことによるものである．文法G_による上位100位の文の正解率の差が文法G_によるものの差より小さくなる要因は，この再現率の差にある．しかし，文の正解率が我々の変更によって10%近く上がることから，被覆率や再現率がこの程度低下することは許容できると考えている．0さらに，予備実験として，無作為に選んだ100文について，変更後の文法による1位の解析結果を調査したところ，文節区切りが完全に一致するものは96文あり，それらの文節の係り受け正解率は89.23%であった．これは，SupportVectorMachineや最大エントロピー法を用いた文節係り受け解析の手法の正解率と同程度であり，意味情報を用いることでさらに正解率が向上すると考えている．</subsection>
  <section title="PGLRモデルによる解析結果を利用した係り受け解析">前節で，我々の方針により作成したコーパスから抽出した大規模日本語文法が，構文解析結果の曖昧性を抑え，文の正解率が約10%向上することを示した．しかし，構文解析結果の曖昧性を抑えるために，一部の曖昧性を同一の構造で表現することとし，その内部構造を厳密に決定していないため，文の正解率が高くなるのは当然であるという疑問が残る．そこで，PGLRモデルによる解析結果を利用した文節係り受け解析を行い，係り受け精度を調べた．</section>
  <subsection title="構文木からの文節係り受け関係の抽出">文節の係り受け関係は，構文木から取り出す．その手順を以下に示す．文節区切りを決定する構文構造をもとに，各文節について，係り先となる文節を決定する例えば，図の構文木の場合，文節区切りと各文節の係り先となる文節は表のようになる．我々が使用しているコーパスに付与されている構造は句構造であり，文節中のどの語に係るかをさらに厳密に決定することも可能である．しかし，今回の実験では，どの文節に係るかのみを決定する．変更後の文法では，連体修飾句の係り受け関係の構造は連用修飾句の範囲を変えない場合に限り，同一の構造(右下がりの構造)に制限している．そのため，連体修飾句の係り受け解析を行う際は，連体修飾関係の曖昧性をすべて考慮しなければならない．しかし，今回は，PGLRモデルによる生成確率1位の構文木中の連体修飾句は(意味的情報を用いず)係り得る名詞の中で最も近いものを含む文節に係ることとする．例えば，「青い目のアメリカから来た男性に会う」という文の「青い目のアメリカから来た男性に」という助詞句を考える．変更後の文法でこの文を構文解析すると，この助詞句について，図(a)，(c)，(e)の3通りの解析木が出力される(中間ノードのラベルは省略する)．図(a)のような構文木が生成された場合，その係り受けは，図(b)に示すように，文節「青い」が文節「目の」に，文節「目の」が文節「男性に」に直接係るとして係り受け精度を計算する(文節「アメリカから」は文節「来た」に，文節「来た」は文節「男性に」に係る)．図(c)，(e)の場合は，それぞれ図(d)，(f)に示すような係り受け構造となる．連用修飾句の係り先の曖昧性は構文解析結果の曖昧性として残しているので，構文解析結果として出力された構造をそのまま利用する．複合名詞の内部の構造は語構成に関係なく同一の構造としているが，今回の実験では文節の係り受け構造を抽出するだけであるので，複合名詞の内部の構造までは考慮されない．2つの文節が並列関係にあるか否かの曖昧性は，今回の評価実験では無視し，並列名詞句は連体修飾関係として，並列述語句と並列助詞句は連用修飾関係として扱う．</subsection>
  <section title="まとめ">多様な言語現象を扱える大規模な文法は，構文構造付きコーパスから抽出することで構築可能であるが，そのようにして抽出した文法を用いた構文解析は，構文解析結果の曖昧性を極端に増大させることが多く，実用に供されていないのが現状である．本論文では，困難ではあっても曖昧性を増大させる要因を十分分析し，文法やコーパスの変更を繰り返すことによって，構文解析のための実用的な大規模文法を構築できることを示した．これらの文法，コーパスの変更点は，我々が本論文で扱ったコーパス特有の問題ではなく，一般性を持つものである．また，本論文では既存のコーパスに付与されている構文構造を変更しながら，抽出した文法による構文解析結果の曖昧性の削減を図っているが，新たに構文構造付きコーパスを作成する際には，この方針がコーパス作成基準となる．従来の構文構造付きコーパス作成基準は抽出したCFGによる構文解析結果の曖昧性を十分に考慮していないが，本論文で述べた方針に留意してコーパスを作成することで，CFG抽出に適したコーパスを新たに作成可能であると我々は考えている．本論文で述べた変更を施したコーパスから抽出したCFGで構文解析を行うと，変更前のCFGを使用した場合に比べて，構文解析における曖昧性を大幅に抑えることが可能であることを実験的に示した．また，PGLRモデルによるスコア付けにより，上位100位以内の構文解析結果に対する文の正解率が10%向上することを確認した．さらに，生成確率が1位となる構文解析結果の文節の係り受けの精度は90%前後であり，既存の係り受け解析の手法と比較しても同程度の精度を有していることを確認した．我々は，SDSAの枠組みを利用し，共起情報を用いて係り受け解析を行うことにより，小規模実験の段階ではあるが，93%の係り受け精度が得られている．今後の課題を以下に示す．本論文で述べた変更方針で構文解析結果の曖昧性を大幅に抑制できたが，まだ十分ではない．例えば，日本語では助詞落ちが頻繁に出現するが，これを扱うことは曖昧性の増大につながる．省略されている助詞を前処理で補うべきか，意味解析で補うべきかを現在検討中である．我々の文法は，構文解析における曖昧性を抑えるために一部の構文構造を制限している．後処理として想定されている本格的な意味解析の手法の検討が必要である．本論文で述べたコーパスの変更方針では，形態素レベル(品詞レベル)の曖昧性を考慮していない．しかし，構文解析結果の曖昧性をさらに抑えるためには，形態素区切りの基準や品詞体系の見直しが必要である．現在，茶筌の品詞体系を基に検討しているところである．コーパスの作成や，変更方針の検討には複数の作業者が必要であり，さらに，その作業は長期間に及ぶため，バージョン管理が重要となる．そのために，コーパスをデータベース化し，検索システムやコーパス作成ツールを組み込むことで，コーパス作成のための大規模な支援システムを構築することが必要である．</section>
  <section title="文法作成の出発点として使用したコーパス">本節では，我々が文法作成の出発点として使用した構文構造付きコーパスについて述べる．我々が使用したコーパスは，EDRコーパス中の文(約2万文)に対し，人手で構文構造を付与したものである．基本的な構造はEDRコーパスに付与されている括弧付き構造に準拠しているが，単語区切り，品詞体系，構文構造それぞれについて，元となるEDRコーパスと異なる点がある．</section>
  <subsection title="基本構造">我々が使用したコーパスに付与されている構造は，以下の3つの層に分かれている(図)．</subsection>
  <subsection title="単語区切りと品詞体系">EDRコーパスで使用されている品詞は15種類しかなく，比較的粗い品詞体系となっている．しかし，これは構文解析を行うのに十分であるとは言えない．白井らは，助詞と記号を，表層情報(形態素)を利用して細分化しているが，それでも，まだ十分ではないと考えている．そこで，EDR日本語単語辞書に記載されている品詞名，左右連接属性(連接属性対)，用言のとる表層格情報を組み合わせることにより，さらに細分化したものを第1層の品詞として使用している(表)．ただし，「開講」等「する」を伴って動詞を形成するものは，EDR日本語単語辞書では``JN1;JVE''という品詞が割り当てられているが，我々が使用したコーパスでは``JSH''で置き換えている．また，「(のぼり)はじめる」のように動詞に続く動詞や形容詞は，補助動詞(JAX)としている．EDRコーパスでは，「不安感を強めている」の「てい(る)」は「て(助詞)」，「い(動詞)」の2単語に分かれているが，我々が使用したコーパスでは，助動詞相当句として1単語としている(表)．「によって」等の助詞相当句も同様である．EDR日本語単語辞書をもとにした品詞体系は非常に細かく，実際にコーパスに出現した品詞だけでも600種類を数える(存在し得る品詞を含めると優に1000種類を超える)．この品詞の上に直接構文構造を付けると，そのコーパスから抽出した文法規則が複雑になる．そこで，品詞分類を粗くする層として第2層を設けている．これにより，品詞分類が100種類程度に減少する．本論文では，構文構造を図示する際，必要でない限り，第1層の品詞を省略し，第2層の粗い品詞を終端記号とする．0粗い品詞分類は，以下のようになっている．</subsection>
  <subsection title="構文構造">第3層の構造は基本的にEDRコーパスの括弧付けに従い，各中間ノードに非終端記号を付与する．ただし，我々が使用したコーパスでは1つの中間ノードに複数の非終端記号を縦に続けて割り当てることもあり，これにより，コーパスから抽出した文法が非終端記号の置き換え規則を含むようになる．例えば，「文法が」と「日本語文法が」という2つの句に対して，の場合は図(a)のような構造になり，我々が使用したコーパスでは図(b)のような構造になる．(a)から抽出される後置詞句に関する文法規則は，名詞句に助詞が結合する規則と名詞に助詞が結合する規則の2つになるが，(b)から抽出される助詞句に関する文法規則は，名詞句に助詞が結合する規則のみである．その代わり，名詞句を構成するまでの部分が深くなるが，名詞や複合名詞から名詞句への置き換え規則を設け，類似の規則をまとめることで，句より上のレベルと下のレベルを明確に分けることができ，構造や抽出した文法規則が分かりやすくなる．構造は基本的にEDRコーパスの括弧付けに従うが，次の場合には括弧付けとは異なる構造を付与する．我々が使用したコーパス中の用言を表す品詞には，それらがとる表層格の情報が付与されている．その表層格の情報は，第3層の構文構造にも引き継がれ，該当する助詞句によって打ち消される(図)．これにより，二重ヲ格等の制約を取り入れることが可能になる．document</subsection>
</root>
